"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/gray-matter";
exports.ids = ["vendor-chunks/gray-matter"];
exports.modules = {

/***/ "(rsc)/./node_modules/gray-matter/index.js":
/*!*******************************************!*\
  !*** ./node_modules/gray-matter/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst sections = __webpack_require__(/*! section-matter */ \"(rsc)/./node_modules/section-matter/index.js\");\nconst defaults = __webpack_require__(/*! ./lib/defaults */ \"(rsc)/./node_modules/gray-matter/lib/defaults.js\");\nconst stringify = __webpack_require__(/*! ./lib/stringify */ \"(rsc)/./node_modules/gray-matter/lib/stringify.js\");\nconst excerpt = __webpack_require__(/*! ./lib/excerpt */ \"(rsc)/./node_modules/gray-matter/lib/excerpt.js\");\nconst engines = __webpack_require__(/*! ./lib/engines */ \"(rsc)/./node_modules/gray-matter/lib/engines.js\");\nconst toFile = __webpack_require__(/*! ./lib/to-file */ \"(rsc)/./node_modules/gray-matter/lib/to-file.js\");\nconst parse = __webpack_require__(/*! ./lib/parse */ \"(rsc)/./node_modules/gray-matter/lib/parse.js\");\nconst utils = __webpack_require__(/*! ./lib/utils */ \"(rsc)/./node_modules/gray-matter/lib/utils.js\");\n\n/**\n * Takes a string or object with `content` property, extracts\n * and parses front-matter from the string, then returns an object\n * with `data`, `content` and other [useful properties](#returned-object).\n *\n * ```js\n * const matter = require('gray-matter');\n * console.log(matter('---\\ntitle: Home\\n---\\nOther stuff'));\n * //=> { data: { title: 'Home'}, content: 'Other stuff' }\n * ```\n * @param {Object|String} `input` String, or object with `content` string\n * @param {Object} `options`\n * @return {Object}\n * @api public\n */\n\nfunction matter(input, options) {\n  if (input === '') {\n    return {\n      data: {},\n      content: input,\n      excerpt: '',\n      orig: input\n    };\n  }\n  let file = toFile(input);\n  const cached = matter.cache[file.content];\n  if (!options) {\n    if (cached) {\n      file = Object.assign({}, cached);\n      file.orig = cached.orig;\n      return file;\n    }\n\n    // only cache if there are no options passed. if we cache when options\n    // are passed, we would need to also cache options values, which would\n    // negate any performance benefits of caching\n    matter.cache[file.content] = file;\n  }\n  return parseMatter(file, options);\n}\n\n/**\n * Parse front matter\n */\n\nfunction parseMatter(file, options) {\n  const opts = defaults(options);\n  const open = opts.delimiters[0];\n  const close = '\\n' + opts.delimiters[1];\n  let str = file.content;\n  if (opts.language) {\n    file.language = opts.language;\n  }\n\n  // get the length of the opening delimiter\n  const openLen = open.length;\n  if (!utils.startsWith(str, open, openLen)) {\n    excerpt(file, opts);\n    return file;\n  }\n\n  // if the next character after the opening delimiter is\n  // a character from the delimiter, then it's not a front-\n  // matter delimiter\n  if (str.charAt(openLen) === open.slice(-1)) {\n    return file;\n  }\n\n  // strip the opening delimiter\n  str = str.slice(openLen);\n  const len = str.length;\n\n  // use the language defined after first delimiter, if it exists\n  const language = matter.language(str, opts);\n  if (language.name) {\n    file.language = language.name;\n    str = str.slice(language.raw.length);\n  }\n\n  // get the index of the closing delimiter\n  let closeIndex = str.indexOf(close);\n  if (closeIndex === -1) {\n    closeIndex = len;\n  }\n\n  // get the raw front-matter block\n  file.matter = str.slice(0, closeIndex);\n  const block = file.matter.replace(/^\\s*#[^\\n]+/gm, '').trim();\n  if (block === '') {\n    file.isEmpty = true;\n    file.empty = file.content;\n    file.data = {};\n  } else {\n    // create file.data by parsing the raw file.matter block\n    file.data = parse(file.language, file.matter, opts);\n  }\n\n  // update file.content\n  if (closeIndex === len) {\n    file.content = '';\n  } else {\n    file.content = str.slice(closeIndex + close.length);\n    if (file.content[0] === '\\r') {\n      file.content = file.content.slice(1);\n    }\n    if (file.content[0] === '\\n') {\n      file.content = file.content.slice(1);\n    }\n  }\n  excerpt(file, opts);\n  if (opts.sections === true || typeof opts.section === 'function') {\n    sections(file, opts.section);\n  }\n  return file;\n}\n\n/**\n * Expose engines\n */\n\nmatter.engines = engines;\n\n/**\n * Stringify an object to YAML or the specified language, and\n * append it to the given string. By default, only YAML and JSON\n * can be stringified. See the [engines](#engines) section to learn\n * how to stringify other languages.\n *\n * ```js\n * console.log(matter.stringify('foo bar baz', {title: 'Home'}));\n * // results in:\n * // ---\n * // title: Home\n * // ---\n * // foo bar baz\n * ```\n * @param {String|Object} `file` The content string to append to stringified front-matter, or a file object with `file.content` string.\n * @param {Object} `data` Front matter to stringify.\n * @param {Object} `options` [Options](#options) to pass to gray-matter and [js-yaml].\n * @return {String} Returns a string created by wrapping stringified yaml with delimiters, and appending that to the given string.\n * @api public\n */\n\nmatter.stringify = function (file, data, options) {\n  if (typeof file === 'string') file = matter(file, options);\n  return stringify(file, data, options);\n};\n\n/**\n * Synchronously read a file from the file system and parse\n * front matter. Returns the same object as the [main function](#matter).\n *\n * ```js\n * const file = matter.read('./content/blog-post.md');\n * ```\n * @param {String} `filepath` file path of the file to read.\n * @param {Object} `options` [Options](#options) to pass to gray-matter.\n * @return {Object} Returns [an object](#returned-object) with `data` and `content`\n * @api public\n */\n\nmatter.read = function (filepath, options) {\n  const str = fs.readFileSync(filepath, 'utf8');\n  const file = matter(str, options);\n  file.path = filepath;\n  return file;\n};\n\n/**\n * Returns true if the given `string` has front matter.\n * @param  {String} `string`\n * @param  {Object} `options`\n * @return {Boolean} True if front matter exists.\n * @api public\n */\n\nmatter.test = function (str, options) {\n  return utils.startsWith(str, defaults(options).delimiters[0]);\n};\n\n/**\n * Detect the language to use, if one is defined after the\n * first front-matter delimiter.\n * @param  {String} `string`\n * @param  {Object} `options`\n * @return {Object} Object with `raw` (actual language string), and `name`, the language with whitespace trimmed\n */\n\nmatter.language = function (str, options) {\n  const opts = defaults(options);\n  const open = opts.delimiters[0];\n  if (matter.test(str)) {\n    str = str.slice(open.length);\n  }\n  const language = str.slice(0, str.search(/\\r?\\n/));\n  return {\n    raw: language,\n    name: language ? language.trim() : ''\n  };\n};\n\n/**\n * Expose `matter`\n */\n\nmatter.cache = {};\nmatter.clearCache = function () {\n  matter.cache = {};\n};\nmodule.exports = matter;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/lib/defaults.js":
/*!**************************************************!*\
  !*** ./node_modules/gray-matter/lib/defaults.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst engines = __webpack_require__(/*! ./engines */ \"(rsc)/./node_modules/gray-matter/lib/engines.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/gray-matter/lib/utils.js\");\nmodule.exports = function (options) {\n  const opts = Object.assign({}, options);\n\n  // ensure that delimiters are an array\n  opts.delimiters = utils.arrayify(opts.delims || opts.delimiters || '---');\n  if (opts.delimiters.length === 1) {\n    opts.delimiters.push(opts.delimiters[0]);\n  }\n  opts.language = (opts.language || opts.lang || 'yaml').toLowerCase();\n  opts.engines = Object.assign({}, engines, opts.parsers, opts.engines);\n  return opts;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL2RlZmF1bHRzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLE1BQU1BLE9BQU8sR0FBR0MsbUJBQU8sQ0FBQyxrRUFBVyxDQUFDO0FBQ3BDLE1BQU1DLEtBQUssR0FBR0QsbUJBQU8sQ0FBQyw4REFBUyxDQUFDO0FBRWhDRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFTQyxPQUFPLEVBQUU7RUFDakMsTUFBTUMsSUFBSSxHQUFHQyxNQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRUgsT0FBTyxDQUFDOztFQUV2QztFQUNBQyxJQUFJLENBQUNHLFVBQVUsR0FBR1AsS0FBSyxDQUFDUSxRQUFRLENBQUNKLElBQUksQ0FBQ0ssTUFBTSxJQUFJTCxJQUFJLENBQUNHLFVBQVUsSUFBSSxLQUFLLENBQUM7RUFDekUsSUFBSUgsSUFBSSxDQUFDRyxVQUFVLENBQUNHLE1BQU0sS0FBSyxDQUFDLEVBQUU7SUFDaENOLElBQUksQ0FBQ0csVUFBVSxDQUFDSSxJQUFJLENBQUNQLElBQUksQ0FBQ0csVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzFDO0VBRUFILElBQUksQ0FBQ1EsUUFBUSxHQUFHLENBQUNSLElBQUksQ0FBQ1EsUUFBUSxJQUFJUixJQUFJLENBQUNTLElBQUksSUFBSSxNQUFNLEVBQUVDLFdBQVcsQ0FBQyxDQUFDO0VBQ3BFVixJQUFJLENBQUNOLE9BQU8sR0FBR08sTUFBTSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUVSLE9BQU8sRUFBRU0sSUFBSSxDQUFDVyxPQUFPLEVBQUVYLElBQUksQ0FBQ04sT0FBTyxDQUFDO0VBQ3JFLE9BQU9NLElBQUk7QUFDYixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL2RlZmF1bHRzLmpzPzg0Y2QiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBlbmdpbmVzID0gcmVxdWlyZSgnLi9lbmdpbmVzJyk7XG5jb25zdCB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcblxuICAvLyBlbnN1cmUgdGhhdCBkZWxpbWl0ZXJzIGFyZSBhbiBhcnJheVxuICBvcHRzLmRlbGltaXRlcnMgPSB1dGlscy5hcnJheWlmeShvcHRzLmRlbGltcyB8fCBvcHRzLmRlbGltaXRlcnMgfHwgJy0tLScpO1xuICBpZiAob3B0cy5kZWxpbWl0ZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgIG9wdHMuZGVsaW1pdGVycy5wdXNoKG9wdHMuZGVsaW1pdGVyc1swXSk7XG4gIH1cblxuICBvcHRzLmxhbmd1YWdlID0gKG9wdHMubGFuZ3VhZ2UgfHwgb3B0cy5sYW5nIHx8ICd5YW1sJykudG9Mb3dlckNhc2UoKTtcbiAgb3B0cy5lbmdpbmVzID0gT2JqZWN0LmFzc2lnbih7fSwgZW5naW5lcywgb3B0cy5wYXJzZXJzLCBvcHRzLmVuZ2luZXMpO1xuICByZXR1cm4gb3B0cztcbn07XG4iXSwibmFtZXMiOlsiZW5naW5lcyIsInJlcXVpcmUiLCJ1dGlscyIsIm1vZHVsZSIsImV4cG9ydHMiLCJvcHRpb25zIiwib3B0cyIsIk9iamVjdCIsImFzc2lnbiIsImRlbGltaXRlcnMiLCJhcnJheWlmeSIsImRlbGltcyIsImxlbmd0aCIsInB1c2giLCJsYW5ndWFnZSIsImxhbmciLCJ0b0xvd2VyQ2FzZSIsInBhcnNlcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/lib/defaults.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/lib/engine.js":
/*!************************************************!*\
  !*** ./node_modules/gray-matter/lib/engine.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (name, options) {\n  let engine = options.engines[name] || options.engines[aliase(name)];\n  if (typeof engine === 'undefined') {\n    throw new Error('gray-matter engine \"' + name + '\" is not registered');\n  }\n  if (typeof engine === 'function') {\n    engine = {\n      parse: engine\n    };\n  }\n  return engine;\n};\nfunction aliase(name) {\n  switch (name.toLowerCase()) {\n    case 'js':\n    case 'javascript':\n      return 'javascript';\n    case 'coffee':\n    case 'coffeescript':\n    case 'cson':\n      return 'coffee';\n    case 'yaml':\n    case 'yml':\n      return 'yaml';\n    default:\n      {\n        return name;\n      }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL2VuZ2luZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBU0MsSUFBSSxFQUFFQyxPQUFPLEVBQUU7RUFDdkMsSUFBSUMsTUFBTSxHQUFHRCxPQUFPLENBQUNFLE9BQU8sQ0FBQ0gsSUFBSSxDQUFDLElBQUlDLE9BQU8sQ0FBQ0UsT0FBTyxDQUFDQyxNQUFNLENBQUNKLElBQUksQ0FBQyxDQUFDO0VBQ25FLElBQUksT0FBT0UsTUFBTSxLQUFLLFdBQVcsRUFBRTtJQUNqQyxNQUFNLElBQUlHLEtBQUssQ0FBQyxzQkFBc0IsR0FBR0wsSUFBSSxHQUFHLHFCQUFxQixDQUFDO0VBQ3hFO0VBQ0EsSUFBSSxPQUFPRSxNQUFNLEtBQUssVUFBVSxFQUFFO0lBQ2hDQSxNQUFNLEdBQUc7TUFBRUksS0FBSyxFQUFFSjtJQUFPLENBQUM7RUFDNUI7RUFDQSxPQUFPQSxNQUFNO0FBQ2YsQ0FBQztBQUVELFNBQVNFLE1BQU1BLENBQUNKLElBQUksRUFBRTtFQUNwQixRQUFRQSxJQUFJLENBQUNPLFdBQVcsQ0FBQyxDQUFDO0lBQ3hCLEtBQUssSUFBSTtJQUNULEtBQUssWUFBWTtNQUNmLE9BQU8sWUFBWTtJQUNyQixLQUFLLFFBQVE7SUFDYixLQUFLLGNBQWM7SUFDbkIsS0FBSyxNQUFNO01BQ1QsT0FBTyxRQUFRO0lBQ2pCLEtBQUssTUFBTTtJQUNYLEtBQUssS0FBSztNQUNSLE9BQU8sTUFBTTtJQUNmO01BQVM7UUFDUCxPQUFPUCxJQUFJO01BQ2I7RUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL2VuZ2luZS5qcz9jYzI2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihuYW1lLCBvcHRpb25zKSB7XG4gIGxldCBlbmdpbmUgPSBvcHRpb25zLmVuZ2luZXNbbmFtZV0gfHwgb3B0aW9ucy5lbmdpbmVzW2FsaWFzZShuYW1lKV07XG4gIGlmICh0eXBlb2YgZW5naW5lID09PSAndW5kZWZpbmVkJykge1xuICAgIHRocm93IG5ldyBFcnJvcignZ3JheS1tYXR0ZXIgZW5naW5lIFwiJyArIG5hbWUgKyAnXCIgaXMgbm90IHJlZ2lzdGVyZWQnKTtcbiAgfVxuICBpZiAodHlwZW9mIGVuZ2luZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGVuZ2luZSA9IHsgcGFyc2U6IGVuZ2luZSB9O1xuICB9XG4gIHJldHVybiBlbmdpbmU7XG59O1xuXG5mdW5jdGlvbiBhbGlhc2UobmFtZSkge1xuICBzd2l0Y2ggKG5hbWUudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2pzJzpcbiAgICBjYXNlICdqYXZhc2NyaXB0JzpcbiAgICAgIHJldHVybiAnamF2YXNjcmlwdCc7XG4gICAgY2FzZSAnY29mZmVlJzpcbiAgICBjYXNlICdjb2ZmZWVzY3JpcHQnOlxuICAgIGNhc2UgJ2Nzb24nOlxuICAgICAgcmV0dXJuICdjb2ZmZWUnO1xuICAgIGNhc2UgJ3lhbWwnOlxuICAgIGNhc2UgJ3ltbCc6XG4gICAgICByZXR1cm4gJ3lhbWwnO1xuICAgIGRlZmF1bHQ6IHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJuYW1lIiwib3B0aW9ucyIsImVuZ2luZSIsImVuZ2luZXMiLCJhbGlhc2UiLCJFcnJvciIsInBhcnNlIiwidG9Mb3dlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/lib/engine.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/lib/engines.js":
/*!*************************************************!*\
  !*** ./node_modules/gray-matter/lib/engines.js ***!
  \*************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\n\nconst yaml = __webpack_require__(/*! js-yaml */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/index.js\");\n\n/**\n * Default engines\n */\n\nconst engines = exports = module.exports;\n\n/**\n * YAML\n */\n\nengines.yaml = {\n  parse: yaml.safeLoad.bind(yaml),\n  stringify: yaml.safeDump.bind(yaml)\n};\n\n/**\n * JSON\n */\n\nengines.json = {\n  parse: JSON.parse.bind(JSON),\n  stringify: function (obj, options) {\n    const opts = Object.assign({\n      replacer: null,\n      space: 2\n    }, options);\n    return JSON.stringify(obj, opts.replacer, opts.space);\n  }\n};\n\n/**\n * JavaScript\n */\n\nengines.javascript = {\n  parse: function parse(str, options, wrap) {\n    /* eslint no-eval: 0 */\n    try {\n      if (wrap !== false) {\n        str = '(function() {\\nreturn ' + str.trim() + ';\\n}());';\n      }\n      return eval(str) || {};\n    } catch (err) {\n      if (wrap !== false && /(unexpected|identifier)/i.test(err.message)) {\n        return parse(str, options, false);\n      }\n      throw new SyntaxError(err);\n    }\n  },\n  stringify: function () {\n    throw new Error('stringifying JavaScript is not supported');\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL2VuZ2luZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsTUFBTUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLCtFQUFTLENBQUM7O0FBRS9CO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQyxPQUFPLEdBQUdDLE9BQU8sR0FBR0MsTUFBTSxDQUFDRCxPQUFPOztBQUV4QztBQUNBO0FBQ0E7O0FBRUFELE9BQU8sQ0FBQ0YsSUFBSSxHQUFHO0VBQ2JLLEtBQUssRUFBRUwsSUFBSSxDQUFDTSxRQUFRLENBQUNDLElBQUksQ0FBQ1AsSUFBSSxDQUFDO0VBQy9CUSxTQUFTLEVBQUVSLElBQUksQ0FBQ1MsUUFBUSxDQUFDRixJQUFJLENBQUNQLElBQUk7QUFDcEMsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUFFLE9BQU8sQ0FBQ1EsSUFBSSxHQUFHO0VBQ2JMLEtBQUssRUFBRU0sSUFBSSxDQUFDTixLQUFLLENBQUNFLElBQUksQ0FBQ0ksSUFBSSxDQUFDO0VBQzVCSCxTQUFTLEVBQUUsU0FBQUEsQ0FBU0ksR0FBRyxFQUFFQyxPQUFPLEVBQUU7SUFDaEMsTUFBTUMsSUFBSSxHQUFHQyxNQUFNLENBQUNDLE1BQU0sQ0FBQztNQUFDQyxRQUFRLEVBQUUsSUFBSTtNQUFFQyxLQUFLLEVBQUU7SUFBQyxDQUFDLEVBQUVMLE9BQU8sQ0FBQztJQUMvRCxPQUFPRixJQUFJLENBQUNILFNBQVMsQ0FBQ0ksR0FBRyxFQUFFRSxJQUFJLENBQUNHLFFBQVEsRUFBRUgsSUFBSSxDQUFDSSxLQUFLLENBQUM7RUFDdkQ7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQWhCLE9BQU8sQ0FBQ2lCLFVBQVUsR0FBRztFQUNuQmQsS0FBSyxFQUFFLFNBQVNBLEtBQUtBLENBQUNlLEdBQUcsRUFBRVAsT0FBTyxFQUFFUSxJQUFJLEVBQUU7SUFDeEM7SUFDQSxJQUFJO01BQ0YsSUFBSUEsSUFBSSxLQUFLLEtBQUssRUFBRTtRQUNsQkQsR0FBRyxHQUFHLHdCQUF3QixHQUFHQSxHQUFHLENBQUNFLElBQUksQ0FBQyxDQUFDLEdBQUcsVUFBVTtNQUMxRDtNQUNBLE9BQU9DLElBQUksQ0FBQ0gsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUMsQ0FBQyxPQUFPSSxHQUFHLEVBQUU7TUFDWixJQUFJSCxJQUFJLEtBQUssS0FBSyxJQUFJLDBCQUEwQixDQUFDSSxJQUFJLENBQUNELEdBQUcsQ0FBQ0UsT0FBTyxDQUFDLEVBQUU7UUFDbEUsT0FBT3JCLEtBQUssQ0FBQ2UsR0FBRyxFQUFFUCxPQUFPLEVBQUUsS0FBSyxDQUFDO01BQ25DO01BQ0EsTUFBTSxJQUFJYyxXQUFXLENBQUNILEdBQUcsQ0FBQztJQUM1QjtFQUNGLENBQUM7RUFDRGhCLFNBQVMsRUFBRSxTQUFBQSxDQUFBLEVBQVc7SUFDcEIsTUFBTSxJQUFJb0IsS0FBSyxDQUFDLDBDQUEwQyxDQUFDO0VBQzdEO0FBQ0YsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2dfcGRpLy4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL2xpYi9lbmdpbmVzLmpzPzY2ZDAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB5YW1sID0gcmVxdWlyZSgnanMteWFtbCcpO1xuXG4vKipcbiAqIERlZmF1bHQgZW5naW5lc1xuICovXG5cbmNvbnN0IGVuZ2luZXMgPSBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHM7XG5cbi8qKlxuICogWUFNTFxuICovXG5cbmVuZ2luZXMueWFtbCA9IHtcbiAgcGFyc2U6IHlhbWwuc2FmZUxvYWQuYmluZCh5YW1sKSxcbiAgc3RyaW5naWZ5OiB5YW1sLnNhZmVEdW1wLmJpbmQoeWFtbClcbn07XG5cbi8qKlxuICogSlNPTlxuICovXG5cbmVuZ2luZXMuanNvbiA9IHtcbiAgcGFyc2U6IEpTT04ucGFyc2UuYmluZChKU09OKSxcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbihvYmosIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7cmVwbGFjZXI6IG51bGwsIHNwYWNlOiAyfSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaiwgb3B0cy5yZXBsYWNlciwgb3B0cy5zcGFjZSk7XG4gIH1cbn07XG5cbi8qKlxuICogSmF2YVNjcmlwdFxuICovXG5cbmVuZ2luZXMuamF2YXNjcmlwdCA9IHtcbiAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKHN0ciwgb3B0aW9ucywgd3JhcCkge1xuICAgIC8qIGVzbGludCBuby1ldmFsOiAwICovXG4gICAgdHJ5IHtcbiAgICAgIGlmICh3cmFwICE9PSBmYWxzZSkge1xuICAgICAgICBzdHIgPSAnKGZ1bmN0aW9uKCkge1xcbnJldHVybiAnICsgc3RyLnRyaW0oKSArICc7XFxufSgpKTsnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGV2YWwoc3RyKSB8fCB7fTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmICh3cmFwICE9PSBmYWxzZSAmJiAvKHVuZXhwZWN0ZWR8aWRlbnRpZmllcikvaS50ZXN0KGVyci5tZXNzYWdlKSkge1xuICAgICAgICByZXR1cm4gcGFyc2Uoc3RyLCBvcHRpb25zLCBmYWxzZSk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoZXJyKTtcbiAgICB9XG4gIH0sXG4gIHN0cmluZ2lmeTogZnVuY3Rpb24oKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzdHJpbmdpZnlpbmcgSmF2YVNjcmlwdCBpcyBub3Qgc3VwcG9ydGVkJyk7XG4gIH1cbn07XG4iXSwibmFtZXMiOlsieWFtbCIsInJlcXVpcmUiLCJlbmdpbmVzIiwiZXhwb3J0cyIsIm1vZHVsZSIsInBhcnNlIiwic2FmZUxvYWQiLCJiaW5kIiwic3RyaW5naWZ5Iiwic2FmZUR1bXAiLCJqc29uIiwiSlNPTiIsIm9iaiIsIm9wdGlvbnMiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwicmVwbGFjZXIiLCJzcGFjZSIsImphdmFzY3JpcHQiLCJzdHIiLCJ3cmFwIiwidHJpbSIsImV2YWwiLCJlcnIiLCJ0ZXN0IiwibWVzc2FnZSIsIlN5bnRheEVycm9yIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/lib/engines.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/lib/excerpt.js":
/*!*************************************************!*\
  !*** ./node_modules/gray-matter/lib/excerpt.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst defaults = __webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/gray-matter/lib/defaults.js\");\nmodule.exports = function (file, options) {\n  const opts = defaults(options);\n  if (file.data == null) {\n    file.data = {};\n  }\n  if (typeof opts.excerpt === 'function') {\n    return opts.excerpt(file, opts);\n  }\n  const sep = file.data.excerpt_separator || opts.excerpt_separator;\n  if (sep == null && (opts.excerpt === false || opts.excerpt == null)) {\n    return file;\n  }\n  const delimiter = typeof opts.excerpt === 'string' ? opts.excerpt : sep || opts.delimiters[0];\n\n  // if enabled, get the excerpt defined after front-matter\n  const idx = file.content.indexOf(delimiter);\n  if (idx !== -1) {\n    file.excerpt = file.content.slice(0, idx);\n  }\n  return file;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL2V4Y2VycHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsTUFBTUEsUUFBUSxHQUFHQyxtQkFBTyxDQUFDLG9FQUFZLENBQUM7QUFFdENDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQVNDLElBQUksRUFBRUMsT0FBTyxFQUFFO0VBQ3ZDLE1BQU1DLElBQUksR0FBR04sUUFBUSxDQUFDSyxPQUFPLENBQUM7RUFFOUIsSUFBSUQsSUFBSSxDQUFDRyxJQUFJLElBQUksSUFBSSxFQUFFO0lBQ3JCSCxJQUFJLENBQUNHLElBQUksR0FBRyxDQUFDLENBQUM7RUFDaEI7RUFFQSxJQUFJLE9BQU9ELElBQUksQ0FBQ0UsT0FBTyxLQUFLLFVBQVUsRUFBRTtJQUN0QyxPQUFPRixJQUFJLENBQUNFLE9BQU8sQ0FBQ0osSUFBSSxFQUFFRSxJQUFJLENBQUM7RUFDakM7RUFFQSxNQUFNRyxHQUFHLEdBQUdMLElBQUksQ0FBQ0csSUFBSSxDQUFDRyxpQkFBaUIsSUFBSUosSUFBSSxDQUFDSSxpQkFBaUI7RUFDakUsSUFBSUQsR0FBRyxJQUFJLElBQUksS0FBS0gsSUFBSSxDQUFDRSxPQUFPLEtBQUssS0FBSyxJQUFJRixJQUFJLENBQUNFLE9BQU8sSUFBSSxJQUFJLENBQUMsRUFBRTtJQUNuRSxPQUFPSixJQUFJO0VBQ2I7RUFFQSxNQUFNTyxTQUFTLEdBQUcsT0FBT0wsSUFBSSxDQUFDRSxPQUFPLEtBQUssUUFBUSxHQUM5Q0YsSUFBSSxDQUFDRSxPQUFPLEdBQ1hDLEdBQUcsSUFBSUgsSUFBSSxDQUFDTSxVQUFVLENBQUMsQ0FBQyxDQUFFOztFQUUvQjtFQUNBLE1BQU1DLEdBQUcsR0FBR1QsSUFBSSxDQUFDVSxPQUFPLENBQUNDLE9BQU8sQ0FBQ0osU0FBUyxDQUFDO0VBQzNDLElBQUlFLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRTtJQUNkVCxJQUFJLENBQUNJLE9BQU8sR0FBR0osSUFBSSxDQUFDVSxPQUFPLENBQUNFLEtBQUssQ0FBQyxDQUFDLEVBQUVILEdBQUcsQ0FBQztFQUMzQztFQUVBLE9BQU9ULElBQUk7QUFDYixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL2V4Y2VycHQuanM/ZmJjZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZpbGUsIG9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0cyA9IGRlZmF1bHRzKG9wdGlvbnMpO1xuXG4gIGlmIChmaWxlLmRhdGEgPT0gbnVsbCkge1xuICAgIGZpbGUuZGF0YSA9IHt9O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvcHRzLmV4Y2VycHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb3B0cy5leGNlcnB0KGZpbGUsIG9wdHMpO1xuICB9XG5cbiAgY29uc3Qgc2VwID0gZmlsZS5kYXRhLmV4Y2VycHRfc2VwYXJhdG9yIHx8IG9wdHMuZXhjZXJwdF9zZXBhcmF0b3I7XG4gIGlmIChzZXAgPT0gbnVsbCAmJiAob3B0cy5leGNlcnB0ID09PSBmYWxzZSB8fCBvcHRzLmV4Y2VycHQgPT0gbnVsbCkpIHtcbiAgICByZXR1cm4gZmlsZTtcbiAgfVxuXG4gIGNvbnN0IGRlbGltaXRlciA9IHR5cGVvZiBvcHRzLmV4Y2VycHQgPT09ICdzdHJpbmcnXG4gICAgPyBvcHRzLmV4Y2VycHRcbiAgICA6IChzZXAgfHwgb3B0cy5kZWxpbWl0ZXJzWzBdKTtcblxuICAvLyBpZiBlbmFibGVkLCBnZXQgdGhlIGV4Y2VycHQgZGVmaW5lZCBhZnRlciBmcm9udC1tYXR0ZXJcbiAgY29uc3QgaWR4ID0gZmlsZS5jb250ZW50LmluZGV4T2YoZGVsaW1pdGVyKTtcbiAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICBmaWxlLmV4Y2VycHQgPSBmaWxlLmNvbnRlbnQuc2xpY2UoMCwgaWR4KTtcbiAgfVxuXG4gIHJldHVybiBmaWxlO1xufTtcbiJdLCJuYW1lcyI6WyJkZWZhdWx0cyIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZmlsZSIsIm9wdGlvbnMiLCJvcHRzIiwiZGF0YSIsImV4Y2VycHQiLCJzZXAiLCJleGNlcnB0X3NlcGFyYXRvciIsImRlbGltaXRlciIsImRlbGltaXRlcnMiLCJpZHgiLCJjb250ZW50IiwiaW5kZXhPZiIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/lib/excerpt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/lib/parse.js":
/*!***********************************************!*\
  !*** ./node_modules/gray-matter/lib/parse.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst getEngine = __webpack_require__(/*! ./engine */ \"(rsc)/./node_modules/gray-matter/lib/engine.js\");\nconst defaults = __webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/gray-matter/lib/defaults.js\");\nmodule.exports = function (language, str, options) {\n  const opts = defaults(options);\n  const engine = getEngine(language, opts);\n  if (typeof engine.parse !== 'function') {\n    throw new TypeError('expected \"' + language + '.parse\" to be a function');\n  }\n  return engine.parse(str, opts);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL3BhcnNlLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLE1BQU1BLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyxnRUFBVSxDQUFDO0FBQ3JDLE1BQU1DLFFBQVEsR0FBR0QsbUJBQU8sQ0FBQyxvRUFBWSxDQUFDO0FBRXRDRSxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFTQyxRQUFRLEVBQUVDLEdBQUcsRUFBRUMsT0FBTyxFQUFFO0VBQ2hELE1BQU1DLElBQUksR0FBR04sUUFBUSxDQUFDSyxPQUFPLENBQUM7RUFDOUIsTUFBTUUsTUFBTSxHQUFHVCxTQUFTLENBQUNLLFFBQVEsRUFBRUcsSUFBSSxDQUFDO0VBQ3hDLElBQUksT0FBT0MsTUFBTSxDQUFDQyxLQUFLLEtBQUssVUFBVSxFQUFFO0lBQ3RDLE1BQU0sSUFBSUMsU0FBUyxDQUFDLFlBQVksR0FBR04sUUFBUSxHQUFHLDBCQUEwQixDQUFDO0VBQzNFO0VBQ0EsT0FBT0ksTUFBTSxDQUFDQyxLQUFLLENBQUNKLEdBQUcsRUFBRUUsSUFBSSxDQUFDO0FBQ2hDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nX3BkaS8uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9saWIvcGFyc2UuanM/MDczYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGdldEVuZ2luZSA9IHJlcXVpcmUoJy4vZW5naW5lJyk7XG5jb25zdCBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vZGVmYXVsdHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihsYW5ndWFnZSwgc3RyLCBvcHRpb25zKSB7XG4gIGNvbnN0IG9wdHMgPSBkZWZhdWx0cyhvcHRpb25zKTtcbiAgY29uc3QgZW5naW5lID0gZ2V0RW5naW5lKGxhbmd1YWdlLCBvcHRzKTtcbiAgaWYgKHR5cGVvZiBlbmdpbmUucGFyc2UgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleHBlY3RlZCBcIicgKyBsYW5ndWFnZSArICcucGFyc2VcIiB0byBiZSBhIGZ1bmN0aW9uJyk7XG4gIH1cbiAgcmV0dXJuIGVuZ2luZS5wYXJzZShzdHIsIG9wdHMpO1xufTtcbiJdLCJuYW1lcyI6WyJnZXRFbmdpbmUiLCJyZXF1aXJlIiwiZGVmYXVsdHMiLCJtb2R1bGUiLCJleHBvcnRzIiwibGFuZ3VhZ2UiLCJzdHIiLCJvcHRpb25zIiwib3B0cyIsImVuZ2luZSIsInBhcnNlIiwiVHlwZUVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/lib/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/lib/stringify.js":
/*!***************************************************!*\
  !*** ./node_modules/gray-matter/lib/stringify.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst typeOf = __webpack_require__(/*! kind-of */ \"(rsc)/./node_modules/kind-of/index.js\");\nconst getEngine = __webpack_require__(/*! ./engine */ \"(rsc)/./node_modules/gray-matter/lib/engine.js\");\nconst defaults = __webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/gray-matter/lib/defaults.js\");\nmodule.exports = function (file, data, options) {\n  if (data == null && options == null) {\n    switch (typeOf(file)) {\n      case 'object':\n        data = file.data;\n        options = {};\n        break;\n      case 'string':\n        return file;\n      default:\n        {\n          throw new TypeError('expected file to be a string or object');\n        }\n    }\n  }\n  const str = file.content;\n  const opts = defaults(options);\n  if (data == null) {\n    if (!opts.data) return file;\n    data = opts.data;\n  }\n  const language = file.language || opts.language;\n  const engine = getEngine(language, opts);\n  if (typeof engine.stringify !== 'function') {\n    throw new TypeError('expected \"' + language + '.stringify\" to be a function');\n  }\n  data = Object.assign({}, file.data, data);\n  const open = opts.delimiters[0];\n  const close = opts.delimiters[1];\n  const matter = engine.stringify(data, options).trim();\n  let buf = '';\n  if (matter !== '{}') {\n    buf = newline(open) + newline(matter) + newline(close);\n  }\n  if (typeof file.excerpt === 'string' && file.excerpt !== '') {\n    if (str.indexOf(file.excerpt.trim()) === -1) {\n      buf += newline(file.excerpt) + newline(close);\n    }\n  }\n  return buf + newline(str);\n};\nfunction newline(str) {\n  return str.slice(-1) !== '\\n' ? str + '\\n' : str;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL3N0cmluZ2lmeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixNQUFNQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsc0RBQVMsQ0FBQztBQUNqQyxNQUFNQyxTQUFTLEdBQUdELG1CQUFPLENBQUMsZ0VBQVUsQ0FBQztBQUNyQyxNQUFNRSxRQUFRLEdBQUdGLG1CQUFPLENBQUMsb0VBQVksQ0FBQztBQUV0Q0csTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBU0MsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLE9BQU8sRUFBRTtFQUM3QyxJQUFJRCxJQUFJLElBQUksSUFBSSxJQUFJQyxPQUFPLElBQUksSUFBSSxFQUFFO0lBQ25DLFFBQVFSLE1BQU0sQ0FBQ00sSUFBSSxDQUFDO01BQ2xCLEtBQUssUUFBUTtRQUNYQyxJQUFJLEdBQUdELElBQUksQ0FBQ0MsSUFBSTtRQUNoQkMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNaO01BQ0YsS0FBSyxRQUFRO1FBQ1gsT0FBT0YsSUFBSTtNQUNiO1FBQVM7VUFDUCxNQUFNLElBQUlHLFNBQVMsQ0FBQyx3Q0FBd0MsQ0FBQztRQUMvRDtJQUNGO0VBQ0Y7RUFFQSxNQUFNQyxHQUFHLEdBQUdKLElBQUksQ0FBQ0ssT0FBTztFQUN4QixNQUFNQyxJQUFJLEdBQUdULFFBQVEsQ0FBQ0ssT0FBTyxDQUFDO0VBQzlCLElBQUlELElBQUksSUFBSSxJQUFJLEVBQUU7SUFDaEIsSUFBSSxDQUFDSyxJQUFJLENBQUNMLElBQUksRUFBRSxPQUFPRCxJQUFJO0lBQzNCQyxJQUFJLEdBQUdLLElBQUksQ0FBQ0wsSUFBSTtFQUNsQjtFQUVBLE1BQU1NLFFBQVEsR0FBR1AsSUFBSSxDQUFDTyxRQUFRLElBQUlELElBQUksQ0FBQ0MsUUFBUTtFQUMvQyxNQUFNQyxNQUFNLEdBQUdaLFNBQVMsQ0FBQ1csUUFBUSxFQUFFRCxJQUFJLENBQUM7RUFDeEMsSUFBSSxPQUFPRSxNQUFNLENBQUNDLFNBQVMsS0FBSyxVQUFVLEVBQUU7SUFDMUMsTUFBTSxJQUFJTixTQUFTLENBQUMsWUFBWSxHQUFHSSxRQUFRLEdBQUcsOEJBQThCLENBQUM7RUFDL0U7RUFFQU4sSUFBSSxHQUFHUyxNQUFNLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRVgsSUFBSSxDQUFDQyxJQUFJLEVBQUVBLElBQUksQ0FBQztFQUN6QyxNQUFNVyxJQUFJLEdBQUdOLElBQUksQ0FBQ08sVUFBVSxDQUFDLENBQUMsQ0FBQztFQUMvQixNQUFNQyxLQUFLLEdBQUdSLElBQUksQ0FBQ08sVUFBVSxDQUFDLENBQUMsQ0FBQztFQUNoQyxNQUFNRSxNQUFNLEdBQUdQLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDUixJQUFJLEVBQUVDLE9BQU8sQ0FBQyxDQUFDYyxJQUFJLENBQUMsQ0FBQztFQUNyRCxJQUFJQyxHQUFHLEdBQUcsRUFBRTtFQUVaLElBQUlGLE1BQU0sS0FBSyxJQUFJLEVBQUU7SUFDbkJFLEdBQUcsR0FBR0MsT0FBTyxDQUFDTixJQUFJLENBQUMsR0FBR00sT0FBTyxDQUFDSCxNQUFNLENBQUMsR0FBR0csT0FBTyxDQUFDSixLQUFLLENBQUM7RUFDeEQ7RUFFQSxJQUFJLE9BQU9kLElBQUksQ0FBQ21CLE9BQU8sS0FBSyxRQUFRLElBQUluQixJQUFJLENBQUNtQixPQUFPLEtBQUssRUFBRSxFQUFFO0lBQzNELElBQUlmLEdBQUcsQ0FBQ2dCLE9BQU8sQ0FBQ3BCLElBQUksQ0FBQ21CLE9BQU8sQ0FBQ0gsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO01BQzNDQyxHQUFHLElBQUlDLE9BQU8sQ0FBQ2xCLElBQUksQ0FBQ21CLE9BQU8sQ0FBQyxHQUFHRCxPQUFPLENBQUNKLEtBQUssQ0FBQztJQUMvQztFQUNGO0VBRUEsT0FBT0csR0FBRyxHQUFHQyxPQUFPLENBQUNkLEdBQUcsQ0FBQztBQUMzQixDQUFDO0FBRUQsU0FBU2MsT0FBT0EsQ0FBQ2QsR0FBRyxFQUFFO0VBQ3BCLE9BQU9BLEdBQUcsQ0FBQ2lCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLElBQUksR0FBR2pCLEdBQUcsR0FBRyxJQUFJLEdBQUdBLEdBQUc7QUFDbEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nX3BkaS8uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9saWIvc3RyaW5naWZ5LmpzP2JiMjAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0eXBlT2YgPSByZXF1aXJlKCdraW5kLW9mJyk7XG5jb25zdCBnZXRFbmdpbmUgPSByZXF1aXJlKCcuL2VuZ2luZScpO1xuY29uc3QgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oZmlsZSwgZGF0YSwgb3B0aW9ucykge1xuICBpZiAoZGF0YSA9PSBudWxsICYmIG9wdGlvbnMgPT0gbnVsbCkge1xuICAgIHN3aXRjaCAodHlwZU9mKGZpbGUpKSB7XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICBkYXRhID0gZmlsZS5kYXRhO1xuICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgICAgcmV0dXJuIGZpbGU7XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4cGVjdGVkIGZpbGUgdG8gYmUgYSBzdHJpbmcgb3Igb2JqZWN0Jyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgc3RyID0gZmlsZS5jb250ZW50O1xuICBjb25zdCBvcHRzID0gZGVmYXVsdHMob3B0aW9ucyk7XG4gIGlmIChkYXRhID09IG51bGwpIHtcbiAgICBpZiAoIW9wdHMuZGF0YSkgcmV0dXJuIGZpbGU7XG4gICAgZGF0YSA9IG9wdHMuZGF0YTtcbiAgfVxuXG4gIGNvbnN0IGxhbmd1YWdlID0gZmlsZS5sYW5ndWFnZSB8fCBvcHRzLmxhbmd1YWdlO1xuICBjb25zdCBlbmdpbmUgPSBnZXRFbmdpbmUobGFuZ3VhZ2UsIG9wdHMpO1xuICBpZiAodHlwZW9mIGVuZ2luZS5zdHJpbmdpZnkgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleHBlY3RlZCBcIicgKyBsYW5ndWFnZSArICcuc3RyaW5naWZ5XCIgdG8gYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIGZpbGUuZGF0YSwgZGF0YSk7XG4gIGNvbnN0IG9wZW4gPSBvcHRzLmRlbGltaXRlcnNbMF07XG4gIGNvbnN0IGNsb3NlID0gb3B0cy5kZWxpbWl0ZXJzWzFdO1xuICBjb25zdCBtYXR0ZXIgPSBlbmdpbmUuc3RyaW5naWZ5KGRhdGEsIG9wdGlvbnMpLnRyaW0oKTtcbiAgbGV0IGJ1ZiA9ICcnO1xuXG4gIGlmIChtYXR0ZXIgIT09ICd7fScpIHtcbiAgICBidWYgPSBuZXdsaW5lKG9wZW4pICsgbmV3bGluZShtYXR0ZXIpICsgbmV3bGluZShjbG9zZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIGZpbGUuZXhjZXJwdCA9PT0gJ3N0cmluZycgJiYgZmlsZS5leGNlcnB0ICE9PSAnJykge1xuICAgIGlmIChzdHIuaW5kZXhPZihmaWxlLmV4Y2VycHQudHJpbSgpKSA9PT0gLTEpIHtcbiAgICAgIGJ1ZiArPSBuZXdsaW5lKGZpbGUuZXhjZXJwdCkgKyBuZXdsaW5lKGNsb3NlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmICsgbmV3bGluZShzdHIpO1xufTtcblxuZnVuY3Rpb24gbmV3bGluZShzdHIpIHtcbiAgcmV0dXJuIHN0ci5zbGljZSgtMSkgIT09ICdcXG4nID8gc3RyICsgJ1xcbicgOiBzdHI7XG59XG4iXSwibmFtZXMiOlsidHlwZU9mIiwicmVxdWlyZSIsImdldEVuZ2luZSIsImRlZmF1bHRzIiwibW9kdWxlIiwiZXhwb3J0cyIsImZpbGUiLCJkYXRhIiwib3B0aW9ucyIsIlR5cGVFcnJvciIsInN0ciIsImNvbnRlbnQiLCJvcHRzIiwibGFuZ3VhZ2UiLCJlbmdpbmUiLCJzdHJpbmdpZnkiLCJPYmplY3QiLCJhc3NpZ24iLCJvcGVuIiwiZGVsaW1pdGVycyIsImNsb3NlIiwibWF0dGVyIiwidHJpbSIsImJ1ZiIsIm5ld2xpbmUiLCJleGNlcnB0IiwiaW5kZXhPZiIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/lib/stringify.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/lib/to-file.js":
/*!*************************************************!*\
  !*** ./node_modules/gray-matter/lib/to-file.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nconst typeOf = __webpack_require__(/*! kind-of */ \"(rsc)/./node_modules/kind-of/index.js\");\nconst stringify = __webpack_require__(/*! ./stringify */ \"(rsc)/./node_modules/gray-matter/lib/stringify.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/gray-matter/lib/utils.js\");\n\n/**\n * Normalize the given value to ensure an object is returned\n * with the expected properties.\n */\n\nmodule.exports = function (file) {\n  if (typeOf(file) !== 'object') {\n    file = {\n      content: file\n    };\n  }\n  if (typeOf(file.data) !== 'object') {\n    file.data = {};\n  }\n\n  // if file was passed as an object, ensure that\n  // \"file.content\" is set\n  if (file.contents && file.content == null) {\n    file.content = file.contents;\n  }\n\n  // set non-enumerable properties on the file object\n  utils.define(file, 'orig', utils.toBuffer(file.content));\n  utils.define(file, 'language', file.language || '');\n  utils.define(file, 'matter', file.matter || '');\n  utils.define(file, 'stringify', function (data, options) {\n    if (options && options.language) {\n      file.language = options.language;\n    }\n    return stringify(file, data, options);\n  });\n\n  // strip BOM and ensure that \"file.content\" is a string\n  file.content = utils.toString(file.content);\n  file.isEmpty = false;\n  file.excerpt = '';\n  return file;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL3RvLWZpbGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsTUFBTUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLHNEQUFTLENBQUM7QUFDakMsTUFBTUMsU0FBUyxHQUFHRCxtQkFBTyxDQUFDLHNFQUFhLENBQUM7QUFDeEMsTUFBTUUsS0FBSyxHQUFHRixtQkFBTyxDQUFDLDhEQUFTLENBQUM7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBOztBQUVBRyxNQUFNLENBQUNDLE9BQU8sR0FBRyxVQUFTQyxJQUFJLEVBQUU7RUFDOUIsSUFBSU4sTUFBTSxDQUFDTSxJQUFJLENBQUMsS0FBSyxRQUFRLEVBQUU7SUFDN0JBLElBQUksR0FBRztNQUFFQyxPQUFPLEVBQUVEO0lBQUssQ0FBQztFQUMxQjtFQUVBLElBQUlOLE1BQU0sQ0FBQ00sSUFBSSxDQUFDRSxJQUFJLENBQUMsS0FBSyxRQUFRLEVBQUU7SUFDbENGLElBQUksQ0FBQ0UsSUFBSSxHQUFHLENBQUMsQ0FBQztFQUNoQjs7RUFFQTtFQUNBO0VBQ0EsSUFBSUYsSUFBSSxDQUFDRyxRQUFRLElBQUlILElBQUksQ0FBQ0MsT0FBTyxJQUFJLElBQUksRUFBRTtJQUN6Q0QsSUFBSSxDQUFDQyxPQUFPLEdBQUdELElBQUksQ0FBQ0csUUFBUTtFQUM5Qjs7RUFFQTtFQUNBTixLQUFLLENBQUNPLE1BQU0sQ0FBQ0osSUFBSSxFQUFFLE1BQU0sRUFBRUgsS0FBSyxDQUFDUSxRQUFRLENBQUNMLElBQUksQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDeERKLEtBQUssQ0FBQ08sTUFBTSxDQUFDSixJQUFJLEVBQUUsVUFBVSxFQUFFQSxJQUFJLENBQUNNLFFBQVEsSUFBSSxFQUFFLENBQUM7RUFDbkRULEtBQUssQ0FBQ08sTUFBTSxDQUFDSixJQUFJLEVBQUUsUUFBUSxFQUFFQSxJQUFJLENBQUNPLE1BQU0sSUFBSSxFQUFFLENBQUM7RUFDL0NWLEtBQUssQ0FBQ08sTUFBTSxDQUFDSixJQUFJLEVBQUUsV0FBVyxFQUFFLFVBQVNFLElBQUksRUFBRU0sT0FBTyxFQUFFO0lBQ3RELElBQUlBLE9BQU8sSUFBSUEsT0FBTyxDQUFDRixRQUFRLEVBQUU7TUFDL0JOLElBQUksQ0FBQ00sUUFBUSxHQUFHRSxPQUFPLENBQUNGLFFBQVE7SUFDbEM7SUFDQSxPQUFPVixTQUFTLENBQUNJLElBQUksRUFBRUUsSUFBSSxFQUFFTSxPQUFPLENBQUM7RUFDdkMsQ0FBQyxDQUFDOztFQUVGO0VBQ0FSLElBQUksQ0FBQ0MsT0FBTyxHQUFHSixLQUFLLENBQUNZLFFBQVEsQ0FBQ1QsSUFBSSxDQUFDQyxPQUFPLENBQUM7RUFDM0NELElBQUksQ0FBQ1UsT0FBTyxHQUFHLEtBQUs7RUFDcEJWLElBQUksQ0FBQ1csT0FBTyxHQUFHLEVBQUU7RUFDakIsT0FBT1gsSUFBSTtBQUNiLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nX3BkaS8uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9saWIvdG8tZmlsZS5qcz84MTQ0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdHlwZU9mID0gcmVxdWlyZSgna2luZC1vZicpO1xuY29uc3Qgc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9zdHJpbmdpZnknKTtcbmNvbnN0IHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gZW5zdXJlIGFuIG9iamVjdCBpcyByZXR1cm5lZFxuICogd2l0aCB0aGUgZXhwZWN0ZWQgcHJvcGVydGllcy5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGZpbGUpIHtcbiAgaWYgKHR5cGVPZihmaWxlKSAhPT0gJ29iamVjdCcpIHtcbiAgICBmaWxlID0geyBjb250ZW50OiBmaWxlIH07XG4gIH1cblxuICBpZiAodHlwZU9mKGZpbGUuZGF0YSkgIT09ICdvYmplY3QnKSB7XG4gICAgZmlsZS5kYXRhID0ge307XG4gIH1cblxuICAvLyBpZiBmaWxlIHdhcyBwYXNzZWQgYXMgYW4gb2JqZWN0LCBlbnN1cmUgdGhhdFxuICAvLyBcImZpbGUuY29udGVudFwiIGlzIHNldFxuICBpZiAoZmlsZS5jb250ZW50cyAmJiBmaWxlLmNvbnRlbnQgPT0gbnVsbCkge1xuICAgIGZpbGUuY29udGVudCA9IGZpbGUuY29udGVudHM7XG4gIH1cblxuICAvLyBzZXQgbm9uLWVudW1lcmFibGUgcHJvcGVydGllcyBvbiB0aGUgZmlsZSBvYmplY3RcbiAgdXRpbHMuZGVmaW5lKGZpbGUsICdvcmlnJywgdXRpbHMudG9CdWZmZXIoZmlsZS5jb250ZW50KSk7XG4gIHV0aWxzLmRlZmluZShmaWxlLCAnbGFuZ3VhZ2UnLCBmaWxlLmxhbmd1YWdlIHx8ICcnKTtcbiAgdXRpbHMuZGVmaW5lKGZpbGUsICdtYXR0ZXInLCBmaWxlLm1hdHRlciB8fCAnJyk7XG4gIHV0aWxzLmRlZmluZShmaWxlLCAnc3RyaW5naWZ5JywgZnVuY3Rpb24oZGF0YSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMubGFuZ3VhZ2UpIHtcbiAgICAgIGZpbGUubGFuZ3VhZ2UgPSBvcHRpb25zLmxhbmd1YWdlO1xuICAgIH1cbiAgICByZXR1cm4gc3RyaW5naWZ5KGZpbGUsIGRhdGEsIG9wdGlvbnMpO1xuICB9KTtcblxuICAvLyBzdHJpcCBCT00gYW5kIGVuc3VyZSB0aGF0IFwiZmlsZS5jb250ZW50XCIgaXMgYSBzdHJpbmdcbiAgZmlsZS5jb250ZW50ID0gdXRpbHMudG9TdHJpbmcoZmlsZS5jb250ZW50KTtcbiAgZmlsZS5pc0VtcHR5ID0gZmFsc2U7XG4gIGZpbGUuZXhjZXJwdCA9ICcnO1xuICByZXR1cm4gZmlsZTtcbn07XG4iXSwibmFtZXMiOlsidHlwZU9mIiwicmVxdWlyZSIsInN0cmluZ2lmeSIsInV0aWxzIiwibW9kdWxlIiwiZXhwb3J0cyIsImZpbGUiLCJjb250ZW50IiwiZGF0YSIsImNvbnRlbnRzIiwiZGVmaW5lIiwidG9CdWZmZXIiLCJsYW5ndWFnZSIsIm1hdHRlciIsIm9wdGlvbnMiLCJ0b1N0cmluZyIsImlzRW1wdHkiLCJleGNlcnB0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/lib/to-file.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/lib/utils.js":
/*!***********************************************!*\
  !*** ./node_modules/gray-matter/lib/utils.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nconst stripBom = __webpack_require__(/*! strip-bom-string */ \"(rsc)/./node_modules/strip-bom-string/index.js\");\nconst typeOf = __webpack_require__(/*! kind-of */ \"(rsc)/./node_modules/kind-of/index.js\");\nexports.define = function (obj, key, val) {\n  Reflect.defineProperty(obj, key, {\n    enumerable: false,\n    configurable: true,\n    writable: true,\n    value: val\n  });\n};\n\n/**\n * Returns true if `val` is a buffer\n */\n\nexports.isBuffer = function (val) {\n  return typeOf(val) === 'buffer';\n};\n\n/**\n * Returns true if `val` is an object\n */\n\nexports.isObject = function (val) {\n  return typeOf(val) === 'object';\n};\n\n/**\n * Cast `input` to a buffer\n */\n\nexports.toBuffer = function (input) {\n  return typeof input === 'string' ? Buffer.from(input) : input;\n};\n\n/**\n * Cast `val` to a string.\n */\n\nexports.toString = function (input) {\n  if (exports.isBuffer(input)) return stripBom(String(input));\n  if (typeof input !== 'string') {\n    throw new TypeError('expected input to be a string or buffer');\n  }\n  return stripBom(input);\n};\n\n/**\n * Cast `val` to an array.\n */\n\nexports.arrayify = function (val) {\n  return val ? Array.isArray(val) ? val : [val] : [];\n};\n\n/**\n * Returns true if `str` starts with `substr`.\n */\n\nexports.startsWith = function (str, substr, len) {\n  if (typeof len !== 'number') len = substr.length;\n  return str.slice(0, len) === substr;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLE1BQU1BLFFBQVEsR0FBR0MsbUJBQU8sQ0FBQyx3RUFBa0IsQ0FBQztBQUM1QyxNQUFNQyxNQUFNLEdBQUdELG1CQUFPLENBQUMsc0RBQVMsQ0FBQztBQUVqQ0UsY0FBYyxHQUFHLFVBQVNFLEdBQUcsRUFBRUMsR0FBRyxFQUFFQyxHQUFHLEVBQUU7RUFDdkNDLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDSixHQUFHLEVBQUVDLEdBQUcsRUFBRTtJQUMvQkksVUFBVSxFQUFFLEtBQUs7SUFDakJDLFlBQVksRUFBRSxJQUFJO0lBQ2xCQyxRQUFRLEVBQUUsSUFBSTtJQUNkQyxLQUFLLEVBQUVOO0VBQ1QsQ0FBQyxDQUFDO0FBQ0osQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUFKLGdCQUFnQixHQUFHLFVBQVNJLEdBQUcsRUFBRTtFQUMvQixPQUFPTCxNQUFNLENBQUNLLEdBQUcsQ0FBQyxLQUFLLFFBQVE7QUFDakMsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUFKLGdCQUFnQixHQUFHLFVBQVNJLEdBQUcsRUFBRTtFQUMvQixPQUFPTCxNQUFNLENBQUNLLEdBQUcsQ0FBQyxLQUFLLFFBQVE7QUFDakMsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUFKLGdCQUFnQixHQUFHLFVBQVNjLEtBQUssRUFBRTtFQUNqQyxPQUFPLE9BQU9BLEtBQUssS0FBSyxRQUFRLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDRixLQUFLLENBQUMsR0FBR0EsS0FBSztBQUMvRCxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQWQsZ0JBQWdCLEdBQUcsVUFBU2MsS0FBSyxFQUFFO0VBQ2pDLElBQUlkLE9BQU8sQ0FBQ1csUUFBUSxDQUFDRyxLQUFLLENBQUMsRUFBRSxPQUFPakIsUUFBUSxDQUFDcUIsTUFBTSxDQUFDSixLQUFLLENBQUMsQ0FBQztFQUMzRCxJQUFJLE9BQU9BLEtBQUssS0FBSyxRQUFRLEVBQUU7SUFDN0IsTUFBTSxJQUFJSyxTQUFTLENBQUMseUNBQXlDLENBQUM7RUFDaEU7RUFDQSxPQUFPdEIsUUFBUSxDQUFDaUIsS0FBSyxDQUFDO0FBQ3hCLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBZCxnQkFBZ0IsR0FBRyxVQUFTSSxHQUFHLEVBQUU7RUFDL0IsT0FBT0EsR0FBRyxHQUFJaUIsS0FBSyxDQUFDQyxPQUFPLENBQUNsQixHQUFHLENBQUMsR0FBR0EsR0FBRyxHQUFHLENBQUNBLEdBQUcsQ0FBQyxHQUFJLEVBQUU7QUFDdEQsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUFKLGtCQUFrQixHQUFHLFVBQVN3QixHQUFHLEVBQUVDLE1BQU0sRUFBRUMsR0FBRyxFQUFFO0VBQzlDLElBQUksT0FBT0EsR0FBRyxLQUFLLFFBQVEsRUFBRUEsR0FBRyxHQUFHRCxNQUFNLENBQUNFLE1BQU07RUFDaEQsT0FBT0gsR0FBRyxDQUFDSSxLQUFLLENBQUMsQ0FBQyxFQUFFRixHQUFHLENBQUMsS0FBS0QsTUFBTTtBQUNyQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbGliL3V0aWxzLmpzPzdmYmEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBzdHJpcEJvbSA9IHJlcXVpcmUoJ3N0cmlwLWJvbS1zdHJpbmcnKTtcbmNvbnN0IHR5cGVPZiA9IHJlcXVpcmUoJ2tpbmQtb2YnKTtcblxuZXhwb3J0cy5kZWZpbmUgPSBmdW5jdGlvbihvYmosIGtleSwgdmFsKSB7XG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgdmFsdWU6IHZhbFxuICB9KTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGB2YWxgIGlzIGEgYnVmZmVyXG4gKi9cblxuZXhwb3J0cy5pc0J1ZmZlciA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdHlwZU9mKHZhbCkgPT09ICdidWZmZXInO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYHZhbGAgaXMgYW4gb2JqZWN0XG4gKi9cblxuZXhwb3J0cy5pc09iamVjdCA9IGZ1bmN0aW9uKHZhbCkge1xuICByZXR1cm4gdHlwZU9mKHZhbCkgPT09ICdvYmplY3QnO1xufTtcblxuLyoqXG4gKiBDYXN0IGBpbnB1dGAgdG8gYSBidWZmZXJcbiAqL1xuXG5leHBvcnRzLnRvQnVmZmVyID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycgPyBCdWZmZXIuZnJvbShpbnB1dCkgOiBpbnB1dDtcbn07XG5cbi8qKlxuICogQ2FzdCBgdmFsYCB0byBhIHN0cmluZy5cbiAqL1xuXG5leHBvcnRzLnRvU3RyaW5nID0gZnVuY3Rpb24oaW5wdXQpIHtcbiAgaWYgKGV4cG9ydHMuaXNCdWZmZXIoaW5wdXQpKSByZXR1cm4gc3RyaXBCb20oU3RyaW5nKGlucHV0KSk7XG4gIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhwZWN0ZWQgaW5wdXQgdG8gYmUgYSBzdHJpbmcgb3IgYnVmZmVyJyk7XG4gIH1cbiAgcmV0dXJuIHN0cmlwQm9tKGlucHV0KTtcbn07XG5cbi8qKlxuICogQ2FzdCBgdmFsYCB0byBhbiBhcnJheS5cbiAqL1xuXG5leHBvcnRzLmFycmF5aWZ5ID0gZnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB2YWwgPyAoQXJyYXkuaXNBcnJheSh2YWwpID8gdmFsIDogW3ZhbF0pIDogW107XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBgc3RyYCBzdGFydHMgd2l0aCBgc3Vic3RyYC5cbiAqL1xuXG5leHBvcnRzLnN0YXJ0c1dpdGggPSBmdW5jdGlvbihzdHIsIHN1YnN0ciwgbGVuKSB7XG4gIGlmICh0eXBlb2YgbGVuICE9PSAnbnVtYmVyJykgbGVuID0gc3Vic3RyLmxlbmd0aDtcbiAgcmV0dXJuIHN0ci5zbGljZSgwLCBsZW4pID09PSBzdWJzdHI7XG59O1xuIl0sIm5hbWVzIjpbInN0cmlwQm9tIiwicmVxdWlyZSIsInR5cGVPZiIsImV4cG9ydHMiLCJkZWZpbmUiLCJvYmoiLCJrZXkiLCJ2YWwiLCJSZWZsZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ2YWx1ZSIsImlzQnVmZmVyIiwiaXNPYmplY3QiLCJ0b0J1ZmZlciIsImlucHV0IiwiQnVmZmVyIiwiZnJvbSIsInRvU3RyaW5nIiwiU3RyaW5nIiwiVHlwZUVycm9yIiwiYXJyYXlpZnkiLCJBcnJheSIsImlzQXJyYXkiLCJzdGFydHNXaXRoIiwic3RyIiwic3Vic3RyIiwibGVuIiwibGVuZ3RoIiwic2xpY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/index.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar yaml = __webpack_require__(/*! ./lib/js-yaml.js */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml.js\");\nmodule.exports = yaml;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBR2IsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDhGQUFrQixDQUFDO0FBR3RDQyxNQUFNLENBQUNDLE9BQU8sR0FBR0gsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2dfcGRpLy4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2luZGV4LmpzPzg0MjkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciB5YW1sID0gcmVxdWlyZSgnLi9saWIvanMteWFtbC5qcycpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0geWFtbDtcbiJdLCJuYW1lcyI6WyJ5YW1sIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml.js":
/*!**********************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar loader = __webpack_require__(/*! ./js-yaml/loader */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/loader.js\");\nvar dumper = __webpack_require__(/*! ./js-yaml/dumper */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/dumper.js\");\nfunction deprecated(name) {\n  return function () {\n    throw new Error('Function ' + name + ' is deprecated and cannot be used.');\n  };\n}\nmodule.exports.Type = __webpack_require__(/*! ./js-yaml/type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nmodule.exports.Schema = __webpack_require__(/*! ./js-yaml/schema */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports.FAILSAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/failsafe */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\");\nmodule.exports.JSON_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/json */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js\");\nmodule.exports.CORE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/core */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js\");\nmodule.exports.DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_safe */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nmodule.exports.DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_full */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\nmodule.exports.load = loader.load;\nmodule.exports.loadAll = loader.loadAll;\nmodule.exports.safeLoad = loader.safeLoad;\nmodule.exports.safeLoadAll = loader.safeLoadAll;\nmodule.exports.dump = dumper.dump;\nmodule.exports.safeDump = dumper.safeDump;\nmodule.exports.YAMLException = __webpack_require__(/*! ./js-yaml/exception */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\n\n// Deprecated schema names from JS-YAML 2.0.x\nmodule.exports.MINIMAL_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/failsafe */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\");\nmodule.exports.SAFE_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_safe */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nmodule.exports.DEFAULT_SCHEMA = __webpack_require__(/*! ./js-yaml/schema/default_full */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\n\n// Deprecated functions from JS-YAML 1.x.x\nmodule.exports.scan = deprecated('scan');\nmodule.exports.parse = deprecated('parse');\nmodule.exports.compose = deprecated('compose');\nmodule.exports.addConstructor = deprecated('addConstructor');//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBR2IsSUFBSUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLHFHQUFrQixDQUFDO0FBQ3hDLElBQUlDLE1BQU0sR0FBR0QsbUJBQU8sQ0FBQyxxR0FBa0IsQ0FBQztBQUd4QyxTQUFTRSxVQUFVQSxDQUFDQyxJQUFJLEVBQUU7RUFDeEIsT0FBTyxZQUFZO0lBQ2pCLE1BQU0sSUFBSUMsS0FBSyxDQUFDLFdBQVcsR0FBR0QsSUFBSSxHQUFHLG9DQUFvQyxDQUFDO0VBQzVFLENBQUM7QUFDSDtBQUdBRSw0SUFBOEQ7QUFDOURBLGtKQUFnRTtBQUNoRUEsNktBQXlFO0FBQ3pFQSxpS0FBcUU7QUFDckVBLGlLQUFxRTtBQUNyRUEseUxBQTZFO0FBQzdFQSx5TEFBNkU7QUFDN0VBLG1CQUFtQixHQUFrQk4sTUFBTSxDQUFDZSxJQUFJO0FBQ2hEVCxzQkFBc0IsR0FBZU4sTUFBTSxDQUFDZ0IsT0FBTztBQUNuRFYsdUJBQXVCLEdBQWNOLE1BQU0sQ0FBQ2lCLFFBQVE7QUFDcERYLDBCQUEwQixHQUFXTixNQUFNLENBQUNrQixXQUFXO0FBQ3ZEWixtQkFBbUIsR0FBa0JKLE1BQU0sQ0FBQ2lCLElBQUk7QUFDaERiLHVCQUF1QixHQUFjSixNQUFNLENBQUNrQixRQUFRO0FBQ3BEZCwrSkFBbUU7O0FBRW5FO0FBQ0FBLDRLQUFvRTtBQUNwRUEsaUxBQXdFO0FBQ3hFQSxvTEFBd0U7O0FBRXhFO0FBQ0FBLG1CQUFtQixHQUFhSCxVQUFVLENBQUMsTUFBTSxDQUFDO0FBQ2xERyxvQkFBb0IsR0FBWUgsVUFBVSxDQUFDLE9BQU8sQ0FBQztBQUNuREcsc0JBQXNCLEdBQVVILFVBQVUsQ0FBQyxTQUFTLENBQUM7QUFDckRHLDZCQUE2QixHQUFHSCxVQUFVLENBQUMsZ0JBQWdCLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nX3BkaS8uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC5qcz9hMjExIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG52YXIgbG9hZGVyID0gcmVxdWlyZSgnLi9qcy15YW1sL2xvYWRlcicpO1xudmFyIGR1bXBlciA9IHJlcXVpcmUoJy4vanMteWFtbC9kdW1wZXInKTtcblxuXG5mdW5jdGlvbiBkZXByZWNhdGVkKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uICcgKyBuYW1lICsgJyBpcyBkZXByZWNhdGVkIGFuZCBjYW5ub3QgYmUgdXNlZC4nKTtcbiAgfTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5UeXBlICAgICAgICAgICAgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL3R5cGUnKTtcbm1vZHVsZS5leHBvcnRzLlNjaGVtYSAgICAgICAgICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hJyk7XG5tb2R1bGUuZXhwb3J0cy5GQUlMU0FGRV9TQ0hFTUEgICAgID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYS9mYWlsc2FmZScpO1xubW9kdWxlLmV4cG9ydHMuSlNPTl9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvanNvbicpO1xubW9kdWxlLmV4cG9ydHMuQ09SRV9TQ0hFTUEgICAgICAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvY29yZScpO1xubW9kdWxlLmV4cG9ydHMuREVGQVVMVF9TQUZFX1NDSEVNQSA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5ERUZBVUxUX0ZVTExfU0NIRU1BID0gcmVxdWlyZSgnLi9qcy15YW1sL3NjaGVtYS9kZWZhdWx0X2Z1bGwnKTtcbm1vZHVsZS5leHBvcnRzLmxvYWQgICAgICAgICAgICAgICAgPSBsb2FkZXIubG9hZDtcbm1vZHVsZS5leHBvcnRzLmxvYWRBbGwgICAgICAgICAgICAgPSBsb2FkZXIubG9hZEFsbDtcbm1vZHVsZS5leHBvcnRzLnNhZmVMb2FkICAgICAgICAgICAgPSBsb2FkZXIuc2FmZUxvYWQ7XG5tb2R1bGUuZXhwb3J0cy5zYWZlTG9hZEFsbCAgICAgICAgID0gbG9hZGVyLnNhZmVMb2FkQWxsO1xubW9kdWxlLmV4cG9ydHMuZHVtcCAgICAgICAgICAgICAgICA9IGR1bXBlci5kdW1wO1xubW9kdWxlLmV4cG9ydHMuc2FmZUR1bXAgICAgICAgICAgICA9IGR1bXBlci5zYWZlRHVtcDtcbm1vZHVsZS5leHBvcnRzLllBTUxFeGNlcHRpb24gICAgICAgPSByZXF1aXJlKCcuL2pzLXlhbWwvZXhjZXB0aW9uJyk7XG5cbi8vIERlcHJlY2F0ZWQgc2NoZW1hIG5hbWVzIGZyb20gSlMtWUFNTCAyLjAueFxubW9kdWxlLmV4cG9ydHMuTUlOSU1BTF9TQ0hFTUEgPSByZXF1aXJlKCcuL2pzLXlhbWwvc2NoZW1hL2ZhaWxzYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5TQUZFX1NDSEVNQSAgICA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlJyk7XG5tb2R1bGUuZXhwb3J0cy5ERUZBVUxUX1NDSEVNQSA9IHJlcXVpcmUoJy4vanMteWFtbC9zY2hlbWEvZGVmYXVsdF9mdWxsJyk7XG5cbi8vIERlcHJlY2F0ZWQgZnVuY3Rpb25zIGZyb20gSlMtWUFNTCAxLngueFxubW9kdWxlLmV4cG9ydHMuc2NhbiAgICAgICAgICAgPSBkZXByZWNhdGVkKCdzY2FuJyk7XG5tb2R1bGUuZXhwb3J0cy5wYXJzZSAgICAgICAgICA9IGRlcHJlY2F0ZWQoJ3BhcnNlJyk7XG5tb2R1bGUuZXhwb3J0cy5jb21wb3NlICAgICAgICA9IGRlcHJlY2F0ZWQoJ2NvbXBvc2UnKTtcbm1vZHVsZS5leHBvcnRzLmFkZENvbnN0cnVjdG9yID0gZGVwcmVjYXRlZCgnYWRkQ29uc3RydWN0b3InKTtcbiJdLCJuYW1lcyI6WyJsb2FkZXIiLCJyZXF1aXJlIiwiZHVtcGVyIiwiZGVwcmVjYXRlZCIsIm5hbWUiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJUeXBlIiwiU2NoZW1hIiwiRkFJTFNBRkVfU0NIRU1BIiwiSlNPTl9TQ0hFTUEiLCJDT1JFX1NDSEVNQSIsIkRFRkFVTFRfU0FGRV9TQ0hFTUEiLCJERUZBVUxUX0ZVTExfU0NIRU1BIiwibG9hZCIsImxvYWRBbGwiLCJzYWZlTG9hZCIsInNhZmVMb2FkQWxsIiwiZHVtcCIsInNhZmVEdW1wIiwiWUFNTEV4Y2VwdGlvbiIsIk1JTklNQUxfU0NIRU1BIiwiU0FGRV9TQ0hFTUEiLCJERUZBVUxUX1NDSEVNQSIsInNjYW4iLCJwYXJzZSIsImNvbXBvc2UiLCJhZGRDb25zdHJ1Y3RvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js ***!
  \*****************************************************************************/
/***/ ((module) => {

eval("\n\nfunction isNothing(subject) {\n  return typeof subject === 'undefined' || subject === null;\n}\nfunction isObject(subject) {\n  return typeof subject === 'object' && subject !== null;\n}\nfunction toArray(sequence) {\n  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];\n  return [sequence];\n}\nfunction extend(target, source) {\n  var index, length, key, sourceKeys;\n  if (source) {\n    sourceKeys = Object.keys(source);\n    for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction repeat(string, count) {\n  var result = '',\n    cycle;\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n  return result;\n}\nfunction isNegativeZero(number) {\n  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;\n}\nmodule.exports.isNothing = isNothing;\nmodule.exports.isObject = isObject;\nmodule.exports.toArray = toArray;\nmodule.exports.repeat = repeat;\nmodule.exports.isNegativeZero = isNegativeZero;\nmodule.exports.extend = extend;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvY29tbW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUdiLFNBQVNBLFNBQVNBLENBQUNDLE9BQU8sRUFBRTtFQUMxQixPQUFRLE9BQU9BLE9BQU8sS0FBSyxXQUFXLElBQU1BLE9BQU8sS0FBSyxJQUFLO0FBQy9EO0FBR0EsU0FBU0MsUUFBUUEsQ0FBQ0QsT0FBTyxFQUFFO0VBQ3pCLE9BQVEsT0FBT0EsT0FBTyxLQUFLLFFBQVEsSUFBTUEsT0FBTyxLQUFLLElBQUs7QUFDNUQ7QUFHQSxTQUFTRSxPQUFPQSxDQUFDQyxRQUFRLEVBQUU7RUFDekIsSUFBSUMsS0FBSyxDQUFDQyxPQUFPLENBQUNGLFFBQVEsQ0FBQyxFQUFFLE9BQU9BLFFBQVEsQ0FBQyxLQUN4QyxJQUFJSixTQUFTLENBQUNJLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRTtFQUV2QyxPQUFPLENBQUVBLFFBQVEsQ0FBRTtBQUNyQjtBQUdBLFNBQVNHLE1BQU1BLENBQUNDLE1BQU0sRUFBRUMsTUFBTSxFQUFFO0VBQzlCLElBQUlDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxHQUFHLEVBQUVDLFVBQVU7RUFFbEMsSUFBSUosTUFBTSxFQUFFO0lBQ1ZJLFVBQVUsR0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNOLE1BQU0sQ0FBQztJQUVoQyxLQUFLQyxLQUFLLEdBQUcsQ0FBQyxFQUFFQyxNQUFNLEdBQUdFLFVBQVUsQ0FBQ0YsTUFBTSxFQUFFRCxLQUFLLEdBQUdDLE1BQU0sRUFBRUQsS0FBSyxJQUFJLENBQUMsRUFBRTtNQUN0RUUsR0FBRyxHQUFHQyxVQUFVLENBQUNILEtBQUssQ0FBQztNQUN2QkYsTUFBTSxDQUFDSSxHQUFHLENBQUMsR0FBR0gsTUFBTSxDQUFDRyxHQUFHLENBQUM7SUFDM0I7RUFDRjtFQUVBLE9BQU9KLE1BQU07QUFDZjtBQUdBLFNBQVNRLE1BQU1BLENBQUNDLE1BQU0sRUFBRUMsS0FBSyxFQUFFO0VBQzdCLElBQUlDLE1BQU0sR0FBRyxFQUFFO0lBQUVDLEtBQUs7RUFFdEIsS0FBS0EsS0FBSyxHQUFHLENBQUMsRUFBRUEsS0FBSyxHQUFHRixLQUFLLEVBQUVFLEtBQUssSUFBSSxDQUFDLEVBQUU7SUFDekNELE1BQU0sSUFBSUYsTUFBTTtFQUNsQjtFQUVBLE9BQU9FLE1BQU07QUFDZjtBQUdBLFNBQVNFLGNBQWNBLENBQUNDLE1BQU0sRUFBRTtFQUM5QixPQUFRQSxNQUFNLEtBQUssQ0FBQyxJQUFNQyxNQUFNLENBQUNDLGlCQUFpQixLQUFLLENBQUMsR0FBR0YsTUFBTztBQUNwRTtBQUdBRyx3QkFBd0IsR0FBUXpCLFNBQVM7QUFDekN5Qix1QkFBdUIsR0FBU3ZCLFFBQVE7QUFDeEN1QixzQkFBc0IsR0FBVXRCLE9BQU87QUFDdkNzQixxQkFBcUIsR0FBV1QsTUFBTTtBQUN0Q1MsNkJBQTZCLEdBQUdKLGNBQWM7QUFDOUNJLHFCQUFxQixHQUFXbEIsTUFBTSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2dfcGRpLy4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL2NvbW1vbi5qcz9iNjk3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuXG5mdW5jdGlvbiBpc05vdGhpbmcoc3ViamVjdCkge1xuICByZXR1cm4gKHR5cGVvZiBzdWJqZWN0ID09PSAndW5kZWZpbmVkJykgfHwgKHN1YmplY3QgPT09IG51bGwpO1xufVxuXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHN1YmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygc3ViamVjdCA9PT0gJ29iamVjdCcpICYmIChzdWJqZWN0ICE9PSBudWxsKTtcbn1cblxuXG5mdW5jdGlvbiB0b0FycmF5KHNlcXVlbmNlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNlcXVlbmNlKSkgcmV0dXJuIHNlcXVlbmNlO1xuICBlbHNlIGlmIChpc05vdGhpbmcoc2VxdWVuY2UpKSByZXR1cm4gW107XG5cbiAgcmV0dXJuIFsgc2VxdWVuY2UgXTtcbn1cblxuXG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGluZGV4LCBsZW5ndGgsIGtleSwgc291cmNlS2V5cztcblxuICBpZiAoc291cmNlKSB7XG4gICAgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG5cbiAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gc291cmNlS2V5cy5sZW5ndGg7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSAxKSB7XG4gICAgICBrZXkgPSBzb3VyY2VLZXlzW2luZGV4XTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuXG5mdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBjb3VudCkge1xuICB2YXIgcmVzdWx0ID0gJycsIGN5Y2xlO1xuXG4gIGZvciAoY3ljbGUgPSAwOyBjeWNsZSA8IGNvdW50OyBjeWNsZSArPSAxKSB7XG4gICAgcmVzdWx0ICs9IHN0cmluZztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cblxuZnVuY3Rpb24gaXNOZWdhdGl2ZVplcm8obnVtYmVyKSB7XG4gIHJldHVybiAobnVtYmVyID09PSAwKSAmJiAoTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZID09PSAxIC8gbnVtYmVyKTtcbn1cblxuXG5tb2R1bGUuZXhwb3J0cy5pc05vdGhpbmcgICAgICA9IGlzTm90aGluZztcbm1vZHVsZS5leHBvcnRzLmlzT2JqZWN0ICAgICAgID0gaXNPYmplY3Q7XG5tb2R1bGUuZXhwb3J0cy50b0FycmF5ICAgICAgICA9IHRvQXJyYXk7XG5tb2R1bGUuZXhwb3J0cy5yZXBlYXQgICAgICAgICA9IHJlcGVhdDtcbm1vZHVsZS5leHBvcnRzLmlzTmVnYXRpdmVaZXJvID0gaXNOZWdhdGl2ZVplcm87XG5tb2R1bGUuZXhwb3J0cy5leHRlbmQgICAgICAgICA9IGV4dGVuZDtcbiJdLCJuYW1lcyI6WyJpc05vdGhpbmciLCJzdWJqZWN0IiwiaXNPYmplY3QiLCJ0b0FycmF5Iiwic2VxdWVuY2UiLCJBcnJheSIsImlzQXJyYXkiLCJleHRlbmQiLCJ0YXJnZXQiLCJzb3VyY2UiLCJpbmRleCIsImxlbmd0aCIsImtleSIsInNvdXJjZUtleXMiLCJPYmplY3QiLCJrZXlzIiwicmVwZWF0Iiwic3RyaW5nIiwiY291bnQiLCJyZXN1bHQiLCJjeWNsZSIsImlzTmVnYXRpdmVaZXJvIiwibnVtYmVyIiwiTnVtYmVyIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/dumper.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/dumper.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/*eslint-disable no-use-before-define*/\nvar common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nvar YAMLException = __webpack_require__(/*! ./exception */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\nvar DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./schema/default_full */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\nvar DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./schema/default_safe */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nvar _toString = Object.prototype.toString;\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CHAR_TAB = 0x09; /* Tab */\nvar CHAR_LINE_FEED = 0x0A; /* LF */\nvar CHAR_CARRIAGE_RETURN = 0x0D; /* CR */\nvar CHAR_SPACE = 0x20; /* Space */\nvar CHAR_EXCLAMATION = 0x21; /* ! */\nvar CHAR_DOUBLE_QUOTE = 0x22; /* \" */\nvar CHAR_SHARP = 0x23; /* # */\nvar CHAR_PERCENT = 0x25; /* % */\nvar CHAR_AMPERSAND = 0x26; /* & */\nvar CHAR_SINGLE_QUOTE = 0x27; /* ' */\nvar CHAR_ASTERISK = 0x2A; /* * */\nvar CHAR_COMMA = 0x2C; /* , */\nvar CHAR_MINUS = 0x2D; /* - */\nvar CHAR_COLON = 0x3A; /* : */\nvar CHAR_EQUALS = 0x3D; /* = */\nvar CHAR_GREATER_THAN = 0x3E; /* > */\nvar CHAR_QUESTION = 0x3F; /* ? */\nvar CHAR_COMMERCIAL_AT = 0x40; /* @ */\nvar CHAR_LEFT_SQUARE_BRACKET = 0x5B; /* [ */\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D; /* ] */\nvar CHAR_GRAVE_ACCENT = 0x60; /* ` */\nvar CHAR_LEFT_CURLY_BRACKET = 0x7B; /* { */\nvar CHAR_VERTICAL_LINE = 0x7C; /* | */\nvar CHAR_RIGHT_CURLY_BRACKET = 0x7D; /* } */\n\nvar ESCAPE_SEQUENCES = {};\nESCAPE_SEQUENCES[0x00] = '\\\\0';\nESCAPE_SEQUENCES[0x07] = '\\\\a';\nESCAPE_SEQUENCES[0x08] = '\\\\b';\nESCAPE_SEQUENCES[0x09] = '\\\\t';\nESCAPE_SEQUENCES[0x0A] = '\\\\n';\nESCAPE_SEQUENCES[0x0B] = '\\\\v';\nESCAPE_SEQUENCES[0x0C] = '\\\\f';\nESCAPE_SEQUENCES[0x0D] = '\\\\r';\nESCAPE_SEQUENCES[0x1B] = '\\\\e';\nESCAPE_SEQUENCES[0x22] = '\\\\\"';\nESCAPE_SEQUENCES[0x5C] = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85] = '\\\\N';\nESCAPE_SEQUENCES[0xA0] = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\nvar DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];\nfunction compileStyleMap(schema, map) {\n  var result, keys, index, length, tag, style, type;\n  if (map === null) return {};\n  result = {};\n  keys = Object.keys(map);\n  for (index = 0, length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n    if (tag.slice(0, 2) === '!!') {\n      tag = 'tag:yaml.org,2002:' + tag.slice(2);\n    }\n    type = schema.compiledTypeMap['fallback'][tag];\n    if (type && _hasOwnProperty.call(type.styleAliases, style)) {\n      style = type.styleAliases[style];\n    }\n    result[tag] = style;\n  }\n  return result;\n}\nfunction encodeHex(character) {\n  var string, handle, length;\n  string = character.toString(16).toUpperCase();\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new YAMLException('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n  return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\nfunction State(options) {\n  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;\n  this.indent = Math.max(1, options['indent'] || 2);\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid = options['skipInvalid'] || false;\n  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];\n  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);\n  this.sortKeys = options['sortKeys'] || false;\n  this.lineWidth = options['lineWidth'] || 80;\n  this.noRefs = options['noRefs'] || false;\n  this.noCompatMode = options['noCompatMode'] || false;\n  this.condenseFlow = options['condenseFlow'] || false;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n  this.tag = null;\n  this.result = '';\n  this.duplicates = [];\n  this.usedDuplicates = null;\n}\n\n// Indents every line in a string. Empty lines (\\n only) are not indented.\nfunction indentString(string, spaces) {\n  var ind = common.repeat(' ', spaces),\n    position = 0,\n    next = -1,\n    result = '',\n    line,\n    length = string.length;\n  while (position < length) {\n    next = string.indexOf('\\n', position);\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position, next + 1);\n      position = next + 1;\n    }\n    if (line.length && line !== '\\n') result += ind;\n    result += line;\n  }\n  return result;\n}\nfunction generateNextLine(state, level) {\n  return '\\n' + common.repeat(' ', state.indent * level);\n}\nfunction testImplicitResolving(state, str) {\n  var index, length, type;\n  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n// [33] s-white ::= s-space | s-tab\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n}\n\n// Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn’t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\nfunction isPrintable(c) {\n  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== 0xFEFF /* BOM */ || 0x10000 <= c && c <= 0x10FFFF;\n}\n\n// [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// [24] b-line-feed       ::=     #xA    /* LF */\n// [25] b-carriage-return ::=     #xD    /* CR */\n// [3]  c-byte-order-mark ::=     #xFEFF\nfunction isNsChar(c) {\n  return isPrintable(c) && !isWhitespace(c)\n  // byte-order-mark\n  && c !== 0xFEFF\n  // b-char\n  && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;\n}\n\n// Simplified test for values allowed after the first character in plain style.\nfunction isPlainSafe(c, prev) {\n  // Uses a subset of nb-char - c-flow-indicator - \":\" - \"#\"\n  // where nb-char ::= c-printable - b-char - c-byte-order-mark.\n  return isPrintable(c) && c !== 0xFEFF\n  // - c-flow-indicator\n  && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET\n  // - \":\" - \"#\"\n  // /* An ns-char preceding */ \"#\"\n  && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));\n}\n\n// Simplified test for values allowed as the first character in plain style.\nfunction isPlainSafeFirst(c) {\n  // Uses a subset of ns-char - c-indicator\n  // where ns-char = nb-char - s-white.\n  return isPrintable(c) && c !== 0xFEFF && !isWhitespace(c) // - s-white\n  // - (c-indicator ::=\n  // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”\n  && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET\n  // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “\"”\n  && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE\n  // | “%” | “@” | “`”)\n  && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;\n}\n\n// Determines whether block indentation indicator is required.\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\nvar STYLE_PLAIN = 1,\n  STYLE_SINGLE = 2,\n  STYLE_LITERAL = 3,\n  STYLE_FOLDED = 4,\n  STYLE_DOUBLE = 5;\n\n// Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {\n  var i;\n  var char, prev_char;\n  var hasLineBreak = false;\n  var hasFoldableLine = false; // only checked if shouldTrackWidth\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1; // count the first line correctly\n  var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));\n  if (singleLineOnly) {\n    // Case: no block styles.\n    // Check for disallowed characters to rule out plain and single.\n    for (i = 0; i < string.length; i++) {\n      char = string.charCodeAt(i);\n      if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;\n      plain = plain && isPlainSafe(char, prev_char);\n    }\n  } else {\n    // Case: block styles permitted.\n    for (i = 0; i < string.length; i++) {\n      char = string.charCodeAt(i);\n      if (char === CHAR_LINE_FEED) {\n        hasLineBreak = true;\n        // Check if any line can be folded.\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine ||\n          // Foldable line = too long, and not more-indented.\n          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;\n      plain = plain && isPlainSafe(char, prev_char);\n    }\n    // in case the end is missing a \\n\n    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n  }\n  // Although every style can represent \\n without escaping, prefer block styles\n  // for multiline, since they're more readable and they don't add empty lines.\n  // Also prefer folding a super-long line.\n  if (!hasLineBreak && !hasFoldableLine) {\n    // Strings interpretable as another type have to be quoted;\n    // e.g. the string 'true' vs. the boolean true.\n    return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;\n  }\n  // Edge case: block indentation indicator can only have one digit.\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  }\n  // At this point we know block styles are valid.\n  // Prefer literal style unless we want to fold.\n  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n}\n\n// Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    • No ending newline => unaffected; already using strip \"-\" chomping.\n//    • Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\nfunction writeScalar(state, string, level, iskey) {\n  state.dump = function () {\n    if (string.length === 0) {\n      return \"''\";\n    }\n    if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {\n      return \"'\" + string + \"'\";\n    }\n    var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n    // As indentation gets deeper, let the width decrease monotonically\n    // to the lower bound min(state.lineWidth, 40).\n    // Note that this implies\n    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n    // This behaves better than a constant minimum width which disallows narrower options,\n    // or an indent threshold which causes the width to suddenly increase.\n    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent);\n\n    // Without knowing if keys are implicit/explicit, assume implicit for safety.\n    var singleLineOnly = iskey\n    // No block styles in flow mode.\n    || state.flowLevel > -1 && level >= state.flowLevel;\n    function testAmbiguity(string) {\n      return testImplicitResolving(state, string);\n    }\n    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {\n      case STYLE_PLAIN:\n        return string;\n      case STYLE_SINGLE:\n        return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n      case STYLE_DOUBLE:\n        return '\"' + escapeString(string, lineWidth) + '\"';\n      default:\n        throw new YAMLException('impossible error: invalid scalar style');\n    }\n  }();\n}\n\n// Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\nfunction blockHeader(string, indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : '';\n\n  // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n  var clip = string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : clip ? '' : '-';\n  return indentIndicator + chomp + '\\n';\n}\n\n// (See the note for writeScalar.)\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n}\n\n// Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\nfunction foldString(string, width) {\n  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n  // unless they're before or after a more-indented line, or at the very\n  // beginning or end, in which case $k$ maps to $k$.\n  // Therefore, parse each chunk as newline(s) followed by a content line.\n  var lineRe = /(\\n+)([^\\n]*)/g;\n\n  // first line (possibly an empty line)\n  var result = function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0, nextLF), width);\n  }();\n  // If we haven't reached the first content line yet, don't add an extra \\n.\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented;\n\n  // rest of the lines\n  var match;\n  while (match = lineRe.exec(string)) {\n    var prefix = match[1],\n      line = match[2];\n    moreIndented = line[0] === ' ';\n    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\\n' : '') + foldLine(line, width);\n    prevMoreIndented = moreIndented;\n  }\n  return result;\n}\n\n// Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\nfunction foldLine(line, width) {\n  if (line === '' || line[0] === ' ') return line;\n\n  // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n  var match;\n  // start is an inclusive index. end, curr, and next are exclusive.\n  var start = 0,\n    end,\n    curr = 0,\n    next = 0;\n  var result = '';\n\n  // Invariants: 0 <= start <= length-1.\n  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n  // Inside the loop:\n  //   A match implies length >= 2, so curr and next are <= length-2.\n  while (match = breakRe.exec(line)) {\n    next = match.index;\n    // maintain invariant: curr - start <= width\n    if (next - start > width) {\n      end = curr > start ? curr : next; // derive end <= length-2\n      result += '\\n' + line.slice(start, end);\n      // skip the space that was output as \\n\n      start = end + 1; // derive start <= length-1\n    }\n\n    curr = next;\n  }\n\n  // By the invariants, start <= length-1, so there is something left over.\n  // It is either the whole string or a part starting from non-whitespace.\n  result += '\\n';\n  // Insert a break if the remainder is too long and there is a break available.\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n  return result.slice(1); // drop extra \\n joiner\n}\n\n// Escapes a double-quoted string.\nfunction escapeString(string) {\n  var result = '';\n  var char, nextChar;\n  var escapeSeq;\n  for (var i = 0; i < string.length; i++) {\n    char = string.charCodeAt(i);\n    // Check for surrogate pairs (reference Unicode 3.0 section \"3.7 Surrogates\").\n    if (char >= 0xD800 && char <= 0xDBFF /* high surrogate */) {\n      nextChar = string.charCodeAt(i + 1);\n      if (nextChar >= 0xDC00 && nextChar <= 0xDFFF /* low surrogate */) {\n        // Combine the surrogate pair and store it escaped.\n        result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000);\n        // Advance index one extra since we already used that char here.\n        i++;\n        continue;\n      }\n    }\n    escapeSeq = ESCAPE_SEQUENCES[char];\n    result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);\n  }\n  return result;\n}\nfunction writeFlowSequence(state, level, object) {\n  var _result = '',\n    _tag = state.tag,\n    index,\n    length;\n  for (index = 0, length = object.length; index < length; index += 1) {\n    // Write only valid elements.\n    if (writeNode(state, level, object[index], false, false)) {\n      if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\nfunction writeBlockSequence(state, level, object, compact) {\n  var _result = '',\n    _tag = state.tag,\n    index,\n    length;\n  for (index = 0, length = object.length; index < length; index += 1) {\n    // Write only valid elements.\n    if (writeNode(state, level + 1, object[index], true, true)) {\n      if (!compact || index !== 0) {\n        _result += generateNextLine(state, level);\n      }\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n      _result += state.dump;\n    }\n  }\n  state.tag = _tag;\n  state.dump = _result || '[]'; // Empty sequence if no valid values.\n}\n\nfunction writeFlowMapping(state, level, object) {\n  var _result = '',\n    _tag = state.tag,\n    objectKeyList = Object.keys(object),\n    index,\n    length,\n    objectKey,\n    objectValue,\n    pairBuffer;\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n    if (index !== 0) pairBuffer += ', ';\n    if (state.condenseFlow) pairBuffer += '\"';\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n    if (!writeNode(state, level, objectKey, false, false)) {\n      continue; // Skip this pair because of invalid key;\n    }\n\n    if (state.dump.length > 1024) pairBuffer += '? ';\n    pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n    if (!writeNode(state, level, objectValue, false, false)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\nfunction writeBlockMapping(state, level, object, compact) {\n  var _result = '',\n    _tag = state.tag,\n    objectKeyList = Object.keys(object),\n    index,\n    length,\n    objectKey,\n    objectValue,\n    explicitPair,\n    pairBuffer;\n\n  // Allow sorting keys so that the output file is deterministic\n  if (state.sortKeys === true) {\n    // Default sorting\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    // Custom sort function\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    // Something is wrong\n    throw new YAMLException('sortKeys must be a boolean or a function');\n  }\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n    if (!compact || index !== 0) {\n      pairBuffer += generateNextLine(state, level);\n    }\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n    if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n      continue; // Skip this pair because of invalid key.\n    }\n\n    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n    pairBuffer += state.dump;\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state, level);\n    }\n    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n    pairBuffer += state.dump;\n\n    // Both key and value are valid.\n    _result += pairBuffer;\n  }\n  state.tag = _tag;\n  state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n}\n\nfunction detectType(state, object, explicit) {\n  var _result, typeList, index, length, type, style;\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n  for (index = 0, length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n    if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {\n      state.tag = explicit ? type.tag : '?';\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n        if (_toString.call(type.represent) === '[object Function]') {\n          _result = type.represent(object, style);\n        } else if (_hasOwnProperty.call(type.represent, style)) {\n          _result = type.represent[style](object, style);\n        } else {\n          throw new YAMLException('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n        }\n        state.dump = _result;\n      }\n      return true;\n    }\n  }\n  return false;\n}\n\n// Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\nfunction writeNode(state, level, object, block, compact, iskey) {\n  state.tag = null;\n  state.dump = object;\n  if (!detectType(state, object, false)) {\n    detectType(state, object, true);\n  }\n  var type = _toString.call(state.dump);\n  if (block) {\n    block = state.flowLevel < 0 || state.flowLevel > level;\n  }\n  var objectOrArray = type === '[object Object]' || type === '[object Array]',\n    duplicateIndex,\n    duplicate;\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {\n    compact = false;\n  }\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n    if (type === '[object Object]') {\n      if (block && Object.keys(state.dump).length !== 0) {\n        writeBlockMapping(state, level, state.dump, compact);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state, level, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;\n      if (block && state.dump.length !== 0) {\n        writeBlockSequence(state, arrayLevel, state.dump, compact);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state, arrayLevel, state.dump);\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state, state.dump, level, iskey);\n      }\n    } else {\n      if (state.skipInvalid) return false;\n      throw new YAMLException('unacceptable kind of an object to dump ' + type);\n    }\n    if (state.tag !== null && state.tag !== '?') {\n      state.dump = '!<' + state.tag + '> ' + state.dump;\n    }\n  }\n  return true;\n}\nfunction getDuplicateReferences(object, state) {\n  var objects = [],\n    duplicatesIndexes = [],\n    index,\n    length;\n  inspectNode(object, objects, duplicatesIndexes);\n  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n  state.usedDuplicates = new Array(length);\n}\nfunction inspectNode(object, objects, duplicatesIndexes) {\n  var objectKeyList, index, length;\n  if (object !== null && typeof object === 'object') {\n    index = objects.indexOf(object);\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n      if (Array.isArray(object)) {\n        for (index = 0, length = object.length; index < length; index += 1) {\n          inspectNode(object[index], objects, duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n        for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\nfunction dump(input, options) {\n  options = options || {};\n  var state = new State(options);\n  if (!state.noRefs) getDuplicateReferences(input, state);\n  if (writeNode(state, 0, input, true, true)) return state.dump + '\\n';\n  return '';\n}\nfunction safeDump(input, options) {\n  return dump(input, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\nmodule.exports.dump = dump;\nmodule.exports.safeDump = safeDump;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/dumper.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js":
/*!********************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js ***!
  \********************************************************************************/
/***/ ((module) => {

eval("// YAML error class. http://stackoverflow.com/questions/8458984\n//\n\n\nfunction YAMLException(reason, mark) {\n  // Super constructor\n  Error.call(this);\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : '');\n\n  // Include stack trace in error object\n  if (Error.captureStackTrace) {\n    // Chrome and NodeJS\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    // FF, IE 10+ and Safari 6+. Fallback for others\n    this.stack = new Error().stack || '';\n  }\n}\n\n// Inherit from Error\nYAMLException.prototype = Object.create(Error.prototype);\nYAMLException.prototype.constructor = YAMLException;\nYAMLException.prototype.toString = function toString(compact) {\n  var result = this.name + ': ';\n  result += this.reason || '(unknown reason)';\n  if (!compact && this.mark) {\n    result += ' ' + this.mark.toString();\n  }\n  return result;\n};\nmodule.exports = YAMLException;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvZXhjZXB0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDYTs7QUFFYixTQUFTQSxhQUFhQSxDQUFDQyxNQUFNLEVBQUVDLElBQUksRUFBRTtFQUNuQztFQUNBQyxLQUFLLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUM7RUFFaEIsSUFBSSxDQUFDQyxJQUFJLEdBQUcsZUFBZTtFQUMzQixJQUFJLENBQUNKLE1BQU0sR0FBR0EsTUFBTTtFQUNwQixJQUFJLENBQUNDLElBQUksR0FBR0EsSUFBSTtFQUNoQixJQUFJLENBQUNJLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQ0wsTUFBTSxJQUFJLGtCQUFrQixLQUFLLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUNBLElBQUksQ0FBQ0ssUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7O0VBRWxHO0VBQ0EsSUFBSUosS0FBSyxDQUFDSyxpQkFBaUIsRUFBRTtJQUMzQjtJQUNBTCxLQUFLLENBQUNLLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUNDLFdBQVcsQ0FBQztFQUNqRCxDQUFDLE1BQU07SUFDTDtJQUNBLElBQUksQ0FBQ0MsS0FBSyxHQUFJLElBQUlQLEtBQUssQ0FBQyxDQUFDLENBQUVPLEtBQUssSUFBSSxFQUFFO0VBQ3hDO0FBQ0Y7O0FBR0E7QUFDQVYsYUFBYSxDQUFDVyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDVixLQUFLLENBQUNRLFNBQVMsQ0FBQztBQUN4RFgsYUFBYSxDQUFDVyxTQUFTLENBQUNGLFdBQVcsR0FBR1QsYUFBYTtBQUduREEsYUFBYSxDQUFDVyxTQUFTLENBQUNKLFFBQVEsR0FBRyxTQUFTQSxRQUFRQSxDQUFDTyxPQUFPLEVBQUU7RUFDNUQsSUFBSUMsTUFBTSxHQUFHLElBQUksQ0FBQ1YsSUFBSSxHQUFHLElBQUk7RUFFN0JVLE1BQU0sSUFBSSxJQUFJLENBQUNkLE1BQU0sSUFBSSxrQkFBa0I7RUFFM0MsSUFBSSxDQUFDYSxPQUFPLElBQUksSUFBSSxDQUFDWixJQUFJLEVBQUU7SUFDekJhLE1BQU0sSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDYixJQUFJLENBQUNLLFFBQVEsQ0FBQyxDQUFDO0VBQ3RDO0VBRUEsT0FBT1EsTUFBTTtBQUNmLENBQUM7QUFHREMsTUFBTSxDQUFDQyxPQUFPLEdBQUdqQixhQUFhIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvZXhjZXB0aW9uLmpzP2ExNjIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gWUFNTCBlcnJvciBjbGFzcy4gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NDU4OTg0XG4vL1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBZQU1MRXhjZXB0aW9uKHJlYXNvbiwgbWFyaykge1xuICAvLyBTdXBlciBjb25zdHJ1Y3RvclxuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMubmFtZSA9ICdZQU1MRXhjZXB0aW9uJztcbiAgdGhpcy5yZWFzb24gPSByZWFzb247XG4gIHRoaXMubWFyayA9IG1hcms7XG4gIHRoaXMubWVzc2FnZSA9ICh0aGlzLnJlYXNvbiB8fCAnKHVua25vd24gcmVhc29uKScpICsgKHRoaXMubWFyayA/ICcgJyArIHRoaXMubWFyay50b1N0cmluZygpIDogJycpO1xuXG4gIC8vIEluY2x1ZGUgc3RhY2sgdHJhY2UgaW4gZXJyb3Igb2JqZWN0XG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIC8vIENocm9tZSBhbmQgTm9kZUpTXG4gICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gIH0gZWxzZSB7XG4gICAgLy8gRkYsIElFIDEwKyBhbmQgU2FmYXJpIDYrLiBGYWxsYmFjayBmb3Igb3RoZXJzXG4gICAgdGhpcy5zdGFjayA9IChuZXcgRXJyb3IoKSkuc3RhY2sgfHwgJyc7XG4gIH1cbn1cblxuXG4vLyBJbmhlcml0IGZyb20gRXJyb3JcbllBTUxFeGNlcHRpb24ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuWUFNTEV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBZQU1MRXhjZXB0aW9uO1xuXG5cbllBTUxFeGNlcHRpb24ucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoY29tcGFjdCkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5uYW1lICsgJzogJztcblxuICByZXN1bHQgKz0gdGhpcy5yZWFzb24gfHwgJyh1bmtub3duIHJlYXNvbiknO1xuXG4gIGlmICghY29tcGFjdCAmJiB0aGlzLm1hcmspIHtcbiAgICByZXN1bHQgKz0gJyAnICsgdGhpcy5tYXJrLnRvU3RyaW5nKCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IFlBTUxFeGNlcHRpb247XG4iXSwibmFtZXMiOlsiWUFNTEV4Y2VwdGlvbiIsInJlYXNvbiIsIm1hcmsiLCJFcnJvciIsImNhbGwiLCJuYW1lIiwibWVzc2FnZSIsInRvU3RyaW5nIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJjb25zdHJ1Y3RvciIsInN0YWNrIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29tcGFjdCIsInJlc3VsdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/loader.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/loader.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/*eslint-disable max-len,no-use-before-define*/\nvar common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nvar YAMLException = __webpack_require__(/*! ./exception */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\nvar Mark = __webpack_require__(/*! ./mark */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/mark.js\");\nvar DEFAULT_SAFE_SCHEMA = __webpack_require__(/*! ./schema/default_safe */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\");\nvar DEFAULT_FULL_SCHEMA = __webpack_require__(/*! ./schema/default_full */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\");\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\nfunction is_EOL(c) {\n  return c === 0x0A /* LF */ || c === 0x0D /* CR */;\n}\n\nfunction is_WHITE_SPACE(c) {\n  return c === 0x09 /* Tab */ || c === 0x20 /* Space */;\n}\n\nfunction is_WS_OR_EOL(c) {\n  return c === 0x09 /* Tab */ || c === 0x20 /* Space */ || c === 0x0A /* LF */ || c === 0x0D /* CR */;\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C /* , */ || c === 0x5B /* [ */ || c === 0x5D /* ] */ || c === 0x7B /* { */ || c === 0x7D /* } */;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n  if (0x30 /* 0 */ <= c && c <= 0x39 /* 9 */) {\n    return c - 0x30;\n  }\n\n  /*eslint-disable no-bitwise*/\n  lc = c | 0x20;\n  if (0x61 /* a */ <= lc && lc <= 0x66 /* f */) {\n    return lc - 0x61 + 10;\n  }\n  return -1;\n}\nfunction escapedHexLen(c) {\n  if (c === 0x78 /* x */) {\n    return 2;\n  }\n  if (c === 0x75 /* u */) {\n    return 4;\n  }\n  if (c === 0x55 /* U */) {\n    return 8;\n  }\n  return 0;\n}\nfunction fromDecimalCode(c) {\n  if (0x30 /* 0 */ <= c && c <= 0x39 /* 9 */) {\n    return c - 0x30;\n  }\n  return -1;\n}\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return c === 0x30 /* 0 */ ? '\\x00' : c === 0x61 /* a */ ? '\\x07' : c === 0x62 /* b */ ? '\\x08' : c === 0x74 /* t */ ? '\\x09' : c === 0x09 /* Tab */ ? '\\x09' : c === 0x6E /* n */ ? '\\x0A' : c === 0x76 /* v */ ? '\\x0B' : c === 0x66 /* f */ ? '\\x0C' : c === 0x72 /* r */ ? '\\x0D' : c === 0x65 /* e */ ? '\\x1B' : c === 0x20 /* Space */ ? ' ' : c === 0x22 /* \" */ ? '\\x22' : c === 0x2F /* / */ ? '/' : c === 0x5C /* \\ */ ? '\\x5C' : c === 0x4E /* N */ ? '\\x85' : c === 0x5F /* _ */ ? '\\xA0' : c === 0x4C /* L */ ? '\\u2028' : c === 0x50 /* P */ ? '\\u2029' : '';\n}\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  }\n  // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\nvar simpleEscapeMap = new Array(256);\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\nfunction State(input, options) {\n  this.input = input;\n  this.filename = options['filename'] || null;\n  this.schema = options['schema'] || DEFAULT_FULL_SCHEMA;\n  this.onWarning = options['onWarning'] || null;\n  this.legacy = options['legacy'] || false;\n  this.json = options['json'] || false;\n  this.listener = options['listener'] || null;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap = this.schema.compiledTypeMap;\n  this.length = input.length;\n  this.position = 0;\n  this.line = 0;\n  this.lineStart = 0;\n  this.lineIndent = 0;\n  this.documents = [];\n\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n}\n\nfunction generateError(state, message) {\n  return new YAMLException(message, new Mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));\n}\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\nvar directiveHandlers = {\n  YAML: function handleYamlDirective(state, name, args) {\n    var match, major, minor;\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n    state.version = args[0];\n    state.checkLineBreaks = minor < 2;\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n  TAG: function handleTagDirective(state, name, args) {\n    var handle, prefix;\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n    handle = args[0];\n    prefix = args[1];\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n    if (_hasOwnProperty.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n    state.tagMap[handle] = prefix;\n  }\n};\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n  if (start < end) {\n    _result = state.input.slice(start, end);\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n    state.result += _result;\n  }\n}\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n  sourceKeys = Object.keys(source);\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n    if (!_hasOwnProperty.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {\n  var index, quantity;\n\n  // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  }\n\n  // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n  keyNode = String(keyNode);\n  if (_result === null) {\n    _result = {};\n  }\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json && !_hasOwnProperty.call(overridableKeys, keyNode) && _hasOwnProperty.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    }\n    _result[keyNode] = valueNode;\n    delete overridableKeys[keyNode];\n  }\n  return _result;\n}\nfunction readLineBreak(state) {\n  var ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch === 0x0A /* LF */) {\n    state.position++;\n  } else if (ch === 0x0D /* CR */) {\n    state.position++;\n    if (state.input.charCodeAt(state.position) === 0x0A /* LF */) {\n      state.position++;\n    }\n  } else {\n    throwError(state, 'a line break is expected');\n  }\n  state.line += 1;\n  state.lineStart = state.position;\n}\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n    ch = state.input.charCodeAt(state.position);\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n    if (allowComments && ch === 0x23 /* # */) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (ch !== 0x0A /* LF */ && ch !== 0x0D /* CR */ && ch !== 0);\n    }\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n      while (ch === 0x20 /* Space */) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n  return lineBreaks;\n}\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n    ch;\n  ch = state.input.charCodeAt(_position);\n\n  // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n  if ((ch === 0x2D /* - */ || ch === 0x2E /* . */) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {\n    _position += 3;\n    ch = state.input.charCodeAt(_position);\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n    following,\n    captureStart,\n    captureEnd,\n    hasPendingContent,\n    _line,\n    _lineStart,\n    _lineIndent,\n    _kind = state.kind,\n    _result = state.result,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23 /* # */ || ch === 0x26 /* & */ || ch === 0x2A /* * */ || ch === 0x21 /* ! */ || ch === 0x7C /* | */ || ch === 0x3E /* > */ || ch === 0x27 /* ' */ || ch === 0x22 /* \" */ || ch === 0x25 /* % */ || ch === 0x40 /* @ */ || ch === 0x60 /* ` */) {\n    return false;\n  }\n  if (ch === 0x3F /* ? */ || ch === 0x2D /* - */) {\n    following = state.input.charCodeAt(state.position + 1);\n    if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n      return false;\n    }\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n  while (ch !== 0) {\n    if (ch === 0x3A /* : */) {\n      following = state.input.charCodeAt(state.position + 1);\n      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        break;\n      }\n    } else if (ch === 0x23 /* # */) {\n      preceding = state.input.charCodeAt(state.position - 1);\n      if (is_WS_OR_EOL(preceding)) {\n        break;\n      }\n    } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n    ch = state.input.charCodeAt(++state.position);\n  }\n  captureSegment(state, captureStart, captureEnd, false);\n  if (state.result) {\n    return true;\n  }\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch, captureStart, captureEnd;\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x27 /* ' */) {\n    return false;\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27 /* ' */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n      if (ch === 0x27 /* ' */) {\n        captureStart = state.position;\n        state.position++;\n        captureEnd = state.position;\n      } else {\n        return true;\n      }\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x22 /* \" */) {\n    return false;\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22 /* \" */) {\n      captureSegment(state, captureStart, state.position, true);\n      state.position++;\n      return true;\n    } else if (ch === 0x5C /* \\ */) {\n      captureSegment(state, captureStart, state.position, true);\n      ch = state.input.charCodeAt(++state.position);\n      if (is_EOL(ch)) {\n        skipSeparationSpace(state, false, nodeIndent);\n\n        // TODO: rework to inline fn with no type cast?\n      } else if (ch < 256 && simpleEscapeCheck[ch]) {\n        state.result += simpleEscapeMap[ch];\n        state.position++;\n      } else if ((tmp = escapedHexLen(ch)) > 0) {\n        hexLength = tmp;\n        hexResult = 0;\n        for (; hexLength > 0; hexLength--) {\n          ch = state.input.charCodeAt(++state.position);\n          if ((tmp = fromHexCode(ch)) >= 0) {\n            hexResult = (hexResult << 4) + tmp;\n          } else {\n            throwError(state, 'expected hexadecimal character');\n          }\n        }\n        state.result += charFromCodepoint(hexResult);\n        state.position++;\n      } else {\n        throwError(state, 'unknown escape sequence');\n      }\n      captureStart = captureEnd = state.position;\n    } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n    _line,\n    _tag = state.tag,\n    _result,\n    _anchor = state.anchor,\n    following,\n    terminator,\n    isPair,\n    isExplicitPair,\n    isMapping,\n    overridableKeys = {},\n    keyNode,\n    keyTag,\n    valueNode,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch === 0x5B /* [ */) {\n    terminator = 0x5D; /* ] */\n    isMapping = false;\n    _result = [];\n  } else if (ch === 0x7B /* { */) {\n    terminator = 0x7D; /* } */\n    isMapping = true;\n    _result = {};\n  } else {\n    return false;\n  }\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n  ch = state.input.charCodeAt(++state.position);\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    }\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n    if (ch === 0x3F /* ? */) {\n      following = state.input.charCodeAt(state.position + 1);\n      if (is_WS_OR_EOL(following)) {\n        isPair = isExplicitPair = true;\n        state.position++;\n        skipSeparationSpace(state, true, nodeIndent);\n      }\n    }\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A /* : */) {\n      isPair = true;\n      ch = state.input.charCodeAt(++state.position);\n      skipSeparationSpace(state, true, nodeIndent);\n      composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n      valueNode = state.result;\n    }\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));\n    } else {\n      _result.push(keyNode);\n    }\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n    if (ch === 0x2C /* , */) {\n      readNext = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      readNext = false;\n    }\n  }\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n    folding,\n    chomping = CHOMPING_CLIP,\n    didReadContent = false,\n    detectedIndent = false,\n    textIndent = nodeIndent,\n    emptyLines = 0,\n    atMoreIndented = false,\n    tmp,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch === 0x7C /* | */) {\n    folding = false;\n  } else if (ch === 0x3E /* > */) {\n    folding = true;\n  } else {\n    return false;\n  }\n  state.kind = 'scalar';\n  state.result = '';\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n    if (ch === 0x2B /* + */ || ch === 0x2D /* - */) {\n      if (CHOMPING_CLIP === chomping) {\n        chomping = ch === 0x2B /* + */ ? CHOMPING_KEEP : CHOMPING_STRIP;\n      } else {\n        throwError(state, 'repeat of a chomping mode identifier');\n      }\n    } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n    } else {\n      break;\n    }\n  }\n  if (is_WHITE_SPACE(ch)) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (is_WHITE_SPACE(ch));\n    if (ch === 0x23 /* # */) {\n      do {\n        ch = state.input.charCodeAt(++state.position);\n      } while (!is_EOL(ch) && ch !== 0);\n    }\n  }\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n    ch = state.input.charCodeAt(state.position);\n    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20 /* Space */) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    }\n\n    // End of the scalar.\n    if (state.lineIndent < textIndent) {\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) {\n          // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      }\n\n      // Break this `while` cycle and go to the funciton's epilogue.\n      break;\n    }\n\n    // Folded style: use fancy rules to handle line breaks.\n    if (folding) {\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true;\n        // except for the first content line (cf. Example 8.1)\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n\n        // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1);\n\n        // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) {\n          // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        }\n\n        // Several line breaks - perceive as different lines.\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      }\n\n      // Literal style: just add exact number of line breaks between content lines.\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n    while (!is_EOL(ch) && ch !== 0) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n    captureSegment(state, captureStart, state.position, false);\n  }\n  return true;\n}\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n    _tag = state.tag,\n    _anchor = state.anchor,\n    _result = [],\n    following,\n    detected = false,\n    ch;\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n  ch = state.input.charCodeAt(state.position);\n  while (ch !== 0) {\n    if (ch !== 0x2D /* - */) {\n      break;\n    }\n    following = state.input.charCodeAt(state.position + 1);\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n    detected = true;\n    state.position++;\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n    _result.push(state.result);\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n  return false;\n}\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n    allowCompact,\n    _line,\n    _pos,\n    _tag = state.tag,\n    _anchor = state.anchor,\n    _result = {},\n    overridableKeys = {},\n    keyTag = null,\n    keyNode = null,\n    valueNode = null,\n    atExplicitKey = false,\n    detected = false,\n    ch;\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n  ch = state.input.charCodeAt(state.position);\n  while (ch !== 0) {\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n    _pos = state.position;\n\n    //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n    if ((ch === 0x3F /* ? */ || ch === 0x3A /* : */) && is_WS_OR_EOL(following)) {\n      if (ch === 0x3F /* ? */) {\n        if (atExplicitKey) {\n          storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n          keyTag = keyNode = valueNode = null;\n        }\n        detected = true;\n        atExplicitKey = true;\n        allowCompact = true;\n      } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n      state.position += 1;\n      ch = following;\n\n      //\n      // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n      //\n    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n        if (ch === 0x3A /* : */) {\n          ch = state.input.charCodeAt(++state.position);\n          if (!is_WS_OR_EOL(ch)) {\n            throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n          }\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n            keyTag = keyNode = valueNode = null;\n          }\n          detected = true;\n          atExplicitKey = false;\n          allowCompact = false;\n          keyTag = state.tag;\n          keyNode = state.result;\n        } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    } else {\n      break; // Reading is done. Go to the epilogue.\n    }\n\n    //\n    // Common reading code for both explicit and implicit notations.\n    //\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);\n        keyTag = keyNode = valueNode = null;\n      }\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n    if (state.lineIndent > nodeIndent && ch !== 0) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  //\n  // Epilogue.\n  //\n\n  // Special case: last mapping's node contains only the key in explicit notation.\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n  }\n\n  // Expose the resulting mapping.\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n  return detected;\n}\nfunction readTagProperty(state) {\n  var _position,\n    isVerbatim = false,\n    isNamed = false,\n    tagHandle,\n    tagName,\n    ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x21 /* ! */) return false;\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n  ch = state.input.charCodeAt(++state.position);\n  if (ch === 0x3C /* < */) {\n    isVerbatim = true;\n    ch = state.input.charCodeAt(++state.position);\n  } else if (ch === 0x21 /* ! */) {\n    isNamed = true;\n    tagHandle = '!!';\n    ch = state.input.charCodeAt(++state.position);\n  } else {\n    tagHandle = '!';\n  }\n  _position = state.position;\n  if (isVerbatim) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (ch !== 0 && ch !== 0x3E /* > */);\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      if (ch === 0x21 /* ! */) {\n        if (!isNamed) {\n          tagHandle = state.input.slice(_position - 1, state.position + 1);\n          if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n            throwError(state, 'named tag handle cannot contain such characters');\n          }\n          isNamed = true;\n          _position = state.position + 1;\n        } else {\n          throwError(state, 'tag suffix cannot contain exclamation marks');\n        }\n      }\n      ch = state.input.charCodeAt(++state.position);\n    }\n    tagName = state.input.slice(_position, state.position);\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n  if (isVerbatim) {\n    state.tag = tagName;\n  } else if (_hasOwnProperty.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n  return true;\n}\nfunction readAnchorProperty(state) {\n  var _position, ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x26 /* & */) return false;\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\nfunction readAlias(state) {\n  var _position, alias, ch;\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x2A /* * */) return false;\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n  alias = state.input.slice(_position, state.position);\n  if (!_hasOwnProperty.call(state.anchorMap, alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n    allowBlockScalars,\n    allowBlockCollections,\n    indentStatus = 1,\n    // 1: this>parent, 0: this=parent, -1: this<parent\n    atNewLine = false,\n    hasContent = false,\n    typeIndex,\n    typeQuantity,\n    type,\n    flowIndent,\n    blockIndent;\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n  state.tag = null;\n  state.anchor = null;\n  state.kind = null;\n  state.result = null;\n  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n    blockIndent = state.position - state.lineStart;\n    if (indentStatus === 1) {\n      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n        } else if (readAlias(state)) {\n          hasContent = true;\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n  if (state.tag !== null && state.tag !== '!') {\n    if (state.tag === '?') {\n      // Implicit resolving is not allowed for non-scalar types, and '?'\n      // non-specific tag is only automatically assigned to plain scalars.\n      //\n      // We only need to check kind conformity in case user explicitly assigns '?'\n      // tag, for example like this: \"!<?> [0]\"\n      //\n      if (state.result !== null && state.kind !== 'scalar') {\n        throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n      }\n      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n        type = state.implicitTypes[typeIndex];\n        if (type.resolve(state.result)) {\n          // `state.result` updated in resolver if matched\n          state.result = type.construct(state.result);\n          state.tag = type.tag;\n          if (state.anchor !== null) {\n            state.anchorMap[state.anchor] = state.result;\n          }\n          break;\n        }\n      }\n    } else if (_hasOwnProperty.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n      if (state.result !== null && type.kind !== state.kind) {\n        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n      }\n      if (!type.resolve(state.result)) {\n        // `state.result` updated in resolver if matched\n        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n      } else {\n        state.result = type.construct(state.result);\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n  }\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n  return state.tag !== null || state.anchor !== null || hasContent;\n}\nfunction readDocument(state) {\n  var documentStart = state.position,\n    _position,\n    directiveName,\n    directiveArgs,\n    hasDirectives = false,\n    ch;\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = {};\n  state.anchorMap = {};\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n    if (state.lineIndent > 0 || ch !== 0x25 /* % */) {\n      break;\n    }\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n      if (ch === 0x23 /* # */) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (ch !== 0 && !is_EOL(ch));\n        break;\n      }\n      if (is_EOL(ch)) break;\n      _position = state.position;\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n    if (ch !== 0) readLineBreak(state);\n    if (_hasOwnProperty.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n  skipSeparationSpace(state, true, -1);\n  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D /* - */ && state.input.charCodeAt(state.position + 1) === 0x2D /* - */ && state.input.charCodeAt(state.position + 2) === 0x2D /* - */) {\n    state.position += 3;\n    skipSeparationSpace(state, true, -1);\n  } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n  state.documents.push(state.result);\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n    if (state.input.charCodeAt(state.position) === 0x2E /* . */) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    }\n    return;\n  }\n  if (state.position < state.length - 1) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n  if (input.length !== 0) {\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A /* LF */ && input.charCodeAt(input.length - 1) !== 0x0D /* CR */) {\n      input += '\\n';\n    }\n\n    // Strip BOM\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n  var state = new State(input, options);\n  var nullpos = input.indexOf('\\0');\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state, 'null byte is not allowed in input');\n  }\n\n  // Use 0 as string terminator. That significantly simplifies bounds check.\n  state.input += '\\0';\n  while (state.input.charCodeAt(state.position) === 0x20 /* Space */) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n  while (state.position < state.length - 1) {\n    readDocument(state);\n  }\n  return state.documents;\n}\nfunction loadAll(input, iterator, options) {\n  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n  var documents = loadDocuments(input, options);\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n  for (var index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\nfunction load(input, options) {\n  var documents = loadDocuments(input, options);\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n  throw new YAMLException('expected a single document in the stream, but found more');\n}\nfunction safeLoadAll(input, iterator, options) {\n  if (typeof iterator === 'object' && iterator !== null && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n  return loadAll(input, iterator, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\nfunction safeLoad(input, options) {\n  return load(input, common.extend({\n    schema: DEFAULT_SAFE_SCHEMA\n  }, options));\n}\nmodule.exports.loadAll = loadAll;\nmodule.exports.load = load;\nmodule.exports.safeLoadAll = safeLoadAll;\nmodule.exports.safeLoad = safeLoad;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/loader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/mark.js":
/*!***************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/mark.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nfunction Mark(name, buffer, position, line, column) {\n  this.name = name;\n  this.buffer = buffer;\n  this.position = position;\n  this.line = line;\n  this.column = column;\n}\nMark.prototype.getSnippet = function getSnippet(indent, maxLength) {\n  var head, start, tail, end, snippet;\n  if (!this.buffer) return null;\n  indent = indent || 4;\n  maxLength = maxLength || 75;\n  head = '';\n  start = this.position;\n  while (start > 0 && '\\x00\\r\\n\\x85\\u2028\\u2029'.indexOf(this.buffer.charAt(start - 1)) === -1) {\n    start -= 1;\n    if (this.position - start > maxLength / 2 - 1) {\n      head = ' ... ';\n      start += 5;\n      break;\n    }\n  }\n  tail = '';\n  end = this.position;\n  while (end < this.buffer.length && '\\x00\\r\\n\\x85\\u2028\\u2029'.indexOf(this.buffer.charAt(end)) === -1) {\n    end += 1;\n    if (end - this.position > maxLength / 2 - 1) {\n      tail = ' ... ';\n      end -= 5;\n      break;\n    }\n  }\n  snippet = this.buffer.slice(start, end);\n  return common.repeat(' ', indent) + head + snippet + tail + '\\n' + common.repeat(' ', indent + this.position - start + head.length) + '^';\n};\nMark.prototype.toString = function toString(compact) {\n  var snippet,\n    where = '';\n  if (this.name) {\n    where += 'in \"' + this.name + '\" ';\n  }\n  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);\n  if (!compact) {\n    snippet = this.getSnippet();\n    if (snippet) {\n      where += ':\\n' + snippet;\n    }\n  }\n  return where;\n};\nmodule.exports = Mark;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvbWFyay5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFHYixJQUFJQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsNkZBQVUsQ0FBQztBQUdoQyxTQUFTQyxJQUFJQSxDQUFDQyxJQUFJLEVBQUVDLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxJQUFJLEVBQUVDLE1BQU0sRUFBRTtFQUNsRCxJQUFJLENBQUNKLElBQUksR0FBT0EsSUFBSTtFQUNwQixJQUFJLENBQUNDLE1BQU0sR0FBS0EsTUFBTTtFQUN0QixJQUFJLENBQUNDLFFBQVEsR0FBR0EsUUFBUTtFQUN4QixJQUFJLENBQUNDLElBQUksR0FBT0EsSUFBSTtFQUNwQixJQUFJLENBQUNDLE1BQU0sR0FBS0EsTUFBTTtBQUN4QjtBQUdBTCxJQUFJLENBQUNNLFNBQVMsQ0FBQ0MsVUFBVSxHQUFHLFNBQVNBLFVBQVVBLENBQUNDLE1BQU0sRUFBRUMsU0FBUyxFQUFFO0VBQ2pFLElBQUlDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxJQUFJLEVBQUVDLEdBQUcsRUFBRUMsT0FBTztFQUVuQyxJQUFJLENBQUMsSUFBSSxDQUFDWixNQUFNLEVBQUUsT0FBTyxJQUFJO0VBRTdCTSxNQUFNLEdBQUdBLE1BQU0sSUFBSSxDQUFDO0VBQ3BCQyxTQUFTLEdBQUdBLFNBQVMsSUFBSSxFQUFFO0VBRTNCQyxJQUFJLEdBQUcsRUFBRTtFQUNUQyxLQUFLLEdBQUcsSUFBSSxDQUFDUixRQUFRO0VBRXJCLE9BQU9RLEtBQUssR0FBRyxDQUFDLElBQUksMEJBQTBCLENBQUNJLE9BQU8sQ0FBQyxJQUFJLENBQUNiLE1BQU0sQ0FBQ2MsTUFBTSxDQUFDTCxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtJQUM1RkEsS0FBSyxJQUFJLENBQUM7SUFDVixJQUFJLElBQUksQ0FBQ1IsUUFBUSxHQUFHUSxLQUFLLEdBQUlGLFNBQVMsR0FBRyxDQUFDLEdBQUcsQ0FBRSxFQUFFO01BQy9DQyxJQUFJLEdBQUcsT0FBTztNQUNkQyxLQUFLLElBQUksQ0FBQztNQUNWO0lBQ0Y7RUFDRjtFQUVBQyxJQUFJLEdBQUcsRUFBRTtFQUNUQyxHQUFHLEdBQUcsSUFBSSxDQUFDVixRQUFRO0VBRW5CLE9BQU9VLEdBQUcsR0FBRyxJQUFJLENBQUNYLE1BQU0sQ0FBQ2UsTUFBTSxJQUFJLDBCQUEwQixDQUFDRixPQUFPLENBQUMsSUFBSSxDQUFDYixNQUFNLENBQUNjLE1BQU0sQ0FBQ0gsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtJQUNyR0EsR0FBRyxJQUFJLENBQUM7SUFDUixJQUFJQSxHQUFHLEdBQUcsSUFBSSxDQUFDVixRQUFRLEdBQUlNLFNBQVMsR0FBRyxDQUFDLEdBQUcsQ0FBRSxFQUFFO01BQzdDRyxJQUFJLEdBQUcsT0FBTztNQUNkQyxHQUFHLElBQUksQ0FBQztNQUNSO0lBQ0Y7RUFDRjtFQUVBQyxPQUFPLEdBQUcsSUFBSSxDQUFDWixNQUFNLENBQUNnQixLQUFLLENBQUNQLEtBQUssRUFBRUUsR0FBRyxDQUFDO0VBRXZDLE9BQU9mLE1BQU0sQ0FBQ3FCLE1BQU0sQ0FBQyxHQUFHLEVBQUVYLE1BQU0sQ0FBQyxHQUFHRSxJQUFJLEdBQUdJLE9BQU8sR0FBR0YsSUFBSSxHQUFHLElBQUksR0FDekRkLE1BQU0sQ0FBQ3FCLE1BQU0sQ0FBQyxHQUFHLEVBQUVYLE1BQU0sR0FBRyxJQUFJLENBQUNMLFFBQVEsR0FBR1EsS0FBSyxHQUFHRCxJQUFJLENBQUNPLE1BQU0sQ0FBQyxHQUFHLEdBQUc7QUFDL0UsQ0FBQztBQUdEakIsSUFBSSxDQUFDTSxTQUFTLENBQUNjLFFBQVEsR0FBRyxTQUFTQSxRQUFRQSxDQUFDQyxPQUFPLEVBQUU7RUFDbkQsSUFBSVAsT0FBTztJQUFFUSxLQUFLLEdBQUcsRUFBRTtFQUV2QixJQUFJLElBQUksQ0FBQ3JCLElBQUksRUFBRTtJQUNicUIsS0FBSyxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUNyQixJQUFJLEdBQUcsSUFBSTtFQUNwQztFQUVBcUIsS0FBSyxJQUFJLFVBQVUsSUFBSSxJQUFJLENBQUNsQixJQUFJLEdBQUcsQ0FBQyxDQUFDLEdBQUcsV0FBVyxJQUFJLElBQUksQ0FBQ0MsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUV2RSxJQUFJLENBQUNnQixPQUFPLEVBQUU7SUFDWlAsT0FBTyxHQUFHLElBQUksQ0FBQ1AsVUFBVSxDQUFDLENBQUM7SUFFM0IsSUFBSU8sT0FBTyxFQUFFO01BQ1hRLEtBQUssSUFBSSxLQUFLLEdBQUdSLE9BQU87SUFDMUI7RUFDRjtFQUVBLE9BQU9RLEtBQUs7QUFDZCxDQUFDO0FBR0RDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHeEIsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2dfcGRpLy4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL21hcmsuanM/MjM2OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cblxudmFyIGNvbW1vbiA9IHJlcXVpcmUoJy4vY29tbW9uJyk7XG5cblxuZnVuY3Rpb24gTWFyayhuYW1lLCBidWZmZXIsIHBvc2l0aW9uLCBsaW5lLCBjb2x1bW4pIHtcbiAgdGhpcy5uYW1lICAgICA9IG5hbWU7XG4gIHRoaXMuYnVmZmVyICAgPSBidWZmZXI7XG4gIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgdGhpcy5saW5lICAgICA9IGxpbmU7XG4gIHRoaXMuY29sdW1uICAgPSBjb2x1bW47XG59XG5cblxuTWFyay5wcm90b3R5cGUuZ2V0U25pcHBldCA9IGZ1bmN0aW9uIGdldFNuaXBwZXQoaW5kZW50LCBtYXhMZW5ndGgpIHtcbiAgdmFyIGhlYWQsIHN0YXJ0LCB0YWlsLCBlbmQsIHNuaXBwZXQ7XG5cbiAgaWYgKCF0aGlzLmJ1ZmZlcikgcmV0dXJuIG51bGw7XG5cbiAgaW5kZW50ID0gaW5kZW50IHx8IDQ7XG4gIG1heExlbmd0aCA9IG1heExlbmd0aCB8fCA3NTtcblxuICBoZWFkID0gJyc7XG4gIHN0YXJ0ID0gdGhpcy5wb3NpdGlvbjtcblxuICB3aGlsZSAoc3RhcnQgPiAwICYmICdcXHgwMFxcclxcblxceDg1XFx1MjAyOFxcdTIwMjknLmluZGV4T2YodGhpcy5idWZmZXIuY2hhckF0KHN0YXJ0IC0gMSkpID09PSAtMSkge1xuICAgIHN0YXJ0IC09IDE7XG4gICAgaWYgKHRoaXMucG9zaXRpb24gLSBzdGFydCA+IChtYXhMZW5ndGggLyAyIC0gMSkpIHtcbiAgICAgIGhlYWQgPSAnIC4uLiAnO1xuICAgICAgc3RhcnQgKz0gNTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHRhaWwgPSAnJztcbiAgZW5kID0gdGhpcy5wb3NpdGlvbjtcblxuICB3aGlsZSAoZW5kIDwgdGhpcy5idWZmZXIubGVuZ3RoICYmICdcXHgwMFxcclxcblxceDg1XFx1MjAyOFxcdTIwMjknLmluZGV4T2YodGhpcy5idWZmZXIuY2hhckF0KGVuZCkpID09PSAtMSkge1xuICAgIGVuZCArPSAxO1xuICAgIGlmIChlbmQgLSB0aGlzLnBvc2l0aW9uID4gKG1heExlbmd0aCAvIDIgLSAxKSkge1xuICAgICAgdGFpbCA9ICcgLi4uICc7XG4gICAgICBlbmQgLT0gNTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHNuaXBwZXQgPSB0aGlzLmJ1ZmZlci5zbGljZShzdGFydCwgZW5kKTtcblxuICByZXR1cm4gY29tbW9uLnJlcGVhdCgnICcsIGluZGVudCkgKyBoZWFkICsgc25pcHBldCArIHRhaWwgKyAnXFxuJyArXG4gICAgICAgICBjb21tb24ucmVwZWF0KCcgJywgaW5kZW50ICsgdGhpcy5wb3NpdGlvbiAtIHN0YXJ0ICsgaGVhZC5sZW5ndGgpICsgJ14nO1xufTtcblxuXG5NYXJrLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGNvbXBhY3QpIHtcbiAgdmFyIHNuaXBwZXQsIHdoZXJlID0gJyc7XG5cbiAgaWYgKHRoaXMubmFtZSkge1xuICAgIHdoZXJlICs9ICdpbiBcIicgKyB0aGlzLm5hbWUgKyAnXCIgJztcbiAgfVxuXG4gIHdoZXJlICs9ICdhdCBsaW5lICcgKyAodGhpcy5saW5lICsgMSkgKyAnLCBjb2x1bW4gJyArICh0aGlzLmNvbHVtbiArIDEpO1xuXG4gIGlmICghY29tcGFjdCkge1xuICAgIHNuaXBwZXQgPSB0aGlzLmdldFNuaXBwZXQoKTtcblxuICAgIGlmIChzbmlwcGV0KSB7XG4gICAgICB3aGVyZSArPSAnOlxcbicgKyBzbmlwcGV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB3aGVyZTtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNYXJrO1xuIl0sIm5hbWVzIjpbImNvbW1vbiIsInJlcXVpcmUiLCJNYXJrIiwibmFtZSIsImJ1ZmZlciIsInBvc2l0aW9uIiwibGluZSIsImNvbHVtbiIsInByb3RvdHlwZSIsImdldFNuaXBwZXQiLCJpbmRlbnQiLCJtYXhMZW5ndGgiLCJoZWFkIiwic3RhcnQiLCJ0YWlsIiwiZW5kIiwic25pcHBldCIsImluZGV4T2YiLCJjaGFyQXQiLCJsZW5ndGgiLCJzbGljZSIsInJlcGVhdCIsInRvU3RyaW5nIiwiY29tcGFjdCIsIndoZXJlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/mark.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js ***!
  \*****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/*eslint-disable max-len*/\nvar common = __webpack_require__(/*! ./common */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nvar YAMLException = __webpack_require__(/*! ./exception */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\nvar Type = __webpack_require__(/*! ./type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction compileList(schema, name, result) {\n  var exclude = [];\n  schema.include.forEach(function (includedSchema) {\n    result = compileList(includedSchema, name, result);\n  });\n  schema[name].forEach(function (currentType) {\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {\n        exclude.push(previousIndex);\n      }\n    });\n    result.push(currentType);\n  });\n  return result.filter(function (type, index) {\n    return exclude.indexOf(index) === -1;\n  });\n}\nfunction compileMap( /* lists... */\n) {\n  var result = {\n      scalar: {},\n      sequence: {},\n      mapping: {},\n      fallback: {}\n    },\n    index,\n    length;\n  function collectType(type) {\n    result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n  }\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n  return result;\n}\nfunction Schema(definition) {\n  this.include = definition.include || [];\n  this.implicit = definition.implicit || [];\n  this.explicit = definition.explicit || [];\n  this.implicit.forEach(function (type) {\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new YAMLException('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n  });\n  this.compiledImplicit = compileList(this, 'implicit', []);\n  this.compiledExplicit = compileList(this, 'explicit', []);\n  this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);\n}\nSchema.DEFAULT = null;\nSchema.create = function createSchema() {\n  var schemas, types;\n  switch (arguments.length) {\n    case 1:\n      schemas = Schema.DEFAULT;\n      types = arguments[0];\n      break;\n    case 2:\n      schemas = arguments[0];\n      types = arguments[1];\n      break;\n    default:\n      throw new YAMLException('Wrong number of arguments for Schema.create function');\n  }\n  schemas = common.toArray(schemas);\n  types = common.toArray(types);\n  if (!schemas.every(function (schema) {\n    return schema instanceof Schema;\n  })) {\n    throw new YAMLException('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');\n  }\n  if (!types.every(function (type) {\n    return type instanceof Type;\n  })) {\n    throw new YAMLException('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n  }\n  return new Schema({\n    include: schemas,\n    explicit: types\n  });\n};\nmodule.exports = Schema;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Standard YAML's Core schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2804923\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, Core schema has no distinctions from JSON schema is JS-YAML.\n\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports = new Schema({\n  include: [__webpack_require__(/*! ./json */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2NvcmUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHYTs7QUFHYixJQUFJQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsOEZBQVcsQ0FBQztBQUdqQ0MsTUFBTSxDQUFDQyxPQUFPLEdBQUcsSUFBSUgsTUFBTSxDQUFDO0VBQzFCSSxPQUFPLEVBQUUsQ0FDUEgsbUJBQU8sQ0FBQyxnR0FBUSxDQUFDO0FBRXJCLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2dfcGRpLy4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3NjaGVtYS9jb3JlLmpzPzE3YjkiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU3RhbmRhcmQgWUFNTCdzIENvcmUgc2NoZW1hLlxuLy8gaHR0cDovL3d3dy55YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjaWQyODA0OTIzXG4vL1xuLy8gTk9URTogSlMtWUFNTCBkb2VzIG5vdCBzdXBwb3J0IHNjaGVtYS1zcGVjaWZpYyB0YWcgcmVzb2x1dGlvbiByZXN0cmljdGlvbnMuXG4vLyBTbywgQ29yZSBzY2hlbWEgaGFzIG5vIGRpc3RpbmN0aW9ucyBmcm9tIEpTT04gc2NoZW1hIGlzIEpTLVlBTUwuXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgcmVxdWlyZSgnLi9qc29uJylcbiAgXVxufSk7XG4iXSwibmFtZXMiOlsiU2NoZW1hIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmNsdWRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// JS-YAML's default schema for `load` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on JS-YAML's default safe schema and includes\n// JavaScript-specific types: !!js/undefined, !!js/regexp and !!js/function.\n//\n// Also this schema is used as default base schema at `Schema.create` function.\n\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports = Schema.DEFAULT = new Schema({\n  include: [__webpack_require__(/*! ./default_safe */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\")],\n  explicit: [__webpack_require__(/*! ../type/js/undefined */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js\"), __webpack_require__(/*! ../type/js/regexp */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js\"), __webpack_require__(/*! ../type/js/function */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfZnVsbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHYTs7QUFHYixJQUFJQSxNQUFNLEdBQUdDLG1CQUFPLENBQUMsOEZBQVcsQ0FBQztBQUdqQ0MsTUFBTSxDQUFDQyxPQUFPLEdBQUdILE1BQU0sQ0FBQ0ksT0FBTyxHQUFHLElBQUlKLE1BQU0sQ0FBQztFQUMzQ0ssT0FBTyxFQUFFLENBQ1BKLG1CQUFPLENBQUMsZ0hBQWdCLENBQUMsQ0FDMUI7RUFDREssUUFBUSxFQUFFLENBQ1JMLG1CQUFPLENBQUMsb0hBQXNCLENBQUMsRUFDL0JBLG1CQUFPLENBQUMsOEdBQW1CLENBQUMsRUFDNUJBLG1CQUFPLENBQUMsa0hBQXFCLENBQUM7QUFFbEMsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfZnVsbC5qcz8zN2IyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEpTLVlBTUwncyBkZWZhdWx0IHNjaGVtYSBmb3IgYGxvYWRgIGZ1bmN0aW9uLlxuLy8gSXQgaXMgbm90IGRlc2NyaWJlZCBpbiB0aGUgWUFNTCBzcGVjaWZpY2F0aW9uLlxuLy9cbi8vIFRoaXMgc2NoZW1hIGlzIGJhc2VkIG9uIEpTLVlBTUwncyBkZWZhdWx0IHNhZmUgc2NoZW1hIGFuZCBpbmNsdWRlc1xuLy8gSmF2YVNjcmlwdC1zcGVjaWZpYyB0eXBlczogISFqcy91bmRlZmluZWQsICEhanMvcmVnZXhwIGFuZCAhIWpzL2Z1bmN0aW9uLlxuLy9cbi8vIEFsc28gdGhpcyBzY2hlbWEgaXMgdXNlZCBhcyBkZWZhdWx0IGJhc2Ugc2NoZW1hIGF0IGBTY2hlbWEuY3JlYXRlYCBmdW5jdGlvbi5cblxuXG4ndXNlIHN0cmljdCc7XG5cblxudmFyIFNjaGVtYSA9IHJlcXVpcmUoJy4uL3NjaGVtYScpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gU2NoZW1hLkRFRkFVTFQgPSBuZXcgU2NoZW1hKHtcbiAgaW5jbHVkZTogW1xuICAgIHJlcXVpcmUoJy4vZGVmYXVsdF9zYWZlJylcbiAgXSxcbiAgZXhwbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL2pzL3VuZGVmaW5lZCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvanMvcmVnZXhwJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9qcy9mdW5jdGlvbicpXG4gIF1cbn0pO1xuIl0sIm5hbWVzIjpbIlNjaGVtYSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiREVGQVVMVCIsImluY2x1ZGUiLCJleHBsaWNpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_full.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// JS-YAML's default schema for `safeLoad` function.\n// It is not described in the YAML specification.\n//\n// This schema is based on standard YAML's Core schema and includes most of\n// extra types described at YAML tag repository. (http://yaml.org/type/)\n\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports = new Schema({\n  include: [__webpack_require__(/*! ./core */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/core.js\")],\n  implicit: [__webpack_require__(/*! ../type/timestamp */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js\"), __webpack_require__(/*! ../type/merge */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js\")],\n  explicit: [__webpack_require__(/*! ../type/binary */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js\"), __webpack_require__(/*! ../type/omap */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js\"), __webpack_require__(/*! ../type/pairs */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js\"), __webpack_require__(/*! ../type/set */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/set.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2RlZmF1bHRfc2FmZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdhOztBQUdiLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyw4RkFBVyxDQUFDO0FBR2pDQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxJQUFJSCxNQUFNLENBQUM7RUFDMUJJLE9BQU8sRUFBRSxDQUNQSCxtQkFBTyxDQUFDLGdHQUFRLENBQUMsQ0FDbEI7RUFDREksUUFBUSxFQUFFLENBQ1JKLG1CQUFPLENBQUMsOEdBQW1CLENBQUMsRUFDNUJBLG1CQUFPLENBQUMsc0dBQWUsQ0FBQyxDQUN6QjtFQUNESyxRQUFRLEVBQUUsQ0FDUkwsbUJBQU8sQ0FBQyx3R0FBZ0IsQ0FBQyxFQUN6QkEsbUJBQU8sQ0FBQyxvR0FBYyxDQUFDLEVBQ3ZCQSxtQkFBTyxDQUFDLHNHQUFlLENBQUMsRUFDeEJBLG1CQUFPLENBQUMsa0dBQWEsQ0FBQztBQUUxQixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nX3BkaS8uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvZGVmYXVsdF9zYWZlLmpzPzlmODgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSlMtWUFNTCdzIGRlZmF1bHQgc2NoZW1hIGZvciBgc2FmZUxvYWRgIGZ1bmN0aW9uLlxuLy8gSXQgaXMgbm90IGRlc2NyaWJlZCBpbiB0aGUgWUFNTCBzcGVjaWZpY2F0aW9uLlxuLy9cbi8vIFRoaXMgc2NoZW1hIGlzIGJhc2VkIG9uIHN0YW5kYXJkIFlBTUwncyBDb3JlIHNjaGVtYSBhbmQgaW5jbHVkZXMgbW9zdCBvZlxuLy8gZXh0cmEgdHlwZXMgZGVzY3JpYmVkIGF0IFlBTUwgdGFnIHJlcG9zaXRvcnkuIChodHRwOi8veWFtbC5vcmcvdHlwZS8pXG5cblxuJ3VzZSBzdHJpY3QnO1xuXG5cbnZhciBTY2hlbWEgPSByZXF1aXJlKCcuLi9zY2hlbWEnKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBTY2hlbWEoe1xuICBpbmNsdWRlOiBbXG4gICAgcmVxdWlyZSgnLi9jb3JlJylcbiAgXSxcbiAgaW1wbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL3RpbWVzdGFtcCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvbWVyZ2UnKVxuICBdLFxuICBleHBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvYmluYXJ5JyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9vbWFwJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9wYWlycycpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvc2V0JylcbiAgXVxufSk7XG4iXSwibmFtZXMiOlsiU2NoZW1hIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmNsdWRlIiwiaW1wbGljaXQiLCJleHBsaWNpdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/default_safe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Standard YAML's Failsafe schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2802346\n\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports = new Schema({\n  explicit: [__webpack_require__(/*! ../type/str */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/str.js\"), __webpack_require__(/*! ../type/seq */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js\"), __webpack_require__(/*! ../type/map */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/map.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2ZhaWxzYWZlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBR2E7O0FBR2IsSUFBSUEsTUFBTSxHQUFHQyxtQkFBTyxDQUFDLDhGQUFXLENBQUM7QUFHakNDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLElBQUlILE1BQU0sQ0FBQztFQUMxQkksUUFBUSxFQUFFLENBQ1JILG1CQUFPLENBQUMsa0dBQWEsQ0FBQyxFQUN0QkEsbUJBQU8sQ0FBQyxrR0FBYSxDQUFDLEVBQ3RCQSxtQkFBTyxDQUFDLGtHQUFhLENBQUM7QUFFMUIsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2ZhaWxzYWZlLmpzP2FhNTYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gU3RhbmRhcmQgWUFNTCdzIEZhaWxzYWZlIHNjaGVtYS5cbi8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjgwMjM0NlxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU2NoZW1hKHtcbiAgZXhwbGljaXQ6IFtcbiAgICByZXF1aXJlKCcuLi90eXBlL3N0cicpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvc2VxJyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9tYXAnKVxuICBdXG59KTtcbiJdLCJuYW1lcyI6WyJTY2hlbWEiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImV4cGxpY2l0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Standard YAML's JSON schema.\n// http://www.yaml.org/spec/1.2/spec.html#id2803231\n//\n// NOTE: JS-YAML does not support schema-specific tag resolution restrictions.\n// So, this schema is not such strict as defined in the YAML specification.\n// It allows numbers in binary notaion, use `Null` and `NULL` as `null`, etc.\n\n\n\nvar Schema = __webpack_require__(/*! ../schema */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema.js\");\nmodule.exports = new Schema({\n  include: [__webpack_require__(/*! ./failsafe */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/failsafe.js\")],\n  implicit: [__webpack_require__(/*! ../type/null */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/null.js\"), __webpack_require__(/*! ../type/bool */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js\"), __webpack_require__(/*! ../type/int */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/int.js\"), __webpack_require__(/*! ../type/float */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/float.js\")]\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvc2NoZW1hL2pzb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdhOztBQUdiLElBQUlBLE1BQU0sR0FBR0MsbUJBQU8sQ0FBQyw4RkFBVyxDQUFDO0FBR2pDQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxJQUFJSCxNQUFNLENBQUM7RUFDMUJJLE9BQU8sRUFBRSxDQUNQSCxtQkFBTyxDQUFDLHdHQUFZLENBQUMsQ0FDdEI7RUFDREksUUFBUSxFQUFFLENBQ1JKLG1CQUFPLENBQUMsb0dBQWMsQ0FBQyxFQUN2QkEsbUJBQU8sQ0FBQyxvR0FBYyxDQUFDLEVBQ3ZCQSxtQkFBTyxDQUFDLGtHQUFhLENBQUMsRUFDdEJBLG1CQUFPLENBQUMsc0dBQWUsQ0FBQztBQUU1QixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nX3BkaS8uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC9zY2hlbWEvanNvbi5qcz9kYzFlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFN0YW5kYXJkIFlBTUwncyBKU09OIHNjaGVtYS5cbi8vIGh0dHA6Ly93d3cueWFtbC5vcmcvc3BlYy8xLjIvc3BlYy5odG1sI2lkMjgwMzIzMVxuLy9cbi8vIE5PVEU6IEpTLVlBTUwgZG9lcyBub3Qgc3VwcG9ydCBzY2hlbWEtc3BlY2lmaWMgdGFnIHJlc29sdXRpb24gcmVzdHJpY3Rpb25zLlxuLy8gU28sIHRoaXMgc2NoZW1hIGlzIG5vdCBzdWNoIHN0cmljdCBhcyBkZWZpbmVkIGluIHRoZSBZQU1MIHNwZWNpZmljYXRpb24uXG4vLyBJdCBhbGxvd3MgbnVtYmVycyBpbiBiaW5hcnkgbm90YWlvbiwgdXNlIGBOdWxsYCBhbmQgYE5VTExgIGFzIGBudWxsYCwgZXRjLlxuXG5cbid1c2Ugc3RyaWN0JztcblxuXG52YXIgU2NoZW1hID0gcmVxdWlyZSgnLi4vc2NoZW1hJyk7XG5cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgU2NoZW1hKHtcbiAgaW5jbHVkZTogW1xuICAgIHJlcXVpcmUoJy4vZmFpbHNhZmUnKVxuICBdLFxuICBpbXBsaWNpdDogW1xuICAgIHJlcXVpcmUoJy4uL3R5cGUvbnVsbCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvYm9vbCcpLFxuICAgIHJlcXVpcmUoJy4uL3R5cGUvaW50JyksXG4gICAgcmVxdWlyZSgnLi4vdHlwZS9mbG9hdCcpXG4gIF1cbn0pO1xuIl0sIm5hbWVzIjpbIlNjaGVtYSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5jbHVkZSIsImltcGxpY2l0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/schema/json.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js":
/*!***************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar YAMLException = __webpack_require__(/*! ./exception */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/exception.js\");\nvar TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'defaultStyle', 'styleAliases'];\nvar YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];\nfunction compileStyleAliases(map) {\n  var result = {};\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n  return result;\n}\nfunction Type(tag, options) {\n  options = options || {};\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new YAMLException('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  });\n\n  // TODO: Add tag format check.\n  this.tag = tag;\n  this.kind = options['kind'] || null;\n  this.resolve = options['resolve'] || function () {\n    return true;\n  };\n  this.construct = options['construct'] || function (data) {\n    return data;\n  };\n  this.instanceOf = options['instanceOf'] || null;\n  this.predicate = options['predicate'] || null;\n  this.represent = options['represent'] || null;\n  this.defaultStyle = options['defaultStyle'] || null;\n  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new YAMLException('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\nmodule.exports = Type;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxhQUFhLEdBQUdDLG1CQUFPLENBQUMsbUdBQWEsQ0FBQztBQUUxQyxJQUFJQyx3QkFBd0IsR0FBRyxDQUM3QixNQUFNLEVBQ04sU0FBUyxFQUNULFdBQVcsRUFDWCxZQUFZLEVBQ1osV0FBVyxFQUNYLFdBQVcsRUFDWCxjQUFjLEVBQ2QsY0FBYyxDQUNmO0FBRUQsSUFBSUMsZUFBZSxHQUFHLENBQ3BCLFFBQVEsRUFDUixVQUFVLEVBQ1YsU0FBUyxDQUNWO0FBRUQsU0FBU0MsbUJBQW1CQSxDQUFDQyxHQUFHLEVBQUU7RUFDaEMsSUFBSUMsTUFBTSxHQUFHLENBQUMsQ0FBQztFQUVmLElBQUlELEdBQUcsS0FBSyxJQUFJLEVBQUU7SUFDaEJFLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDSCxHQUFHLENBQUMsQ0FBQ0ksT0FBTyxDQUFDLFVBQVVDLEtBQUssRUFBRTtNQUN4Q0wsR0FBRyxDQUFDSyxLQUFLLENBQUMsQ0FBQ0QsT0FBTyxDQUFDLFVBQVVFLEtBQUssRUFBRTtRQUNsQ0wsTUFBTSxDQUFDTSxNQUFNLENBQUNELEtBQUssQ0FBQyxDQUFDLEdBQUdELEtBQUs7TUFDL0IsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0VBQ0o7RUFFQSxPQUFPSixNQUFNO0FBQ2Y7QUFFQSxTQUFTTyxJQUFJQSxDQUFDQyxHQUFHLEVBQUVDLE9BQU8sRUFBRTtFQUMxQkEsT0FBTyxHQUFHQSxPQUFPLElBQUksQ0FBQyxDQUFDO0VBRXZCUixNQUFNLENBQUNDLElBQUksQ0FBQ08sT0FBTyxDQUFDLENBQUNOLE9BQU8sQ0FBQyxVQUFVTyxJQUFJLEVBQUU7SUFDM0MsSUFBSWQsd0JBQXdCLENBQUNlLE9BQU8sQ0FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7TUFDakQsTUFBTSxJQUFJaEIsYUFBYSxDQUFDLGtCQUFrQixHQUFHZ0IsSUFBSSxHQUFHLDZCQUE2QixHQUFHRixHQUFHLEdBQUcsY0FBYyxDQUFDO0lBQzNHO0VBQ0YsQ0FBQyxDQUFDOztFQUVGO0VBQ0EsSUFBSSxDQUFDQSxHQUFHLEdBQVlBLEdBQUc7RUFDdkIsSUFBSSxDQUFDSSxJQUFJLEdBQVdILE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBWSxJQUFJO0VBQ25ELElBQUksQ0FBQ0ksT0FBTyxHQUFRSixPQUFPLENBQUMsU0FBUyxDQUFDLElBQVMsWUFBWTtJQUFFLE9BQU8sSUFBSTtFQUFFLENBQUM7RUFDM0UsSUFBSSxDQUFDSyxTQUFTLEdBQU1MLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBTyxVQUFVTSxJQUFJLEVBQUU7SUFBRSxPQUFPQSxJQUFJO0VBQUUsQ0FBQztFQUMvRSxJQUFJLENBQUNDLFVBQVUsR0FBS1AsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFNLElBQUk7RUFDbkQsSUFBSSxDQUFDUSxTQUFTLEdBQU1SLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBTyxJQUFJO0VBQ25ELElBQUksQ0FBQ1MsU0FBUyxHQUFNVCxPQUFPLENBQUMsV0FBVyxDQUFDLElBQU8sSUFBSTtFQUNuRCxJQUFJLENBQUNVLFlBQVksR0FBR1YsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLElBQUk7RUFDbkQsSUFBSSxDQUFDVyxZQUFZLEdBQUd0QixtQkFBbUIsQ0FBQ1csT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLElBQUksQ0FBQztFQUV4RSxJQUFJWixlQUFlLENBQUNjLE9BQU8sQ0FBQyxJQUFJLENBQUNDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0lBQzdDLE1BQU0sSUFBSWxCLGFBQWEsQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUNrQixJQUFJLEdBQUcsc0JBQXNCLEdBQUdKLEdBQUcsR0FBRyxjQUFjLENBQUM7RUFDdkc7QUFDRjtBQUVBYSxNQUFNLENBQUNDLE9BQU8sR0FBR2YsSUFBSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2dfcGRpLy4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUuanM/ZjMzYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBZQU1MRXhjZXB0aW9uID0gcmVxdWlyZSgnLi9leGNlcHRpb24nKTtcblxudmFyIFRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyA9IFtcbiAgJ2tpbmQnLFxuICAncmVzb2x2ZScsXG4gICdjb25zdHJ1Y3QnLFxuICAnaW5zdGFuY2VPZicsXG4gICdwcmVkaWNhdGUnLFxuICAncmVwcmVzZW50JyxcbiAgJ2RlZmF1bHRTdHlsZScsXG4gICdzdHlsZUFsaWFzZXMnXG5dO1xuXG52YXIgWUFNTF9OT0RFX0tJTkRTID0gW1xuICAnc2NhbGFyJyxcbiAgJ3NlcXVlbmNlJyxcbiAgJ21hcHBpbmcnXG5dO1xuXG5mdW5jdGlvbiBjb21waWxlU3R5bGVBbGlhc2VzKG1hcCkge1xuICB2YXIgcmVzdWx0ID0ge307XG5cbiAgaWYgKG1hcCAhPT0gbnVsbCkge1xuICAgIE9iamVjdC5rZXlzKG1hcCkuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIG1hcFtzdHlsZV0uZm9yRWFjaChmdW5jdGlvbiAoYWxpYXMpIHtcbiAgICAgICAgcmVzdWx0W1N0cmluZyhhbGlhcyldID0gc3R5bGU7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIFR5cGUodGFnLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAoVFlQRV9DT05TVFJVQ1RPUl9PUFRJT05TLmluZGV4T2YobmFtZSkgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgWUFNTEV4Y2VwdGlvbignVW5rbm93biBvcHRpb24gXCInICsgbmFtZSArICdcIiBpcyBtZXQgaW4gZGVmaW5pdGlvbiBvZiBcIicgKyB0YWcgKyAnXCIgWUFNTCB0eXBlLicpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gVE9ETzogQWRkIHRhZyBmb3JtYXQgY2hlY2suXG4gIHRoaXMudGFnICAgICAgICAgID0gdGFnO1xuICB0aGlzLmtpbmQgICAgICAgICA9IG9wdGlvbnNbJ2tpbmQnXSAgICAgICAgIHx8IG51bGw7XG4gIHRoaXMucmVzb2x2ZSAgICAgID0gb3B0aW9uc1sncmVzb2x2ZSddICAgICAgfHwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfTtcbiAgdGhpcy5jb25zdHJ1Y3QgICAgPSBvcHRpb25zWydjb25zdHJ1Y3QnXSAgICB8fCBmdW5jdGlvbiAoZGF0YSkgeyByZXR1cm4gZGF0YTsgfTtcbiAgdGhpcy5pbnN0YW5jZU9mICAgPSBvcHRpb25zWydpbnN0YW5jZU9mJ10gICB8fCBudWxsO1xuICB0aGlzLnByZWRpY2F0ZSAgICA9IG9wdGlvbnNbJ3ByZWRpY2F0ZSddICAgIHx8IG51bGw7XG4gIHRoaXMucmVwcmVzZW50ICAgID0gb3B0aW9uc1sncmVwcmVzZW50J10gICAgfHwgbnVsbDtcbiAgdGhpcy5kZWZhdWx0U3R5bGUgPSBvcHRpb25zWydkZWZhdWx0U3R5bGUnXSB8fCBudWxsO1xuICB0aGlzLnN0eWxlQWxpYXNlcyA9IGNvbXBpbGVTdHlsZUFsaWFzZXMob3B0aW9uc1snc3R5bGVBbGlhc2VzJ10gfHwgbnVsbCk7XG5cbiAgaWYgKFlBTUxfTk9ERV9LSU5EUy5pbmRleE9mKHRoaXMua2luZCkgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFlBTUxFeGNlcHRpb24oJ1Vua25vd24ga2luZCBcIicgKyB0aGlzLmtpbmQgKyAnXCIgaXMgc3BlY2lmaWVkIGZvciBcIicgKyB0YWcgKyAnXCIgWUFNTCB0eXBlLicpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVHlwZTtcbiJdLCJuYW1lcyI6WyJZQU1MRXhjZXB0aW9uIiwicmVxdWlyZSIsIlRZUEVfQ09OU1RSVUNUT1JfT1BUSU9OUyIsIllBTUxfTk9ERV9LSU5EUyIsImNvbXBpbGVTdHlsZUFsaWFzZXMiLCJtYXAiLCJyZXN1bHQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInN0eWxlIiwiYWxpYXMiLCJTdHJpbmciLCJUeXBlIiwidGFnIiwib3B0aW9ucyIsIm5hbWUiLCJpbmRleE9mIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJkYXRhIiwiaW5zdGFuY2VPZiIsInByZWRpY2F0ZSIsInJlcHJlc2VudCIsImRlZmF1bHRTdHlsZSIsInN0eWxlQWxpYXNlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/*eslint-disable no-bitwise*/\nvar NodeBuffer;\ntry {\n  // A trick for browserified version, to not include `Buffer` shim\n  var _require = undefined;\n  NodeBuffer = (__webpack_require__(/*! buffer */ \"buffer\").Buffer);\n} catch (__) {}\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\n\n// [ 64, 65, 66 ] -> [ padding, CR, LF ]\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n  var code,\n    idx,\n    bitlen = 0,\n    max = data.length,\n    map = BASE64_MAP;\n\n  // Convert one by one.\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx));\n\n    // Skip CR/LF\n    if (code > 64) continue;\n\n    // Fail on illegal characters\n    if (code < 0) return false;\n    bitlen += 6;\n  }\n\n  // If there are any bits left, source was corrupted\n  return bitlen % 8 === 0;\n}\nfunction constructYamlBinary(data) {\n  var idx,\n    tailbits,\n    input = data.replace(/[\\r\\n=]/g, ''),\n    // remove CR/LF & padding to simplify scan\n    max = input.length,\n    map = BASE64_MAP,\n    bits = 0,\n    result = [];\n\n  // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 4 === 0 && idx) {\n      result.push(bits >> 16 & 0xFF);\n      result.push(bits >> 8 & 0xFF);\n      result.push(bits & 0xFF);\n    }\n    bits = bits << 6 | map.indexOf(input.charAt(idx));\n  }\n\n  // Dump tail\n\n  tailbits = max % 4 * 6;\n  if (tailbits === 0) {\n    result.push(bits >> 16 & 0xFF);\n    result.push(bits >> 8 & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push(bits >> 10 & 0xFF);\n    result.push(bits >> 2 & 0xFF);\n  } else if (tailbits === 12) {\n    result.push(bits >> 4 & 0xFF);\n  }\n\n  // Wrap into Buffer for NodeJS and leave Array for browser\n  if (NodeBuffer) {\n    // Support node 6.+ Buffer API when available\n    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);\n  }\n  return result;\n}\nfunction representYamlBinary(object /*, style*/) {\n  var result = '',\n    bits = 0,\n    idx,\n    tail,\n    max = object.length,\n    map = BASE64_MAP;\n\n  // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 3 === 0 && idx) {\n      result += map[bits >> 18 & 0x3F];\n      result += map[bits >> 12 & 0x3F];\n      result += map[bits >> 6 & 0x3F];\n      result += map[bits & 0x3F];\n    }\n    bits = (bits << 8) + object[idx];\n  }\n\n  // Dump tail\n\n  tail = max % 3;\n  if (tail === 0) {\n    result += map[bits >> 18 & 0x3F];\n    result += map[bits >> 12 & 0x3F];\n    result += map[bits >> 6 & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[bits >> 10 & 0x3F];\n    result += map[bits >> 4 & 0x3F];\n    result += map[bits << 2 & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[bits >> 2 & 0x3F];\n    result += map[bits << 4 & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n  return result;\n}\nfunction isBinary(object) {\n  return NodeBuffer && NodeBuffer.isBuffer(object);\n}\nmodule.exports = new Type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9iaW5hcnkuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFFQSxJQUFJQSxVQUFVO0FBRWQsSUFBSTtFQUNGO0VBQ0EsSUFBSUMsUUFBUSxHQUFHQyxTQUFPO0VBQ3RCRixVQUFVLEdBQUdDLG9EQUF5QjtBQUN4QyxDQUFDLENBQUMsT0FBT0csRUFBRSxFQUFFLENBQUM7QUFFZCxJQUFJQyxJQUFJLEdBQVNILG1CQUFPLENBQUMsMEZBQVMsQ0FBQzs7QUFHbkM7QUFDQSxJQUFJSSxVQUFVLEdBQUcsdUVBQXVFO0FBR3hGLFNBQVNDLGlCQUFpQkEsQ0FBQ0MsSUFBSSxFQUFFO0VBQy9CLElBQUlBLElBQUksS0FBSyxJQUFJLEVBQUUsT0FBTyxLQUFLO0VBRS9CLElBQUlDLElBQUk7SUFBRUMsR0FBRztJQUFFQyxNQUFNLEdBQUcsQ0FBQztJQUFFQyxHQUFHLEdBQUdKLElBQUksQ0FBQ0ssTUFBTTtJQUFFQyxHQUFHLEdBQUdSLFVBQVU7O0VBRTlEO0VBQ0EsS0FBS0ksR0FBRyxHQUFHLENBQUMsRUFBRUEsR0FBRyxHQUFHRSxHQUFHLEVBQUVGLEdBQUcsRUFBRSxFQUFFO0lBQzlCRCxJQUFJLEdBQUdLLEdBQUcsQ0FBQ0MsT0FBTyxDQUFDUCxJQUFJLENBQUNRLE1BQU0sQ0FBQ04sR0FBRyxDQUFDLENBQUM7O0lBRXBDO0lBQ0EsSUFBSUQsSUFBSSxHQUFHLEVBQUUsRUFBRTs7SUFFZjtJQUNBLElBQUlBLElBQUksR0FBRyxDQUFDLEVBQUUsT0FBTyxLQUFLO0lBRTFCRSxNQUFNLElBQUksQ0FBQztFQUNiOztFQUVBO0VBQ0EsT0FBUUEsTUFBTSxHQUFHLENBQUMsS0FBTSxDQUFDO0FBQzNCO0FBRUEsU0FBU00sbUJBQW1CQSxDQUFDVCxJQUFJLEVBQUU7RUFDakMsSUFBSUUsR0FBRztJQUFFUSxRQUFRO0lBQ2JDLEtBQUssR0FBR1gsSUFBSSxDQUFDWSxPQUFPLENBQUMsVUFBVSxFQUFFLEVBQUUsQ0FBQztJQUFFO0lBQ3RDUixHQUFHLEdBQUdPLEtBQUssQ0FBQ04sTUFBTTtJQUNsQkMsR0FBRyxHQUFHUixVQUFVO0lBQ2hCZSxJQUFJLEdBQUcsQ0FBQztJQUNSQyxNQUFNLEdBQUcsRUFBRTs7RUFFZjs7RUFFQSxLQUFLWixHQUFHLEdBQUcsQ0FBQyxFQUFFQSxHQUFHLEdBQUdFLEdBQUcsRUFBRUYsR0FBRyxFQUFFLEVBQUU7SUFDOUIsSUFBS0EsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUtBLEdBQUcsRUFBRTtNQUMxQlksTUFBTSxDQUFDQyxJQUFJLENBQUVGLElBQUksSUFBSSxFQUFFLEdBQUksSUFBSSxDQUFDO01BQ2hDQyxNQUFNLENBQUNDLElBQUksQ0FBRUYsSUFBSSxJQUFJLENBQUMsR0FBSSxJQUFJLENBQUM7TUFDL0JDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDRixJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQzFCO0lBRUFBLElBQUksR0FBSUEsSUFBSSxJQUFJLENBQUMsR0FBSVAsR0FBRyxDQUFDQyxPQUFPLENBQUNJLEtBQUssQ0FBQ0gsTUFBTSxDQUFDTixHQUFHLENBQUMsQ0FBQztFQUNyRDs7RUFFQTs7RUFFQVEsUUFBUSxHQUFJTixHQUFHLEdBQUcsQ0FBQyxHQUFJLENBQUM7RUFFeEIsSUFBSU0sUUFBUSxLQUFLLENBQUMsRUFBRTtJQUNsQkksTUFBTSxDQUFDQyxJQUFJLENBQUVGLElBQUksSUFBSSxFQUFFLEdBQUksSUFBSSxDQUFDO0lBQ2hDQyxNQUFNLENBQUNDLElBQUksQ0FBRUYsSUFBSSxJQUFJLENBQUMsR0FBSSxJQUFJLENBQUM7SUFDL0JDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDRixJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQzFCLENBQUMsTUFBTSxJQUFJSCxRQUFRLEtBQUssRUFBRSxFQUFFO0lBQzFCSSxNQUFNLENBQUNDLElBQUksQ0FBRUYsSUFBSSxJQUFJLEVBQUUsR0FBSSxJQUFJLENBQUM7SUFDaENDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFFRixJQUFJLElBQUksQ0FBQyxHQUFJLElBQUksQ0FBQztFQUNqQyxDQUFDLE1BQU0sSUFBSUgsUUFBUSxLQUFLLEVBQUUsRUFBRTtJQUMxQkksTUFBTSxDQUFDQyxJQUFJLENBQUVGLElBQUksSUFBSSxDQUFDLEdBQUksSUFBSSxDQUFDO0VBQ2pDOztFQUVBO0VBQ0EsSUFBSXJCLFVBQVUsRUFBRTtJQUNkO0lBQ0EsT0FBT0EsVUFBVSxDQUFDd0IsSUFBSSxHQUFHeEIsVUFBVSxDQUFDd0IsSUFBSSxDQUFDRixNQUFNLENBQUMsR0FBRyxJQUFJdEIsVUFBVSxDQUFDc0IsTUFBTSxDQUFDO0VBQzNFO0VBRUEsT0FBT0EsTUFBTTtBQUNmO0FBRUEsU0FBU0csbUJBQW1CQSxDQUFDQyxNQUFNLENBQUMsYUFBYTtFQUMvQyxJQUFJSixNQUFNLEdBQUcsRUFBRTtJQUFFRCxJQUFJLEdBQUcsQ0FBQztJQUFFWCxHQUFHO0lBQUVpQixJQUFJO0lBQ2hDZixHQUFHLEdBQUdjLE1BQU0sQ0FBQ2IsTUFBTTtJQUNuQkMsR0FBRyxHQUFHUixVQUFVOztFQUVwQjs7RUFFQSxLQUFLSSxHQUFHLEdBQUcsQ0FBQyxFQUFFQSxHQUFHLEdBQUdFLEdBQUcsRUFBRUYsR0FBRyxFQUFFLEVBQUU7SUFDOUIsSUFBS0EsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUtBLEdBQUcsRUFBRTtNQUMxQlksTUFBTSxJQUFJUixHQUFHLENBQUVPLElBQUksSUFBSSxFQUFFLEdBQUksSUFBSSxDQUFDO01BQ2xDQyxNQUFNLElBQUlSLEdBQUcsQ0FBRU8sSUFBSSxJQUFJLEVBQUUsR0FBSSxJQUFJLENBQUM7TUFDbENDLE1BQU0sSUFBSVIsR0FBRyxDQUFFTyxJQUFJLElBQUksQ0FBQyxHQUFJLElBQUksQ0FBQztNQUNqQ0MsTUFBTSxJQUFJUixHQUFHLENBQUNPLElBQUksR0FBRyxJQUFJLENBQUM7SUFDNUI7SUFFQUEsSUFBSSxHQUFHLENBQUNBLElBQUksSUFBSSxDQUFDLElBQUlLLE1BQU0sQ0FBQ2hCLEdBQUcsQ0FBQztFQUNsQzs7RUFFQTs7RUFFQWlCLElBQUksR0FBR2YsR0FBRyxHQUFHLENBQUM7RUFFZCxJQUFJZSxJQUFJLEtBQUssQ0FBQyxFQUFFO0lBQ2RMLE1BQU0sSUFBSVIsR0FBRyxDQUFFTyxJQUFJLElBQUksRUFBRSxHQUFJLElBQUksQ0FBQztJQUNsQ0MsTUFBTSxJQUFJUixHQUFHLENBQUVPLElBQUksSUFBSSxFQUFFLEdBQUksSUFBSSxDQUFDO0lBQ2xDQyxNQUFNLElBQUlSLEdBQUcsQ0FBRU8sSUFBSSxJQUFJLENBQUMsR0FBSSxJQUFJLENBQUM7SUFDakNDLE1BQU0sSUFBSVIsR0FBRyxDQUFDTyxJQUFJLEdBQUcsSUFBSSxDQUFDO0VBQzVCLENBQUMsTUFBTSxJQUFJTSxJQUFJLEtBQUssQ0FBQyxFQUFFO0lBQ3JCTCxNQUFNLElBQUlSLEdBQUcsQ0FBRU8sSUFBSSxJQUFJLEVBQUUsR0FBSSxJQUFJLENBQUM7SUFDbENDLE1BQU0sSUFBSVIsR0FBRyxDQUFFTyxJQUFJLElBQUksQ0FBQyxHQUFJLElBQUksQ0FBQztJQUNqQ0MsTUFBTSxJQUFJUixHQUFHLENBQUVPLElBQUksSUFBSSxDQUFDLEdBQUksSUFBSSxDQUFDO0lBQ2pDQyxNQUFNLElBQUlSLEdBQUcsQ0FBQyxFQUFFLENBQUM7RUFDbkIsQ0FBQyxNQUFNLElBQUlhLElBQUksS0FBSyxDQUFDLEVBQUU7SUFDckJMLE1BQU0sSUFBSVIsR0FBRyxDQUFFTyxJQUFJLElBQUksQ0FBQyxHQUFJLElBQUksQ0FBQztJQUNqQ0MsTUFBTSxJQUFJUixHQUFHLENBQUVPLElBQUksSUFBSSxDQUFDLEdBQUksSUFBSSxDQUFDO0lBQ2pDQyxNQUFNLElBQUlSLEdBQUcsQ0FBQyxFQUFFLENBQUM7SUFDakJRLE1BQU0sSUFBSVIsR0FBRyxDQUFDLEVBQUUsQ0FBQztFQUNuQjtFQUVBLE9BQU9RLE1BQU07QUFDZjtBQUVBLFNBQVNNLFFBQVFBLENBQUNGLE1BQU0sRUFBRTtFQUN4QixPQUFPMUIsVUFBVSxJQUFJQSxVQUFVLENBQUM2QixRQUFRLENBQUNILE1BQU0sQ0FBQztBQUNsRDtBQUVBSSxNQUFNLENBQUNDLE9BQU8sR0FBRyxJQUFJMUIsSUFBSSxDQUFDLDBCQUEwQixFQUFFO0VBQ3BEMkIsSUFBSSxFQUFFLFFBQVE7RUFDZEMsT0FBTyxFQUFFMUIsaUJBQWlCO0VBQzFCMkIsU0FBUyxFQUFFakIsbUJBQW1CO0VBQzlCa0IsU0FBUyxFQUFFUCxRQUFRO0VBQ25CUSxTQUFTLEVBQUVYO0FBQ2IsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9iaW5hcnkuanM/N2JjYyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSovXG5cbnZhciBOb2RlQnVmZmVyO1xuXG50cnkge1xuICAvLyBBIHRyaWNrIGZvciBicm93c2VyaWZpZWQgdmVyc2lvbiwgdG8gbm90IGluY2x1ZGUgYEJ1ZmZlcmAgc2hpbVxuICB2YXIgX3JlcXVpcmUgPSByZXF1aXJlO1xuICBOb2RlQnVmZmVyID0gX3JlcXVpcmUoJ2J1ZmZlcicpLkJ1ZmZlcjtcbn0gY2F0Y2ggKF9fKSB7fVxuXG52YXIgVHlwZSAgICAgICA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuXG4vLyBbIDY0LCA2NSwgNjYgXSAtPiBbIHBhZGRpbmcsIENSLCBMRiBdXG52YXIgQkFTRTY0X01BUCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVxcblxccic7XG5cblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxCaW5hcnkoZGF0YSkge1xuICBpZiAoZGF0YSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIHZhciBjb2RlLCBpZHgsIGJpdGxlbiA9IDAsIG1heCA9IGRhdGEubGVuZ3RoLCBtYXAgPSBCQVNFNjRfTUFQO1xuXG4gIC8vIENvbnZlcnQgb25lIGJ5IG9uZS5cbiAgZm9yIChpZHggPSAwOyBpZHggPCBtYXg7IGlkeCsrKSB7XG4gICAgY29kZSA9IG1hcC5pbmRleE9mKGRhdGEuY2hhckF0KGlkeCkpO1xuXG4gICAgLy8gU2tpcCBDUi9MRlxuICAgIGlmIChjb2RlID4gNjQpIGNvbnRpbnVlO1xuXG4gICAgLy8gRmFpbCBvbiBpbGxlZ2FsIGNoYXJhY3RlcnNcbiAgICBpZiAoY29kZSA8IDApIHJldHVybiBmYWxzZTtcblxuICAgIGJpdGxlbiArPSA2O1xuICB9XG5cbiAgLy8gSWYgdGhlcmUgYXJlIGFueSBiaXRzIGxlZnQsIHNvdXJjZSB3YXMgY29ycnVwdGVkXG4gIHJldHVybiAoYml0bGVuICUgOCkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxCaW5hcnkoZGF0YSkge1xuICB2YXIgaWR4LCB0YWlsYml0cyxcbiAgICAgIGlucHV0ID0gZGF0YS5yZXBsYWNlKC9bXFxyXFxuPV0vZywgJycpLCAvLyByZW1vdmUgQ1IvTEYgJiBwYWRkaW5nIHRvIHNpbXBsaWZ5IHNjYW5cbiAgICAgIG1heCA9IGlucHV0Lmxlbmd0aCxcbiAgICAgIG1hcCA9IEJBU0U2NF9NQVAsXG4gICAgICBiaXRzID0gMCxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIC8vIENvbGxlY3QgYnkgNio0IGJpdHMgKDMgYnl0ZXMpXG5cbiAgZm9yIChpZHggPSAwOyBpZHggPCBtYXg7IGlkeCsrKSB7XG4gICAgaWYgKChpZHggJSA0ID09PSAwKSAmJiBpZHgpIHtcbiAgICAgIHJlc3VsdC5wdXNoKChiaXRzID4+IDE2KSAmIDB4RkYpO1xuICAgICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gOCkgJiAweEZGKTtcbiAgICAgIHJlc3VsdC5wdXNoKGJpdHMgJiAweEZGKTtcbiAgICB9XG5cbiAgICBiaXRzID0gKGJpdHMgPDwgNikgfCBtYXAuaW5kZXhPZihpbnB1dC5jaGFyQXQoaWR4KSk7XG4gIH1cblxuICAvLyBEdW1wIHRhaWxcblxuICB0YWlsYml0cyA9IChtYXggJSA0KSAqIDY7XG5cbiAgaWYgKHRhaWxiaXRzID09PSAwKSB7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gMTYpICYgMHhGRik7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gOCkgJiAweEZGKTtcbiAgICByZXN1bHQucHVzaChiaXRzICYgMHhGRik7XG4gIH0gZWxzZSBpZiAodGFpbGJpdHMgPT09IDE4KSB7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gMTApICYgMHhGRik7XG4gICAgcmVzdWx0LnB1c2goKGJpdHMgPj4gMikgJiAweEZGKTtcbiAgfSBlbHNlIGlmICh0YWlsYml0cyA9PT0gMTIpIHtcbiAgICByZXN1bHQucHVzaCgoYml0cyA+PiA0KSAmIDB4RkYpO1xuICB9XG5cbiAgLy8gV3JhcCBpbnRvIEJ1ZmZlciBmb3IgTm9kZUpTIGFuZCBsZWF2ZSBBcnJheSBmb3IgYnJvd3NlclxuICBpZiAoTm9kZUJ1ZmZlcikge1xuICAgIC8vIFN1cHBvcnQgbm9kZSA2LisgQnVmZmVyIEFQSSB3aGVuIGF2YWlsYWJsZVxuICAgIHJldHVybiBOb2RlQnVmZmVyLmZyb20gPyBOb2RlQnVmZmVyLmZyb20ocmVzdWx0KSA6IG5ldyBOb2RlQnVmZmVyKHJlc3VsdCk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRZYW1sQmluYXJ5KG9iamVjdCAvKiwgc3R5bGUqLykge1xuICB2YXIgcmVzdWx0ID0gJycsIGJpdHMgPSAwLCBpZHgsIHRhaWwsXG4gICAgICBtYXggPSBvYmplY3QubGVuZ3RoLFxuICAgICAgbWFwID0gQkFTRTY0X01BUDtcblxuICAvLyBDb252ZXJ0IGV2ZXJ5IHRocmVlIGJ5dGVzIHRvIDQgQVNDSUkgY2hhcmFjdGVycy5cblxuICBmb3IgKGlkeCA9IDA7IGlkeCA8IG1heDsgaWR4KyspIHtcbiAgICBpZiAoKGlkeCAlIDMgPT09IDApICYmIGlkeCkge1xuICAgICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gMTIpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDYpICYgMHgzRl07XG4gICAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgICB9XG5cbiAgICBiaXRzID0gKGJpdHMgPDwgOCkgKyBvYmplY3RbaWR4XTtcbiAgfVxuXG4gIC8vIER1bXAgdGFpbFxuXG4gIHRhaWwgPSBtYXggJSAzO1xuXG4gIGlmICh0YWlsID09PSAwKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxOCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDEyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbKGJpdHMgPj4gNikgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwW2JpdHMgJiAweDNGXTtcbiAgfSBlbHNlIGlmICh0YWlsID09PSAyKSB7XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA+PiAxMCkgJiAweDNGXTtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDQpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCAyKSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9IGVsc2UgaWYgKHRhaWwgPT09IDEpIHtcbiAgICByZXN1bHQgKz0gbWFwWyhiaXRzID4+IDIpICYgMHgzRl07XG4gICAgcmVzdWx0ICs9IG1hcFsoYml0cyA8PCA0KSAmIDB4M0ZdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICAgIHJlc3VsdCArPSBtYXBbNjRdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gaXNCaW5hcnkob2JqZWN0KSB7XG4gIHJldHVybiBOb2RlQnVmZmVyICYmIE5vZGVCdWZmZXIuaXNCdWZmZXIob2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5Jywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxCaW5hcnksXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJpbmFyeSxcbiAgcHJlZGljYXRlOiBpc0JpbmFyeSxcbiAgcmVwcmVzZW50OiByZXByZXNlbnRZYW1sQmluYXJ5XG59KTtcbiJdLCJuYW1lcyI6WyJOb2RlQnVmZmVyIiwiX3JlcXVpcmUiLCJyZXF1aXJlIiwiQnVmZmVyIiwiX18iLCJUeXBlIiwiQkFTRTY0X01BUCIsInJlc29sdmVZYW1sQmluYXJ5IiwiZGF0YSIsImNvZGUiLCJpZHgiLCJiaXRsZW4iLCJtYXgiLCJsZW5ndGgiLCJtYXAiLCJpbmRleE9mIiwiY2hhckF0IiwiY29uc3RydWN0WWFtbEJpbmFyeSIsInRhaWxiaXRzIiwiaW5wdXQiLCJyZXBsYWNlIiwiYml0cyIsInJlc3VsdCIsInB1c2giLCJmcm9tIiwicmVwcmVzZW50WWFtbEJpbmFyeSIsIm9iamVjdCIsInRhaWwiLCJpc0JpbmFyeSIsImlzQnVmZmVyIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0IiwicHJlZGljYXRlIiwicmVwcmVzZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/binary.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js":
/*!********************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n  var max = data.length;\n  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');\n}\nfunction constructYamlBoolean(data) {\n  return data === 'true' || data === 'True' || data === 'TRUE';\n}\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\nmodule.exports = new Type('tag:yaml.org,2002:bool', {\n  kind: 'scalar',\n  resolve: resolveYamlBoolean,\n  construct: constructYamlBoolean,\n  predicate: isBoolean,\n  represent: {\n    lowercase: function (object) {\n      return object ? 'true' : 'false';\n    },\n    uppercase: function (object) {\n      return object ? 'TRUE' : 'FALSE';\n    },\n    camelcase: function (object) {\n      return object ? 'True' : 'False';\n    }\n  },\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9ib29sLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQywwRkFBUyxDQUFDO0FBRTdCLFNBQVNDLGtCQUFrQkEsQ0FBQ0MsSUFBSSxFQUFFO0VBQ2hDLElBQUlBLElBQUksS0FBSyxJQUFJLEVBQUUsT0FBTyxLQUFLO0VBRS9CLElBQUlDLEdBQUcsR0FBR0QsSUFBSSxDQUFDRSxNQUFNO0VBRXJCLE9BQVFELEdBQUcsS0FBSyxDQUFDLEtBQUtELElBQUksS0FBSyxNQUFNLElBQUlBLElBQUksS0FBSyxNQUFNLElBQUlBLElBQUksS0FBSyxNQUFNLENBQUMsSUFDcEVDLEdBQUcsS0FBSyxDQUFDLEtBQUtELElBQUksS0FBSyxPQUFPLElBQUlBLElBQUksS0FBSyxPQUFPLElBQUlBLElBQUksS0FBSyxPQUFPLENBQUU7QUFDbEY7QUFFQSxTQUFTRyxvQkFBb0JBLENBQUNILElBQUksRUFBRTtFQUNsQyxPQUFPQSxJQUFJLEtBQUssTUFBTSxJQUNmQSxJQUFJLEtBQUssTUFBTSxJQUNmQSxJQUFJLEtBQUssTUFBTTtBQUN4QjtBQUVBLFNBQVNJLFNBQVNBLENBQUNDLE1BQU0sRUFBRTtFQUN6QixPQUFPQyxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUNKLE1BQU0sQ0FBQyxLQUFLLGtCQUFrQjtBQUN0RTtBQUVBSyxNQUFNLENBQUNDLE9BQU8sR0FBRyxJQUFJZCxJQUFJLENBQUMsd0JBQXdCLEVBQUU7RUFDbERlLElBQUksRUFBRSxRQUFRO0VBQ2RDLE9BQU8sRUFBRWQsa0JBQWtCO0VBQzNCZSxTQUFTLEVBQUVYLG9CQUFvQjtFQUMvQlksU0FBUyxFQUFFWCxTQUFTO0VBQ3BCWSxTQUFTLEVBQUU7SUFDVEMsU0FBUyxFQUFFLFNBQUFBLENBQVVaLE1BQU0sRUFBRTtNQUFFLE9BQU9BLE1BQU0sR0FBRyxNQUFNLEdBQUcsT0FBTztJQUFFLENBQUM7SUFDbEVhLFNBQVMsRUFBRSxTQUFBQSxDQUFVYixNQUFNLEVBQUU7TUFBRSxPQUFPQSxNQUFNLEdBQUcsTUFBTSxHQUFHLE9BQU87SUFBRSxDQUFDO0lBQ2xFYyxTQUFTLEVBQUUsU0FBQUEsQ0FBVWQsTUFBTSxFQUFFO01BQUUsT0FBT0EsTUFBTSxHQUFHLE1BQU0sR0FBRyxPQUFPO0lBQUU7RUFDbkUsQ0FBQztFQUNEZSxZQUFZLEVBQUU7QUFDaEIsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9ib29sLmpzP2UwMmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxCb29sZWFuKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGg7XG5cbiAgcmV0dXJuIChtYXggPT09IDQgJiYgKGRhdGEgPT09ICd0cnVlJyB8fCBkYXRhID09PSAnVHJ1ZScgfHwgZGF0YSA9PT0gJ1RSVUUnKSkgfHxcbiAgICAgICAgIChtYXggPT09IDUgJiYgKGRhdGEgPT09ICdmYWxzZScgfHwgZGF0YSA9PT0gJ0ZhbHNlJyB8fCBkYXRhID09PSAnRkFMU0UnKSk7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxCb29sZWFuKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgPT09ICd0cnVlJyB8fFxuICAgICAgICAgZGF0YSA9PT0gJ1RydWUnIHx8XG4gICAgICAgICBkYXRhID09PSAnVFJVRSc7XG59XG5cbmZ1bmN0aW9uIGlzQm9vbGVhbihvYmplY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBCb29sZWFuXSc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbEJvb2xlYW4sXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbEJvb2xlYW4sXG4gIHByZWRpY2F0ZTogaXNCb29sZWFuLFxuICByZXByZXNlbnQ6IHtcbiAgICBsb3dlcmNhc2U6IGZ1bmN0aW9uIChvYmplY3QpIHsgcmV0dXJuIG9iamVjdCA/ICd0cnVlJyA6ICdmYWxzZSc7IH0sXG4gICAgdXBwZXJjYXNlOiBmdW5jdGlvbiAob2JqZWN0KSB7IHJldHVybiBvYmplY3QgPyAnVFJVRScgOiAnRkFMU0UnOyB9LFxuICAgIGNhbWVsY2FzZTogZnVuY3Rpb24gKG9iamVjdCkgeyByZXR1cm4gb2JqZWN0ID8gJ1RydWUnIDogJ0ZhbHNlJzsgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsInJlc29sdmVZYW1sQm9vbGVhbiIsImRhdGEiLCJtYXgiLCJsZW5ndGgiLCJjb25zdHJ1Y3RZYW1sQm9vbGVhbiIsImlzQm9vbGVhbiIsIm9iamVjdCIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCIsInByZWRpY2F0ZSIsInJlcHJlc2VudCIsImxvd2VyY2FzZSIsInVwcGVyY2FzZSIsImNhbWVsY2FzZSIsImRlZmF1bHRTdHlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/bool.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/float.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/float.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nvar YAML_FLOAT_PATTERN = new RegExp(\n// 2.5e4, 2.5 and integers\n'^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' +\n// .2e4, .2\n// special case, seems not from spec\n'|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' +\n// 20:59\n'|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*' +\n// .inf\n'|[-+]?\\\\.(?:inf|Inf|INF)' +\n// .nan\n'|\\\\.(?:nan|NaN|NAN))$');\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n  if (!YAML_FLOAT_PATTERN.test(data) ||\n  // Quick hack to not allow integers end with `_`\n  // Probably should update regexp & check speed\n  data[data.length - 1] === '_') {\n    return false;\n  }\n  return true;\n}\nfunction constructYamlFloat(data) {\n  var value, sign, base, digits;\n  value = data.replace(/_/g, '').toLowerCase();\n  sign = value[0] === '-' ? -1 : 1;\n  digits = [];\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n  if (value === '.inf') {\n    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n  } else if (value === '.nan') {\n    return NaN;\n  } else if (value.indexOf(':') >= 0) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseFloat(v, 10));\n    });\n    value = 0.0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n  return sign * parseFloat(value, 10);\n}\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\nfunction representYamlFloat(object, style) {\n  var res;\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase':\n        return '.nan';\n      case 'uppercase':\n        return '.NAN';\n      case 'camelcase':\n        return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '.inf';\n      case 'uppercase':\n        return '.INF';\n      case 'camelcase':\n        return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '-.inf';\n      case 'uppercase':\n        return '-.INF';\n      case 'camelcase':\n        return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n  res = object.toString(10);\n\n  // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\nfunction isFloat(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));\n}\nmodule.exports = new Type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/float.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/int.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/int.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar common = __webpack_require__(/*! ../common */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/common.js\");\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction isHexCode(c) {\n  return 0x30 /* 0 */ <= c && c <= 0x39 /* 9 */ || 0x41 /* A */ <= c && c <= 0x46 /* F */ || 0x61 /* a */ <= c && c <= 0x66 /* f */;\n}\n\nfunction isOctCode(c) {\n  return 0x30 /* 0 */ <= c && c <= 0x37 /* 7 */;\n}\n\nfunction isDecCode(c) {\n  return 0x30 /* 0 */ <= c && c <= 0x39 /* 9 */;\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n  var max = data.length,\n    index = 0,\n    hasDigits = false,\n    ch;\n  if (!max) return false;\n  ch = data[index];\n\n  // sign\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index];\n\n    // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n    if (ch === 'x') {\n      // base 16\n      index++;\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n      return hasDigits && ch !== '_';\n    }\n\n    // base 8\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') continue;\n      if (!isOctCode(data.charCodeAt(index))) return false;\n      hasDigits = true;\n    }\n    return hasDigits && ch !== '_';\n  }\n\n  // base 10 (except 0) or base 60\n\n  // value should not start with `_`;\n  if (ch === '_') return false;\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (ch === ':') break;\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n    hasDigits = true;\n  }\n\n  // Should have digits and should not end with `_`\n  if (!hasDigits || ch === '_') return false;\n\n  // if !base60 - done;\n  if (ch !== ':') return true;\n\n  // base60 almost not used, no needs to optimize\n  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\nfunction constructYamlInteger(data) {\n  var value = data,\n    sign = 1,\n    ch,\n    base,\n    digits = [];\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n  ch = value[0];\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n  if (value === '0') return 0;\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value, 16);\n    return sign * parseInt(value, 8);\n  }\n  if (value.indexOf(':') !== -1) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseInt(v, 10));\n    });\n    value = 0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n  return sign * parseInt(value, 10);\n}\nfunction isInteger(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);\n}\nmodule.exports = new Type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary: function (obj) {\n      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);\n    },\n    octal: function (obj) {\n      return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1);\n    },\n    decimal: function (obj) {\n      return obj.toString(10);\n    },\n    /* eslint-disable max-len */\n    hexadecimal: function (obj) {\n      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);\n    }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary: [2, 'bin'],\n    octal: [8, 'oct'],\n    decimal: [10, 'dec'],\n    hexadecimal: [16, 'hex']\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/int.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar esprima;\n\n// Browserified version does not have esprima\n//\n// 1. For node.js just require module as deps\n// 2. For browser try to require mudule via external AMD system.\n//    If not found - try to fallback to window.esprima. If not\n//    found too - then fail to parse.\n//\ntry {\n  // workaround to exclude package from browserify list.\n  var _require = undefined;\n  esprima = __webpack_require__(/*! esprima */ \"(rsc)/./node_modules/esprima/dist/esprima.js\");\n} catch (_) {\n  /* eslint-disable no-redeclare */\n  /* global window */\n  if (false) {}\n}\nvar Type = __webpack_require__(/*! ../../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveJavascriptFunction(data) {\n  if (data === null) return false;\n  try {\n    var source = '(' + data + ')',\n      ast = esprima.parse(source, {\n        range: true\n      });\n    if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n      return false;\n    }\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\nfunction constructJavascriptFunction(data) {\n  /*jslint evil:true*/\n\n  var source = '(' + data + ')',\n    ast = esprima.parse(source, {\n      range: true\n    }),\n    params = [],\n    body;\n  if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n    throw new Error('Failed to resolve function');\n  }\n  ast.body[0].expression.params.forEach(function (param) {\n    params.push(param.name);\n  });\n  body = ast.body[0].expression.body.range;\n\n  // Esprima's ranges include the first '{' and the last '}' characters on\n  // function expressions. So cut them out.\n  if (ast.body[0].expression.body.type === 'BlockStatement') {\n    /*eslint-disable no-new-func*/\n    return new Function(params, source.slice(body[0] + 1, body[1] - 1));\n  }\n  // ES6 arrow functions can omit the BlockStatement. In that case, just return\n  // the body.\n  /*eslint-disable no-new-func*/\n  return new Function(params, 'return ' + source.slice(body[0], body[1]));\n}\nfunction representJavascriptFunction(object /*, style*/) {\n  return object.toString();\n}\nfunction isFunction(object) {\n  return Object.prototype.toString.call(object) === '[object Function]';\n}\nmodule.exports = new Type('tag:yaml.org,2002:js/function', {\n  kind: 'scalar',\n  resolve: resolveJavascriptFunction,\n  construct: constructJavascriptFunction,\n  predicate: isFunction,\n  represent: representJavascriptFunction\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/function.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveJavascriptRegExp(data) {\n  if (data === null) return false;\n  if (data.length === 0) return false;\n  var regexp = data,\n    tail = /\\/([gim]*)$/.exec(data),\n    modifiers = '';\n\n  // if regexp starts with '/' it can have modifiers and must be properly closed\n  // `/foo/gim` - modifiers tail can be maximum 3 chars\n  if (regexp[0] === '/') {\n    if (tail) modifiers = tail[1];\n    if (modifiers.length > 3) return false;\n    // if expression starts with /, is should be properly terminated\n    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;\n  }\n  return true;\n}\nfunction constructJavascriptRegExp(data) {\n  var regexp = data,\n    tail = /\\/([gim]*)$/.exec(data),\n    modifiers = '';\n\n  // `/foo/gim` - tail can be maximum 4 chars\n  if (regexp[0] === '/') {\n    if (tail) modifiers = tail[1];\n    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);\n  }\n  return new RegExp(regexp, modifiers);\n}\nfunction representJavascriptRegExp(object /*, style*/) {\n  var result = '/' + object.source + '/';\n  if (object.global) result += 'g';\n  if (object.multiline) result += 'm';\n  if (object.ignoreCase) result += 'i';\n  return result;\n}\nfunction isRegExp(object) {\n  return Object.prototype.toString.call(object) === '[object RegExp]';\n}\nmodule.exports = new Type('tag:yaml.org,2002:js/regexp', {\n  kind: 'scalar',\n  resolve: resolveJavascriptRegExp,\n  construct: constructJavascriptRegExp,\n  predicate: isRegExp,\n  represent: representJavascriptRegExp\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9qcy9yZWdleHAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDZGQUFZLENBQUM7QUFFaEMsU0FBU0MsdUJBQXVCQSxDQUFDQyxJQUFJLEVBQUU7RUFDckMsSUFBSUEsSUFBSSxLQUFLLElBQUksRUFBRSxPQUFPLEtBQUs7RUFDL0IsSUFBSUEsSUFBSSxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFLE9BQU8sS0FBSztFQUVuQyxJQUFJQyxNQUFNLEdBQUdGLElBQUk7SUFDYkcsSUFBSSxHQUFLLGFBQWEsQ0FBQ0MsSUFBSSxDQUFDSixJQUFJLENBQUM7SUFDakNLLFNBQVMsR0FBRyxFQUFFOztFQUVsQjtFQUNBO0VBQ0EsSUFBSUgsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtJQUNyQixJQUFJQyxJQUFJLEVBQUVFLFNBQVMsR0FBR0YsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUU3QixJQUFJRSxTQUFTLENBQUNKLE1BQU0sR0FBRyxDQUFDLEVBQUUsT0FBTyxLQUFLO0lBQ3RDO0lBQ0EsSUFBSUMsTUFBTSxDQUFDQSxNQUFNLENBQUNELE1BQU0sR0FBR0ksU0FBUyxDQUFDSixNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFLE9BQU8sS0FBSztFQUN4RTtFQUVBLE9BQU8sSUFBSTtBQUNiO0FBRUEsU0FBU0sseUJBQXlCQSxDQUFDTixJQUFJLEVBQUU7RUFDdkMsSUFBSUUsTUFBTSxHQUFHRixJQUFJO0lBQ2JHLElBQUksR0FBSyxhQUFhLENBQUNDLElBQUksQ0FBQ0osSUFBSSxDQUFDO0lBQ2pDSyxTQUFTLEdBQUcsRUFBRTs7RUFFbEI7RUFDQSxJQUFJSCxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxFQUFFO0lBQ3JCLElBQUlDLElBQUksRUFBRUUsU0FBUyxHQUFHRixJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzdCRCxNQUFNLEdBQUdBLE1BQU0sQ0FBQ0ssS0FBSyxDQUFDLENBQUMsRUFBRUwsTUFBTSxDQUFDRCxNQUFNLEdBQUdJLFNBQVMsQ0FBQ0osTUFBTSxHQUFHLENBQUMsQ0FBQztFQUNoRTtFQUVBLE9BQU8sSUFBSU8sTUFBTSxDQUFDTixNQUFNLEVBQUVHLFNBQVMsQ0FBQztBQUN0QztBQUVBLFNBQVNJLHlCQUF5QkEsQ0FBQ0MsTUFBTSxDQUFDLGFBQWE7RUFDckQsSUFBSUMsTUFBTSxHQUFHLEdBQUcsR0FBR0QsTUFBTSxDQUFDRSxNQUFNLEdBQUcsR0FBRztFQUV0QyxJQUFJRixNQUFNLENBQUNHLE1BQU0sRUFBRUYsTUFBTSxJQUFJLEdBQUc7RUFDaEMsSUFBSUQsTUFBTSxDQUFDSSxTQUFTLEVBQUVILE1BQU0sSUFBSSxHQUFHO0VBQ25DLElBQUlELE1BQU0sQ0FBQ0ssVUFBVSxFQUFFSixNQUFNLElBQUksR0FBRztFQUVwQyxPQUFPQSxNQUFNO0FBQ2Y7QUFFQSxTQUFTSyxRQUFRQSxDQUFDTixNQUFNLEVBQUU7RUFDeEIsT0FBT08sTUFBTSxDQUFDQyxTQUFTLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDVixNQUFNLENBQUMsS0FBSyxpQkFBaUI7QUFDckU7QUFFQVcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsSUFBSXpCLElBQUksQ0FBQyw2QkFBNkIsRUFBRTtFQUN2RDBCLElBQUksRUFBRSxRQUFRO0VBQ2RDLE9BQU8sRUFBRXpCLHVCQUF1QjtFQUNoQzBCLFNBQVMsRUFBRW5CLHlCQUF5QjtFQUNwQ29CLFNBQVMsRUFBRVYsUUFBUTtFQUNuQlcsU0FBUyxFQUFFbEI7QUFDYixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nX3BkaS8uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2pzL3JlZ2V4cC5qcz8zZTU0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi8uLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVKYXZhc2NyaXB0UmVnRXhwKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG5cbiAgdmFyIHJlZ2V4cCA9IGRhdGEsXG4gICAgICB0YWlsICAgPSAvXFwvKFtnaW1dKikkLy5leGVjKGRhdGEpLFxuICAgICAgbW9kaWZpZXJzID0gJyc7XG5cbiAgLy8gaWYgcmVnZXhwIHN0YXJ0cyB3aXRoICcvJyBpdCBjYW4gaGF2ZSBtb2RpZmllcnMgYW5kIG11c3QgYmUgcHJvcGVybHkgY2xvc2VkXG4gIC8vIGAvZm9vL2dpbWAgLSBtb2RpZmllcnMgdGFpbCBjYW4gYmUgbWF4aW11bSAzIGNoYXJzXG4gIGlmIChyZWdleHBbMF0gPT09ICcvJykge1xuICAgIGlmICh0YWlsKSBtb2RpZmllcnMgPSB0YWlsWzFdO1xuXG4gICAgaWYgKG1vZGlmaWVycy5sZW5ndGggPiAzKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gaWYgZXhwcmVzc2lvbiBzdGFydHMgd2l0aCAvLCBpcyBzaG91bGQgYmUgcHJvcGVybHkgdGVybWluYXRlZFxuICAgIGlmIChyZWdleHBbcmVnZXhwLmxlbmd0aCAtIG1vZGlmaWVycy5sZW5ndGggLSAxXSAhPT0gJy8nKSByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0SmF2YXNjcmlwdFJlZ0V4cChkYXRhKSB7XG4gIHZhciByZWdleHAgPSBkYXRhLFxuICAgICAgdGFpbCAgID0gL1xcLyhbZ2ltXSopJC8uZXhlYyhkYXRhKSxcbiAgICAgIG1vZGlmaWVycyA9ICcnO1xuXG4gIC8vIGAvZm9vL2dpbWAgLSB0YWlsIGNhbiBiZSBtYXhpbXVtIDQgY2hhcnNcbiAgaWYgKHJlZ2V4cFswXSA9PT0gJy8nKSB7XG4gICAgaWYgKHRhaWwpIG1vZGlmaWVycyA9IHRhaWxbMV07XG4gICAgcmVnZXhwID0gcmVnZXhwLnNsaWNlKDEsIHJlZ2V4cC5sZW5ndGggLSBtb2RpZmllcnMubGVuZ3RoIC0gMSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cChyZWdleHAsIG1vZGlmaWVycyk7XG59XG5cbmZ1bmN0aW9uIHJlcHJlc2VudEphdmFzY3JpcHRSZWdFeHAob2JqZWN0IC8qLCBzdHlsZSovKSB7XG4gIHZhciByZXN1bHQgPSAnLycgKyBvYmplY3Quc291cmNlICsgJy8nO1xuXG4gIGlmIChvYmplY3QuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAob2JqZWN0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKG9iamVjdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGlzUmVnRXhwKG9iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IFJlZ0V4cF0nO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpqcy9yZWdleHAnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlSmF2YXNjcmlwdFJlZ0V4cCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RKYXZhc2NyaXB0UmVnRXhwLFxuICBwcmVkaWNhdGU6IGlzUmVnRXhwLFxuICByZXByZXNlbnQ6IHJlcHJlc2VudEphdmFzY3JpcHRSZWdFeHBcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwicmVzb2x2ZUphdmFzY3JpcHRSZWdFeHAiLCJkYXRhIiwibGVuZ3RoIiwicmVnZXhwIiwidGFpbCIsImV4ZWMiLCJtb2RpZmllcnMiLCJjb25zdHJ1Y3RKYXZhc2NyaXB0UmVnRXhwIiwic2xpY2UiLCJSZWdFeHAiLCJyZXByZXNlbnRKYXZhc2NyaXB0UmVnRXhwIiwib2JqZWN0IiwicmVzdWx0Iiwic291cmNlIiwiZ2xvYmFsIiwibXVsdGlsaW5lIiwiaWdub3JlQ2FzZSIsImlzUmVnRXhwIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0IiwicHJlZGljYXRlIiwicmVwcmVzZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/regexp.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveJavascriptUndefined() {\n  return true;\n}\nfunction constructJavascriptUndefined() {\n  /*eslint-disable no-undefined*/\n  return undefined;\n}\nfunction representJavascriptUndefined() {\n  return '';\n}\nfunction isUndefined(object) {\n  return typeof object === 'undefined';\n}\nmodule.exports = new Type('tag:yaml.org,2002:js/undefined', {\n  kind: 'scalar',\n  resolve: resolveJavascriptUndefined,\n  construct: constructJavascriptUndefined,\n  predicate: isUndefined,\n  represent: representJavascriptUndefined\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9qcy91bmRlZmluZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDZGQUFZLENBQUM7QUFFaEMsU0FBU0MsMEJBQTBCQSxDQUFBLEVBQUc7RUFDcEMsT0FBTyxJQUFJO0FBQ2I7QUFFQSxTQUFTQyw0QkFBNEJBLENBQUEsRUFBRztFQUN0QztFQUNBLE9BQU9DLFNBQVM7QUFDbEI7QUFFQSxTQUFTQyw0QkFBNEJBLENBQUEsRUFBRztFQUN0QyxPQUFPLEVBQUU7QUFDWDtBQUVBLFNBQVNDLFdBQVdBLENBQUNDLE1BQU0sRUFBRTtFQUMzQixPQUFPLE9BQU9BLE1BQU0sS0FBSyxXQUFXO0FBQ3RDO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLElBQUlULElBQUksQ0FBQyxnQ0FBZ0MsRUFBRTtFQUMxRFUsSUFBSSxFQUFFLFFBQVE7RUFDZEMsT0FBTyxFQUFFVCwwQkFBMEI7RUFDbkNVLFNBQVMsRUFBRVQsNEJBQTRCO0VBQ3ZDVSxTQUFTLEVBQUVQLFdBQVc7RUFDdEJRLFNBQVMsRUFBRVQ7QUFDYixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nX3BkaS8uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL2pzL3VuZGVmaW5lZC5qcz9lYjQ2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi8uLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVKYXZhc2NyaXB0VW5kZWZpbmVkKCkge1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0SmF2YXNjcmlwdFVuZGVmaW5lZCgpIHtcbiAgLyplc2xpbnQtZGlzYWJsZSBuby11bmRlZmluZWQqL1xuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiByZXByZXNlbnRKYXZhc2NyaXB0VW5kZWZpbmVkKCkge1xuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGlzVW5kZWZpbmVkKG9iamVjdCkge1xuICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOmpzL3VuZGVmaW5lZCcsIHtcbiAga2luZDogJ3NjYWxhcicsXG4gIHJlc29sdmU6IHJlc29sdmVKYXZhc2NyaXB0VW5kZWZpbmVkLFxuICBjb25zdHJ1Y3Q6IGNvbnN0cnVjdEphdmFzY3JpcHRVbmRlZmluZWQsXG4gIHByZWRpY2F0ZTogaXNVbmRlZmluZWQsXG4gIHJlcHJlc2VudDogcmVwcmVzZW50SmF2YXNjcmlwdFVuZGVmaW5lZFxufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJyZXNvbHZlSmF2YXNjcmlwdFVuZGVmaW5lZCIsImNvbnN0cnVjdEphdmFzY3JpcHRVbmRlZmluZWQiLCJ1bmRlZmluZWQiLCJyZXByZXNlbnRKYXZhc2NyaXB0VW5kZWZpbmVkIiwiaXNVbmRlZmluZWQiLCJvYmplY3QiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiLCJwcmVkaWNhdGUiLCJyZXByZXNlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/js/undefined.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/map.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/map.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nmodule.exports = new Type('tag:yaml.org,2002:map', {\n  kind: 'mapping',\n  construct: function (data) {\n    return data !== null ? data : {};\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9tYXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDBGQUFTLENBQUM7QUFFN0JDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLElBQUlILElBQUksQ0FBQyx1QkFBdUIsRUFBRTtFQUNqREksSUFBSSxFQUFFLFNBQVM7RUFDZkMsU0FBUyxFQUFFLFNBQUFBLENBQVVDLElBQUksRUFBRTtJQUFFLE9BQU9BLElBQUksS0FBSyxJQUFJLEdBQUdBLElBQUksR0FBRyxDQUFDLENBQUM7RUFBRTtBQUNqRSxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nX3BkaS8uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL21hcC5qcz8yOTI5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm1hcCcsIHtcbiAga2luZDogJ21hcHBpbmcnLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IHt9OyB9XG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwiY29uc3RydWN0IiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/map.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\nmodule.exports = new Type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9tZXJnZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMEZBQVMsQ0FBQztBQUU3QixTQUFTQyxnQkFBZ0JBLENBQUNDLElBQUksRUFBRTtFQUM5QixPQUFPQSxJQUFJLEtBQUssSUFBSSxJQUFJQSxJQUFJLEtBQUssSUFBSTtBQUN2QztBQUVBQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxJQUFJTCxJQUFJLENBQUMseUJBQXlCLEVBQUU7RUFDbkRNLElBQUksRUFBRSxRQUFRO0VBQ2RDLE9BQU8sRUFBRUw7QUFDWCxDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nX3BkaS8uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL21lcmdlLmpzP2UxMDYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxNZXJnZShkYXRhKSB7XG4gIHJldHVybiBkYXRhID09PSAnPDwnIHx8IGRhdGEgPT09IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm1lcmdlJywge1xuICBraW5kOiAnc2NhbGFyJyxcbiAgcmVzb2x2ZTogcmVzb2x2ZVlhbWxNZXJnZVxufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJyZXNvbHZlWWFtbE1lcmdlIiwiZGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/merge.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/null.js":
/*!********************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/null.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n  var max = data.length;\n  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');\n}\nfunction constructYamlNull() {\n  return null;\n}\nfunction isNull(object) {\n  return object === null;\n}\nmodule.exports = new Type('tag:yaml.org,2002:null', {\n  kind: 'scalar',\n  resolve: resolveYamlNull,\n  construct: constructYamlNull,\n  predicate: isNull,\n  represent: {\n    canonical: function () {\n      return '~';\n    },\n    lowercase: function () {\n      return 'null';\n    },\n    uppercase: function () {\n      return 'NULL';\n    },\n    camelcase: function () {\n      return 'Null';\n    }\n  },\n  defaultStyle: 'lowercase'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9udWxsLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQywwRkFBUyxDQUFDO0FBRTdCLFNBQVNDLGVBQWVBLENBQUNDLElBQUksRUFBRTtFQUM3QixJQUFJQSxJQUFJLEtBQUssSUFBSSxFQUFFLE9BQU8sSUFBSTtFQUU5QixJQUFJQyxHQUFHLEdBQUdELElBQUksQ0FBQ0UsTUFBTTtFQUVyQixPQUFRRCxHQUFHLEtBQUssQ0FBQyxJQUFJRCxJQUFJLEtBQUssR0FBRyxJQUN6QkMsR0FBRyxLQUFLLENBQUMsS0FBS0QsSUFBSSxLQUFLLE1BQU0sSUFBSUEsSUFBSSxLQUFLLE1BQU0sSUFBSUEsSUFBSSxLQUFLLE1BQU0sQ0FBRTtBQUMvRTtBQUVBLFNBQVNHLGlCQUFpQkEsQ0FBQSxFQUFHO0VBQzNCLE9BQU8sSUFBSTtBQUNiO0FBRUEsU0FBU0MsTUFBTUEsQ0FBQ0MsTUFBTSxFQUFFO0VBQ3RCLE9BQU9BLE1BQU0sS0FBSyxJQUFJO0FBQ3hCO0FBRUFDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLElBQUlWLElBQUksQ0FBQyx3QkFBd0IsRUFBRTtFQUNsRFcsSUFBSSxFQUFFLFFBQVE7RUFDZEMsT0FBTyxFQUFFVixlQUFlO0VBQ3hCVyxTQUFTLEVBQUVQLGlCQUFpQjtFQUM1QlEsU0FBUyxFQUFFUCxNQUFNO0VBQ2pCUSxTQUFTLEVBQUU7SUFDVEMsU0FBUyxFQUFFLFNBQUFBLENBQUEsRUFBWTtNQUFFLE9BQU8sR0FBRztJQUFLLENBQUM7SUFDekNDLFNBQVMsRUFBRSxTQUFBQSxDQUFBLEVBQVk7TUFBRSxPQUFPLE1BQU07SUFBRSxDQUFDO0lBQ3pDQyxTQUFTLEVBQUUsU0FBQUEsQ0FBQSxFQUFZO01BQUUsT0FBTyxNQUFNO0lBQUUsQ0FBQztJQUN6Q0MsU0FBUyxFQUFFLFNBQUFBLENBQUEsRUFBWTtNQUFFLE9BQU8sTUFBTTtJQUFFO0VBQzFDLENBQUM7RUFDREMsWUFBWSxFQUFFO0FBQ2hCLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2dfcGRpLy4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvbnVsbC5qcz9jMThjIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVZYW1sTnVsbChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIgbWF4ID0gZGF0YS5sZW5ndGg7XG5cbiAgcmV0dXJuIChtYXggPT09IDEgJiYgZGF0YSA9PT0gJ34nKSB8fFxuICAgICAgICAgKG1heCA9PT0gNCAmJiAoZGF0YSA9PT0gJ251bGwnIHx8IGRhdGEgPT09ICdOdWxsJyB8fCBkYXRhID09PSAnTlVMTCcpKTtcbn1cblxuZnVuY3Rpb24gY29uc3RydWN0WWFtbE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBpc051bGwob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT09IG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm51bGwnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbE51bGwsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbE51bGwsXG4gIHByZWRpY2F0ZTogaXNOdWxsLFxuICByZXByZXNlbnQ6IHtcbiAgICBjYW5vbmljYWw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICd+JzsgICAgfSxcbiAgICBsb3dlcmNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdudWxsJzsgfSxcbiAgICB1cHBlcmNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdOVUxMJzsgfSxcbiAgICBjYW1lbGNhc2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICdOdWxsJzsgfVxuICB9LFxuICBkZWZhdWx0U3R5bGU6ICdsb3dlcmNhc2UnXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsInJlc29sdmVZYW1sTnVsbCIsImRhdGEiLCJtYXgiLCJsZW5ndGgiLCJjb25zdHJ1Y3RZYW1sTnVsbCIsImlzTnVsbCIsIm9iamVjdCIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCIsInByZWRpY2F0ZSIsInJlcHJlc2VudCIsImNhbm9uaWNhbCIsImxvd2VyY2FzZSIsInVwcGVyY2FzZSIsImNhbWVsY2FzZSIsImRlZmF1bHRTdHlsZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/null.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js":
/*!********************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar _toString = Object.prototype.toString;\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n  var objectKeys = [],\n    index,\n    length,\n    pair,\n    pairKey,\n    pairHasKey,\n    object = data;\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n    if (_toString.call(pair) !== '[object Object]') return false;\n    for (pairKey in pair) {\n      if (_hasOwnProperty.call(pair, pairKey)) {\n        if (!pairHasKey) pairHasKey = true;else return false;\n      }\n    }\n    if (!pairHasKey) return false;\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;\n  }\n  return true;\n}\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\nmodule.exports = new Type('tag:yaml.org,2002:omap', {\n  kind: 'sequence',\n  resolve: resolveYamlOmap,\n  construct: constructYamlOmap\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9vbWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLElBQUlBLElBQUksR0FBR0MsbUJBQU8sQ0FBQywwRkFBUyxDQUFDO0FBRTdCLElBQUlDLGVBQWUsR0FBR0MsTUFBTSxDQUFDQyxTQUFTLENBQUNDLGNBQWM7QUFDckQsSUFBSUMsU0FBUyxHQUFTSCxNQUFNLENBQUNDLFNBQVMsQ0FBQ0csUUFBUTtBQUUvQyxTQUFTQyxlQUFlQSxDQUFDQyxJQUFJLEVBQUU7RUFDN0IsSUFBSUEsSUFBSSxLQUFLLElBQUksRUFBRSxPQUFPLElBQUk7RUFFOUIsSUFBSUMsVUFBVSxHQUFHLEVBQUU7SUFBRUMsS0FBSztJQUFFQyxNQUFNO0lBQUVDLElBQUk7SUFBRUMsT0FBTztJQUFFQyxVQUFVO0lBQ3pEQyxNQUFNLEdBQUdQLElBQUk7RUFFakIsS0FBS0UsS0FBSyxHQUFHLENBQUMsRUFBRUMsTUFBTSxHQUFHSSxNQUFNLENBQUNKLE1BQU0sRUFBRUQsS0FBSyxHQUFHQyxNQUFNLEVBQUVELEtBQUssSUFBSSxDQUFDLEVBQUU7SUFDbEVFLElBQUksR0FBR0csTUFBTSxDQUFDTCxLQUFLLENBQUM7SUFDcEJJLFVBQVUsR0FBRyxLQUFLO0lBRWxCLElBQUlULFNBQVMsQ0FBQ1csSUFBSSxDQUFDSixJQUFJLENBQUMsS0FBSyxpQkFBaUIsRUFBRSxPQUFPLEtBQUs7SUFFNUQsS0FBS0MsT0FBTyxJQUFJRCxJQUFJLEVBQUU7TUFDcEIsSUFBSVgsZUFBZSxDQUFDZSxJQUFJLENBQUNKLElBQUksRUFBRUMsT0FBTyxDQUFDLEVBQUU7UUFDdkMsSUFBSSxDQUFDQyxVQUFVLEVBQUVBLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FDOUIsT0FBTyxLQUFLO01BQ25CO0lBQ0Y7SUFFQSxJQUFJLENBQUNBLFVBQVUsRUFBRSxPQUFPLEtBQUs7SUFFN0IsSUFBSUwsVUFBVSxDQUFDUSxPQUFPLENBQUNKLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFSixVQUFVLENBQUNTLElBQUksQ0FBQ0wsT0FBTyxDQUFDLENBQUMsS0FDNUQsT0FBTyxLQUFLO0VBQ25CO0VBRUEsT0FBTyxJQUFJO0FBQ2I7QUFFQSxTQUFTTSxpQkFBaUJBLENBQUNYLElBQUksRUFBRTtFQUMvQixPQUFPQSxJQUFJLEtBQUssSUFBSSxHQUFHQSxJQUFJLEdBQUcsRUFBRTtBQUNsQztBQUVBWSxNQUFNLENBQUNDLE9BQU8sR0FBRyxJQUFJdEIsSUFBSSxDQUFDLHdCQUF3QixFQUFFO0VBQ2xEdUIsSUFBSSxFQUFFLFVBQVU7RUFDaEJDLE9BQU8sRUFBRWhCLGVBQWU7RUFDeEJpQixTQUFTLEVBQUVMO0FBQ2IsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9vbWFwLmpzP2RkMjAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxudmFyIF9oYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgX3RvU3RyaW5nICAgICAgID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gcmVzb2x2ZVlhbWxPbWFwKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBvYmplY3RLZXlzID0gW10sIGluZGV4LCBsZW5ndGgsIHBhaXIsIHBhaXJLZXksIHBhaXJIYXNLZXksXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXIgPSBvYmplY3RbaW5kZXhdO1xuICAgIHBhaXJIYXNLZXkgPSBmYWxzZTtcblxuICAgIGlmIChfdG9TdHJpbmcuY2FsbChwYWlyKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAocGFpcktleSBpbiBwYWlyKSB7XG4gICAgICBpZiAoX2hhc093blByb3BlcnR5LmNhbGwocGFpciwgcGFpcktleSkpIHtcbiAgICAgICAgaWYgKCFwYWlySGFzS2V5KSBwYWlySGFzS2V5ID0gdHJ1ZTtcbiAgICAgICAgZWxzZSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFwYWlySGFzS2V5KSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob2JqZWN0S2V5cy5pbmRleE9mKHBhaXJLZXkpID09PSAtMSkgb2JqZWN0S2V5cy5wdXNoKHBhaXJLZXkpO1xuICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxPbWFwKGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDogW107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOm9tYXAnLCB7XG4gIGtpbmQ6ICdzZXF1ZW5jZScsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sT21hcCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sT21hcFxufSk7XG4iXSwibmFtZXMiOlsiVHlwZSIsInJlcXVpcmUiLCJfaGFzT3duUHJvcGVydHkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl90b1N0cmluZyIsInRvU3RyaW5nIiwicmVzb2x2ZVlhbWxPbWFwIiwiZGF0YSIsIm9iamVjdEtleXMiLCJpbmRleCIsImxlbmd0aCIsInBhaXIiLCJwYWlyS2V5IiwicGFpckhhc0tleSIsIm9iamVjdCIsImNhbGwiLCJpbmRleE9mIiwicHVzaCIsImNvbnN0cnVjdFlhbWxPbWFwIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/omap.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nvar _toString = Object.prototype.toString;\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n  var index,\n    length,\n    pair,\n    keys,\n    result,\n    object = data;\n  result = new Array(object.length);\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    if (_toString.call(pair) !== '[object Object]') return false;\n    keys = Object.keys(pair);\n    if (keys.length !== 1) return false;\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n  return true;\n}\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n  var index,\n    length,\n    pair,\n    keys,\n    result,\n    object = data;\n  result = new Array(object.length);\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    keys = Object.keys(pair);\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n  return result;\n}\nmodule.exports = new Type('tag:yaml.org,2002:pairs', {\n  kind: 'sequence',\n  resolve: resolveYamlPairs,\n  construct: constructYamlPairs\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9wYWlycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxJQUFJLEdBQUdDLG1CQUFPLENBQUMsMEZBQVMsQ0FBQztBQUU3QixJQUFJQyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsU0FBUyxDQUFDQyxRQUFRO0FBRXpDLFNBQVNDLGdCQUFnQkEsQ0FBQ0MsSUFBSSxFQUFFO0VBQzlCLElBQUlBLElBQUksS0FBSyxJQUFJLEVBQUUsT0FBTyxJQUFJO0VBRTlCLElBQUlDLEtBQUs7SUFBRUMsTUFBTTtJQUFFQyxJQUFJO0lBQUVDLElBQUk7SUFBRUMsTUFBTTtJQUNqQ0MsTUFBTSxHQUFHTixJQUFJO0VBRWpCSyxNQUFNLEdBQUcsSUFBSUUsS0FBSyxDQUFDRCxNQUFNLENBQUNKLE1BQU0sQ0FBQztFQUVqQyxLQUFLRCxLQUFLLEdBQUcsQ0FBQyxFQUFFQyxNQUFNLEdBQUdJLE1BQU0sQ0FBQ0osTUFBTSxFQUFFRCxLQUFLLEdBQUdDLE1BQU0sRUFBRUQsS0FBSyxJQUFJLENBQUMsRUFBRTtJQUNsRUUsSUFBSSxHQUFHRyxNQUFNLENBQUNMLEtBQUssQ0FBQztJQUVwQixJQUFJTixTQUFTLENBQUNhLElBQUksQ0FBQ0wsSUFBSSxDQUFDLEtBQUssaUJBQWlCLEVBQUUsT0FBTyxLQUFLO0lBRTVEQyxJQUFJLEdBQUdSLE1BQU0sQ0FBQ1EsSUFBSSxDQUFDRCxJQUFJLENBQUM7SUFFeEIsSUFBSUMsSUFBSSxDQUFDRixNQUFNLEtBQUssQ0FBQyxFQUFFLE9BQU8sS0FBSztJQUVuQ0csTUFBTSxDQUFDSixLQUFLLENBQUMsR0FBRyxDQUFFRyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUVELElBQUksQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUU7RUFDNUM7RUFFQSxPQUFPLElBQUk7QUFDYjtBQUVBLFNBQVNLLGtCQUFrQkEsQ0FBQ1QsSUFBSSxFQUFFO0VBQ2hDLElBQUlBLElBQUksS0FBSyxJQUFJLEVBQUUsT0FBTyxFQUFFO0VBRTVCLElBQUlDLEtBQUs7SUFBRUMsTUFBTTtJQUFFQyxJQUFJO0lBQUVDLElBQUk7SUFBRUMsTUFBTTtJQUNqQ0MsTUFBTSxHQUFHTixJQUFJO0VBRWpCSyxNQUFNLEdBQUcsSUFBSUUsS0FBSyxDQUFDRCxNQUFNLENBQUNKLE1BQU0sQ0FBQztFQUVqQyxLQUFLRCxLQUFLLEdBQUcsQ0FBQyxFQUFFQyxNQUFNLEdBQUdJLE1BQU0sQ0FBQ0osTUFBTSxFQUFFRCxLQUFLLEdBQUdDLE1BQU0sRUFBRUQsS0FBSyxJQUFJLENBQUMsRUFBRTtJQUNsRUUsSUFBSSxHQUFHRyxNQUFNLENBQUNMLEtBQUssQ0FBQztJQUVwQkcsSUFBSSxHQUFHUixNQUFNLENBQUNRLElBQUksQ0FBQ0QsSUFBSSxDQUFDO0lBRXhCRSxNQUFNLENBQUNKLEtBQUssQ0FBQyxHQUFHLENBQUVHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRUQsSUFBSSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRTtFQUM1QztFQUVBLE9BQU9DLE1BQU07QUFDZjtBQUVBSyxNQUFNLENBQUNDLE9BQU8sR0FBRyxJQUFJbEIsSUFBSSxDQUFDLHlCQUF5QixFQUFFO0VBQ25EbUIsSUFBSSxFQUFFLFVBQVU7RUFDaEJDLE9BQU8sRUFBRWQsZ0JBQWdCO0VBQ3pCZSxTQUFTLEVBQUVMO0FBQ2IsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9wYWlycy5qcz9iYTM4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbnZhciBfdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbFBhaXJzKGRhdGEpIHtcbiAgaWYgKGRhdGEgPT09IG51bGwpIHJldHVybiB0cnVlO1xuXG4gIHZhciBpbmRleCwgbGVuZ3RoLCBwYWlyLCBrZXlzLCByZXN1bHQsXG4gICAgICBvYmplY3QgPSBkYXRhO1xuXG4gIHJlc3VsdCA9IG5ldyBBcnJheShvYmplY3QubGVuZ3RoKTtcblxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gb2JqZWN0Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICBwYWlyID0gb2JqZWN0W2luZGV4XTtcblxuICAgIGlmIChfdG9TdHJpbmcuY2FsbChwYWlyKSAhPT0gJ1tvYmplY3QgT2JqZWN0XScpIHJldHVybiBmYWxzZTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhwYWlyKTtcblxuICAgIGlmIChrZXlzLmxlbmd0aCAhPT0gMSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmVzdWx0W2luZGV4XSA9IFsga2V5c1swXSwgcGFpcltrZXlzWzBdXSBdO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxQYWlycyhkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gW107XG5cbiAgdmFyIGluZGV4LCBsZW5ndGgsIHBhaXIsIGtleXMsIHJlc3VsdCxcbiAgICAgIG9iamVjdCA9IGRhdGE7XG5cbiAgcmVzdWx0ID0gbmV3IEFycmF5KG9iamVjdC5sZW5ndGgpO1xuXG4gIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSBvYmplY3QubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXggKz0gMSkge1xuICAgIHBhaXIgPSBvYmplY3RbaW5kZXhdO1xuXG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHBhaXIpO1xuXG4gICAgcmVzdWx0W2luZGV4XSA9IFsga2V5c1swXSwgcGFpcltrZXlzWzBdXSBdO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6cGFpcnMnLCB7XG4gIGtpbmQ6ICdzZXF1ZW5jZScsXG4gIHJlc29sdmU6IHJlc29sdmVZYW1sUGFpcnMsXG4gIGNvbnN0cnVjdDogY29uc3RydWN0WWFtbFBhaXJzXG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIl90b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwicmVzb2x2ZVlhbWxQYWlycyIsImRhdGEiLCJpbmRleCIsImxlbmd0aCIsInBhaXIiLCJrZXlzIiwicmVzdWx0Iiwib2JqZWN0IiwiQXJyYXkiLCJjYWxsIiwiY29uc3RydWN0WWFtbFBhaXJzIiwibW9kdWxlIiwiZXhwb3J0cyIsImtpbmQiLCJyZXNvbHZlIiwiY29uc3RydWN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/pairs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nmodule.exports = new Type('tag:yaml.org,2002:seq', {\n  kind: 'sequence',\n  construct: function (data) {\n    return data !== null ? data : [];\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zZXEuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDBGQUFTLENBQUM7QUFFN0JDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLElBQUlILElBQUksQ0FBQyx1QkFBdUIsRUFBRTtFQUNqREksSUFBSSxFQUFFLFVBQVU7RUFDaEJDLFNBQVMsRUFBRSxTQUFBQSxDQUFVQyxJQUFJLEVBQUU7SUFBRSxPQUFPQSxJQUFJLEtBQUssSUFBSSxHQUFHQSxJQUFJLEdBQUcsRUFBRTtFQUFFO0FBQ2pFLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2dfcGRpLy4vbm9kZV9tb2R1bGVzL2dyYXktbWF0dGVyL25vZGVfbW9kdWxlcy9qcy15YW1sL2xpYi9qcy15YW1sL3R5cGUvc2VxLmpzP2Y1MzciXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgVHlwZSA9IHJlcXVpcmUoJy4uL3R5cGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBuZXcgVHlwZSgndGFnOnlhbWwub3JnLDIwMDI6c2VxJywge1xuICBraW5kOiAnc2VxdWVuY2UnLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6IFtdOyB9XG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwiY29uc3RydWN0IiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/seq.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/set.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/set.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n  var key,\n    object = data;\n  for (key in object) {\n    if (_hasOwnProperty.call(object, key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n  return true;\n}\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\nmodule.exports = new Type('tag:yaml.org,2002:set', {\n  kind: 'mapping',\n  resolve: resolveYamlSet,\n  construct: constructYamlSet\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zZXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDBGQUFTLENBQUM7QUFFN0IsSUFBSUMsZUFBZSxHQUFHQyxNQUFNLENBQUNDLFNBQVMsQ0FBQ0MsY0FBYztBQUVyRCxTQUFTQyxjQUFjQSxDQUFDQyxJQUFJLEVBQUU7RUFDNUIsSUFBSUEsSUFBSSxLQUFLLElBQUksRUFBRSxPQUFPLElBQUk7RUFFOUIsSUFBSUMsR0FBRztJQUFFQyxNQUFNLEdBQUdGLElBQUk7RUFFdEIsS0FBS0MsR0FBRyxJQUFJQyxNQUFNLEVBQUU7SUFDbEIsSUFBSVAsZUFBZSxDQUFDUSxJQUFJLENBQUNELE1BQU0sRUFBRUQsR0FBRyxDQUFDLEVBQUU7TUFDckMsSUFBSUMsTUFBTSxDQUFDRCxHQUFHLENBQUMsS0FBSyxJQUFJLEVBQUUsT0FBTyxLQUFLO0lBQ3hDO0VBQ0Y7RUFFQSxPQUFPLElBQUk7QUFDYjtBQUVBLFNBQVNHLGdCQUFnQkEsQ0FBQ0osSUFBSSxFQUFFO0VBQzlCLE9BQU9BLElBQUksS0FBSyxJQUFJLEdBQUdBLElBQUksR0FBRyxDQUFDLENBQUM7QUFDbEM7QUFFQUssTUFBTSxDQUFDQyxPQUFPLEdBQUcsSUFBSWIsSUFBSSxDQUFDLHVCQUF1QixFQUFFO0VBQ2pEYyxJQUFJLEVBQUUsU0FBUztFQUNmQyxPQUFPLEVBQUVULGNBQWM7RUFDdkJVLFNBQVMsRUFBRUw7QUFDYixDQUFDLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nX3BkaS8uL25vZGVfbW9kdWxlcy9ncmF5LW1hdHRlci9ub2RlX21vZHVsZXMvanMteWFtbC9saWIvanMteWFtbC90eXBlL3NldC5qcz8xMWRiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFR5cGUgPSByZXF1aXJlKCcuLi90eXBlJyk7XG5cbnZhciBfaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5mdW5jdGlvbiByZXNvbHZlWWFtbFNldChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcblxuICB2YXIga2V5LCBvYmplY3QgPSBkYXRhO1xuXG4gIGZvciAoa2V5IGluIG9iamVjdCkge1xuICAgIGlmIChfaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgIGlmIChvYmplY3Rba2V5XSAhPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RZYW1sU2V0KGRhdGEpIHtcbiAgcmV0dXJuIGRhdGEgIT09IG51bGwgPyBkYXRhIDoge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbmV3IFR5cGUoJ3RhZzp5YW1sLm9yZywyMDAyOnNldCcsIHtcbiAga2luZDogJ21hcHBpbmcnLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFNldCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sU2V0XG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIl9oYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicmVzb2x2ZVlhbWxTZXQiLCJkYXRhIiwia2V5Iiwib2JqZWN0IiwiY2FsbCIsImNvbnN0cnVjdFlhbWxTZXQiLCJtb2R1bGUiLCJleHBvcnRzIiwia2luZCIsInJlc29sdmUiLCJjb25zdHJ1Y3QiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/set.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/str.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/str.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nmodule.exports = new Type('tag:yaml.org,2002:str', {\n  kind: 'scalar',\n  construct: function (data) {\n    return data !== null ? data : '';\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zdHIuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDBGQUFTLENBQUM7QUFFN0JDLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLElBQUlILElBQUksQ0FBQyx1QkFBdUIsRUFBRTtFQUNqREksSUFBSSxFQUFFLFFBQVE7RUFDZEMsU0FBUyxFQUFFLFNBQUFBLENBQVVDLElBQUksRUFBRTtJQUFFLE9BQU9BLElBQUksS0FBSyxJQUFJLEdBQUdBLElBQUksR0FBRyxFQUFFO0VBQUU7QUFDakUsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS9zdHIuanM/ODZlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjpzdHInLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBkYXRhICE9PSBudWxsID8gZGF0YSA6ICcnOyB9XG59KTtcbiJdLCJuYW1lcyI6WyJUeXBlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwiY29uc3RydWN0IiwiZGF0YSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/str.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar Type = __webpack_require__(/*! ../type */ \"(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type.js\");\nvar YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' +\n// [1] year\n'-([0-9][0-9])' +\n// [2] month\n'-([0-9][0-9])$'); // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' +\n// [1] year\n'-([0-9][0-9]?)' +\n// [2] month\n'-([0-9][0-9]?)' +\n// [3] day\n'(?:[Tt]|[ \\\\t]+)' +\n// ...\n'([0-9][0-9]?)' +\n// [4] hour\n':([0-9][0-9])' +\n// [5] minute\n':([0-9][0-9])' +\n// [6] second\n'(?:\\\\.([0-9]*))?' +\n// [7] fraction\n'(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' +\n// [8] tz [9] tz_sign [10] tz_hour\n'(?::([0-9][0-9]))?))?$'); // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\nfunction constructYamlTimestamp(data) {\n  var match,\n    year,\n    month,\n    day,\n    hour,\n    minute,\n    second,\n    fraction = 0,\n    delta = null,\n    tz_hour,\n    tz_minute,\n    date;\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n  if (match === null) throw new Error('Date resolve error');\n\n  // match: [1] year [2] month [3] day\n\n  year = +match[1];\n  month = +match[2] - 1; // JS month starts with 0\n  day = +match[3];\n  if (!match[4]) {\n    // no hour\n    return new Date(Date.UTC(year, month, day));\n  }\n\n  // match: [4] hour [5] minute [6] second [7] fraction\n\n  hour = +match[4];\n  minute = +match[5];\n  second = +match[6];\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n    while (fraction.length < 3) {\n      // milli-seconds\n      fraction += '0';\n    }\n    fraction = +fraction;\n  }\n\n  // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n  if (match[9]) {\n    tz_hour = +match[10];\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n    if (match[9] === '-') delta = -delta;\n  }\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n  if (delta) date.setTime(date.getTime() - delta);\n  return date;\n}\nfunction representYamlTimestamp(object /*, style*/) {\n  return object.toISOString();\n}\nmodule.exports = new Type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS90aW1lc3RhbXAuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsSUFBSUEsSUFBSSxHQUFHQyxtQkFBTyxDQUFDLDBGQUFTLENBQUM7QUFFN0IsSUFBSUMsZ0JBQWdCLEdBQUcsSUFBSUMsTUFBTSxDQUMvQix5QkFBeUI7QUFBWTtBQUNyQyxlQUFlO0FBQXNCO0FBQ3JDLGdCQUFnQixDQUFDLENBQUMsQ0FBbUI7O0FBRXZDLElBQUlDLHFCQUFxQixHQUFHLElBQUlELE1BQU0sQ0FDcEMseUJBQXlCO0FBQVk7QUFDckMsZ0JBQWdCO0FBQXFCO0FBQ3JDLGdCQUFnQjtBQUFxQjtBQUNyQyxrQkFBa0I7QUFBbUI7QUFDckMsZUFBZTtBQUFzQjtBQUNyQyxlQUFlO0FBQXNCO0FBQ3JDLGVBQWU7QUFBc0I7QUFDckMsa0JBQWtCO0FBQW1CO0FBQ3JDLGtDQUFrQztBQUFHO0FBQ3JDLHdCQUF3QixDQUFDLENBQUMsQ0FBVzs7QUFFdkMsU0FBU0Usb0JBQW9CQSxDQUFDQyxJQUFJLEVBQUU7RUFDbEMsSUFBSUEsSUFBSSxLQUFLLElBQUksRUFBRSxPQUFPLEtBQUs7RUFDL0IsSUFBSUosZ0JBQWdCLENBQUNLLElBQUksQ0FBQ0QsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLE9BQU8sSUFBSTtFQUNyRCxJQUFJRixxQkFBcUIsQ0FBQ0csSUFBSSxDQUFDRCxJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUUsT0FBTyxJQUFJO0VBQzFELE9BQU8sS0FBSztBQUNkO0FBRUEsU0FBU0Usc0JBQXNCQSxDQUFDRixJQUFJLEVBQUU7RUFDcEMsSUFBSUcsS0FBSztJQUFFQyxJQUFJO0lBQUVDLEtBQUs7SUFBRUMsR0FBRztJQUFFQyxJQUFJO0lBQUVDLE1BQU07SUFBRUMsTUFBTTtJQUFFQyxRQUFRLEdBQUcsQ0FBQztJQUMzREMsS0FBSyxHQUFHLElBQUk7SUFBRUMsT0FBTztJQUFFQyxTQUFTO0lBQUVDLElBQUk7RUFFMUNYLEtBQUssR0FBR1AsZ0JBQWdCLENBQUNLLElBQUksQ0FBQ0QsSUFBSSxDQUFDO0VBQ25DLElBQUlHLEtBQUssS0FBSyxJQUFJLEVBQUVBLEtBQUssR0FBR0wscUJBQXFCLENBQUNHLElBQUksQ0FBQ0QsSUFBSSxDQUFDO0VBRTVELElBQUlHLEtBQUssS0FBSyxJQUFJLEVBQUUsTUFBTSxJQUFJWSxLQUFLLENBQUMsb0JBQW9CLENBQUM7O0VBRXpEOztFQUVBWCxJQUFJLEdBQUcsQ0FBRUQsS0FBSyxDQUFDLENBQUMsQ0FBRTtFQUNsQkUsS0FBSyxHQUFHLENBQUVGLEtBQUssQ0FBQyxDQUFDLENBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUN6QkcsR0FBRyxHQUFHLENBQUVILEtBQUssQ0FBQyxDQUFDLENBQUU7RUFFakIsSUFBSSxDQUFDQSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7SUFBRTtJQUNmLE9BQU8sSUFBSWEsSUFBSSxDQUFDQSxJQUFJLENBQUNDLEdBQUcsQ0FBQ2IsSUFBSSxFQUFFQyxLQUFLLEVBQUVDLEdBQUcsQ0FBQyxDQUFDO0VBQzdDOztFQUVBOztFQUVBQyxJQUFJLEdBQUcsQ0FBRUosS0FBSyxDQUFDLENBQUMsQ0FBRTtFQUNsQkssTUFBTSxHQUFHLENBQUVMLEtBQUssQ0FBQyxDQUFDLENBQUU7RUFDcEJNLE1BQU0sR0FBRyxDQUFFTixLQUFLLENBQUMsQ0FBQyxDQUFFO0VBRXBCLElBQUlBLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNaTyxRQUFRLEdBQUdQLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQ2UsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDL0IsT0FBT1IsUUFBUSxDQUFDUyxNQUFNLEdBQUcsQ0FBQyxFQUFFO01BQUU7TUFDNUJULFFBQVEsSUFBSSxHQUFHO0lBQ2pCO0lBQ0FBLFFBQVEsR0FBRyxDQUFDQSxRQUFRO0VBQ3RCOztFQUVBOztFQUVBLElBQUlQLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNaUyxPQUFPLEdBQUcsQ0FBRVQsS0FBSyxDQUFDLEVBQUUsQ0FBRTtJQUN0QlUsU0FBUyxHQUFHLEVBQUVWLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0JRLEtBQUssR0FBRyxDQUFDQyxPQUFPLEdBQUcsRUFBRSxHQUFHQyxTQUFTLElBQUksS0FBSyxDQUFDLENBQUM7SUFDNUMsSUFBSVYsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRVEsS0FBSyxHQUFHLENBQUNBLEtBQUs7RUFDdEM7RUFFQUcsSUFBSSxHQUFHLElBQUlFLElBQUksQ0FBQ0EsSUFBSSxDQUFDQyxHQUFHLENBQUNiLElBQUksRUFBRUMsS0FBSyxFQUFFQyxHQUFHLEVBQUVDLElBQUksRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsQ0FBQyxDQUFDO0VBRTNFLElBQUlDLEtBQUssRUFBRUcsSUFBSSxDQUFDTSxPQUFPLENBQUNOLElBQUksQ0FBQ08sT0FBTyxDQUFDLENBQUMsR0FBR1YsS0FBSyxDQUFDO0VBRS9DLE9BQU9HLElBQUk7QUFDYjtBQUVBLFNBQVNRLHNCQUFzQkEsQ0FBQ0MsTUFBTSxDQUFDLGFBQWE7RUFDbEQsT0FBT0EsTUFBTSxDQUFDQyxXQUFXLENBQUMsQ0FBQztBQUM3QjtBQUVBQyxNQUFNLENBQUNDLE9BQU8sR0FBRyxJQUFJaEMsSUFBSSxDQUFDLDZCQUE2QixFQUFFO0VBQ3ZEaUMsSUFBSSxFQUFFLFFBQVE7RUFDZEMsT0FBTyxFQUFFN0Isb0JBQW9CO0VBQzdCOEIsU0FBUyxFQUFFM0Isc0JBQXNCO0VBQ2pDNEIsVUFBVSxFQUFFZCxJQUFJO0VBQ2hCZSxTQUFTLEVBQUVUO0FBQ2IsQ0FBQyxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZ19wZGkvLi9ub2RlX21vZHVsZXMvZ3JheS1tYXR0ZXIvbm9kZV9tb2R1bGVzL2pzLXlhbWwvbGliL2pzLXlhbWwvdHlwZS90aW1lc3RhbXAuanM/NGI1OSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBUeXBlID0gcmVxdWlyZSgnLi4vdHlwZScpO1xuXG52YXIgWUFNTF9EQVRFX1JFR0VYUCA9IG5ldyBSZWdFeHAoXG4gICdeKFswLTldWzAtOV1bMC05XVswLTldKScgICAgICAgICAgKyAvLyBbMV0geWVhclxuICAnLShbMC05XVswLTldKScgICAgICAgICAgICAgICAgICAgICsgLy8gWzJdIG1vbnRoXG4gICctKFswLTldWzAtOV0pJCcpOyAgICAgICAgICAgICAgICAgICAvLyBbM10gZGF5XG5cbnZhciBZQU1MX1RJTUVTVEFNUF9SRUdFWFAgPSBuZXcgUmVnRXhwKFxuICAnXihbMC05XVswLTldWzAtOV1bMC05XSknICAgICAgICAgICsgLy8gWzFdIHllYXJcbiAgJy0oWzAtOV1bMC05XT8pJyAgICAgICAgICAgICAgICAgICArIC8vIFsyXSBtb250aFxuICAnLShbMC05XVswLTldPyknICAgICAgICAgICAgICAgICAgICsgLy8gWzNdIGRheVxuICAnKD86W1R0XXxbIFxcXFx0XSspJyAgICAgICAgICAgICAgICAgKyAvLyAuLi5cbiAgJyhbMC05XVswLTldPyknICAgICAgICAgICAgICAgICAgICArIC8vIFs0XSBob3VyXG4gICc6KFswLTldWzAtOV0pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNV0gbWludXRlXG4gICc6KFswLTldWzAtOV0pJyAgICAgICAgICAgICAgICAgICAgKyAvLyBbNl0gc2Vjb25kXG4gICcoPzpcXFxcLihbMC05XSopKT8nICAgICAgICAgICAgICAgICArIC8vIFs3XSBmcmFjdGlvblxuICAnKD86WyBcXFxcdF0qKFp8KFstK10pKFswLTldWzAtOV0/KScgKyAvLyBbOF0gdHogWzldIHR6X3NpZ24gWzEwXSB0el9ob3VyXG4gICcoPzo6KFswLTldWzAtOV0pKT8pKT8kJyk7ICAgICAgICAgICAvLyBbMTFdIHR6X21pbnV0ZVxuXG5mdW5jdGlvbiByZXNvbHZlWWFtbFRpbWVzdGFtcChkYXRhKSB7XG4gIGlmIChkYXRhID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gIGlmIChZQU1MX0RBVEVfUkVHRVhQLmV4ZWMoZGF0YSkgIT09IG51bGwpIHJldHVybiB0cnVlO1xuICBpZiAoWUFNTF9USU1FU1RBTVBfUkVHRVhQLmV4ZWMoZGF0YSkgIT09IG51bGwpIHJldHVybiB0cnVlO1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbnN0cnVjdFlhbWxUaW1lc3RhbXAoZGF0YSkge1xuICB2YXIgbWF0Y2gsIHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBmcmFjdGlvbiA9IDAsXG4gICAgICBkZWx0YSA9IG51bGwsIHR6X2hvdXIsIHR6X21pbnV0ZSwgZGF0ZTtcblxuICBtYXRjaCA9IFlBTUxfREFURV9SRUdFWFAuZXhlYyhkYXRhKTtcbiAgaWYgKG1hdGNoID09PSBudWxsKSBtYXRjaCA9IFlBTUxfVElNRVNUQU1QX1JFR0VYUC5leGVjKGRhdGEpO1xuXG4gIGlmIChtYXRjaCA9PT0gbnVsbCkgdGhyb3cgbmV3IEVycm9yKCdEYXRlIHJlc29sdmUgZXJyb3InKTtcblxuICAvLyBtYXRjaDogWzFdIHllYXIgWzJdIG1vbnRoIFszXSBkYXlcblxuICB5ZWFyID0gKyhtYXRjaFsxXSk7XG4gIG1vbnRoID0gKyhtYXRjaFsyXSkgLSAxOyAvLyBKUyBtb250aCBzdGFydHMgd2l0aCAwXG4gIGRheSA9ICsobWF0Y2hbM10pO1xuXG4gIGlmICghbWF0Y2hbNF0pIHsgLy8gbm8gaG91clxuICAgIHJldHVybiBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5KSk7XG4gIH1cblxuICAvLyBtYXRjaDogWzRdIGhvdXIgWzVdIG1pbnV0ZSBbNl0gc2Vjb25kIFs3XSBmcmFjdGlvblxuXG4gIGhvdXIgPSArKG1hdGNoWzRdKTtcbiAgbWludXRlID0gKyhtYXRjaFs1XSk7XG4gIHNlY29uZCA9ICsobWF0Y2hbNl0pO1xuXG4gIGlmIChtYXRjaFs3XSkge1xuICAgIGZyYWN0aW9uID0gbWF0Y2hbN10uc2xpY2UoMCwgMyk7XG4gICAgd2hpbGUgKGZyYWN0aW9uLmxlbmd0aCA8IDMpIHsgLy8gbWlsbGktc2Vjb25kc1xuICAgICAgZnJhY3Rpb24gKz0gJzAnO1xuICAgIH1cbiAgICBmcmFjdGlvbiA9ICtmcmFjdGlvbjtcbiAgfVxuXG4gIC8vIG1hdGNoOiBbOF0gdHogWzldIHR6X3NpZ24gWzEwXSB0el9ob3VyIFsxMV0gdHpfbWludXRlXG5cbiAgaWYgKG1hdGNoWzldKSB7XG4gICAgdHpfaG91ciA9ICsobWF0Y2hbMTBdKTtcbiAgICB0el9taW51dGUgPSArKG1hdGNoWzExXSB8fCAwKTtcbiAgICBkZWx0YSA9ICh0el9ob3VyICogNjAgKyB0el9taW51dGUpICogNjAwMDA7IC8vIGRlbHRhIGluIG1pbGktc2Vjb25kc1xuICAgIGlmIChtYXRjaFs5XSA9PT0gJy0nKSBkZWx0YSA9IC1kZWx0YTtcbiAgfVxuXG4gIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQyh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgZnJhY3Rpb24pKTtcblxuICBpZiAoZGVsdGEpIGRhdGUuc2V0VGltZShkYXRlLmdldFRpbWUoKSAtIGRlbHRhKTtcblxuICByZXR1cm4gZGF0ZTtcbn1cblxuZnVuY3Rpb24gcmVwcmVzZW50WWFtbFRpbWVzdGFtcChvYmplY3QgLyosIHN0eWxlKi8pIHtcbiAgcmV0dXJuIG9iamVjdC50b0lTT1N0cmluZygpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ldyBUeXBlKCd0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAnLCB7XG4gIGtpbmQ6ICdzY2FsYXInLFxuICByZXNvbHZlOiByZXNvbHZlWWFtbFRpbWVzdGFtcCxcbiAgY29uc3RydWN0OiBjb25zdHJ1Y3RZYW1sVGltZXN0YW1wLFxuICBpbnN0YW5jZU9mOiBEYXRlLFxuICByZXByZXNlbnQ6IHJlcHJlc2VudFlhbWxUaW1lc3RhbXBcbn0pO1xuIl0sIm5hbWVzIjpbIlR5cGUiLCJyZXF1aXJlIiwiWUFNTF9EQVRFX1JFR0VYUCIsIlJlZ0V4cCIsIllBTUxfVElNRVNUQU1QX1JFR0VYUCIsInJlc29sdmVZYW1sVGltZXN0YW1wIiwiZGF0YSIsImV4ZWMiLCJjb25zdHJ1Y3RZYW1sVGltZXN0YW1wIiwibWF0Y2giLCJ5ZWFyIiwibW9udGgiLCJkYXkiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwiZnJhY3Rpb24iLCJkZWx0YSIsInR6X2hvdXIiLCJ0el9taW51dGUiLCJkYXRlIiwiRXJyb3IiLCJEYXRlIiwiVVRDIiwic2xpY2UiLCJsZW5ndGgiLCJzZXRUaW1lIiwiZ2V0VGltZSIsInJlcHJlc2VudFlhbWxUaW1lc3RhbXAiLCJvYmplY3QiLCJ0b0lTT1N0cmluZyIsIm1vZHVsZSIsImV4cG9ydHMiLCJraW5kIiwicmVzb2x2ZSIsImNvbnN0cnVjdCIsImluc3RhbmNlT2YiLCJyZXByZXNlbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/gray-matter/node_modules/js-yaml/lib/js-yaml/type/timestamp.js\n");

/***/ })

};
;